================= STRUTTURA FILE =================
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/README.md
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/404/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ClientProviders.jsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/[id]/page.tsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/[id]/tsconfig.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/data/products.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/id/page.tsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy 2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/login/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/login/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/offerte/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy5.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy10.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy5.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy6.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy7.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy8.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy9.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/spedizioni/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/vendite/VenditePageContent.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/vendite/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/admin-log/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/auth/login.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/auth/register.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/route copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/send-offerte.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/fattura/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/get-ordine/route copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/get-ordine/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/[id]/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/rou.ts
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-ordini/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-product/route copy.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-product/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/upload-image/route copy.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/upload-image/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ar/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy5.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy12.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy13.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy14.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy15.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy16.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy17.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy18.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy19.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy20.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy21.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy22.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy23.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy24.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy25.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy26.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy27.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy28.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/de/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/en/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/es/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/eventi/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/fr/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy 2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy18.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy19.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy20.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy21.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy22.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/globals.css
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/it/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ja/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/layout.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/authConfig.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/citta.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/formatEuro.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/paesi.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/supabaseClient.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/offerte/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ordine-confermato/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ordine-confermato/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy10.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy11.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy12.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy13.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy14.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy15.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy16.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pageprotected.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/search/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/servizi/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/zh/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/AuthWrapper.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtons.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtons_v0.1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtonsxsitogr.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/FlagLanguageSwitcher.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/FlagLanguageSwitcher_v0.1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/LoginSidebar.jsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/MobileMenu copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/MobileMenu.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/SearchIcon.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy23.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy24.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy25.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy26.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy27.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy28.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy29.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy30.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy31.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy32.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy33.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy34.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy35.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenuprotected.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/file_tree.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/inizializzazione di localhost:3000.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/istruzioni_chat.md
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/jsconfig.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/next-env.d.ts
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/package-lock.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/package.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/postcss.config.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/public/data/clienti.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/resend api key .txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/snapshot_g-rgabriellaromeo.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/struttura_progetto.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/tailwind.config.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/tsconfig.json

================= CONTENUTO DEI FILE =================

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/README.md -----
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/404/page.js -----
export default function NotFoundPage() {
    return (
      <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', textAlign: 'center' }}>
        <h1 style={{ fontSize: '2rem' }}>😕 Pagina non trovata</h1>
        <p>La pagina che cerchi non esiste.</p>
      </main>
    );
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ClientProviders.jsx -----
'use client';

import { useState } from 'react';
import MobileMenu from '../components/MobileMenu';
import TopRightMenu from '../components/TopRightMenu';
import LoginSidebar from '../components/LoginSidebar';

export default function ClientProviders({ children }) {
  const [loginOpen, setLoginOpen] = useState(false);

  return (
    <>
      <MobileMenu />
      <TopRightMenu />
      <LoginSidebar isOpen={loginOpen} onClose={() => setLoginOpen(false)} />

      <button
        onClick={() => setLoginOpen(true)}
        className="fixed top-4 right-20 z-50 bg-white text-black px-3 py-1 rounded text-sm"
      >
        👤 Login
      </button>

      {children}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy1.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AbbigliamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: { titolo: 'GALLERIA ABBIGLIAMENTO', sottotutte: 'Tutte le sottocategorie', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', venduto: 'venduto', erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.', visualizzaPolicy: 'Visualizza Policy', accetta: 'Sono d\'accordo con la policy per la produzione', continua: 'Continua con l’ordine', rimuovi: 'Rimuovi', policyTitolo: 'Policy per la produzione', carrello: 'Carrello' },
    en: { titolo: 'FASHION WEAR', sottotutte: 'All subcategories', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', venduto: 'sold', erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.', visualizzaPolicy: 'View Policy', accetta: 'I agree with the production policy', continua: 'Continue with order', rimuovi: 'Remove', policyTitolo: 'Production Policy', carrello: 'Cart' },
    fr: { titolo: 'VÊTEMENTS', sottotutte: 'Toutes les sous-catégories', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', venduto: 'vendu', erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.', visualizzaPolicy: 'Voir la politique', accetta: 'J’accepte la politique de production', continua: 'Continuer la commande', rimuovi: 'Supprimer', policyTitolo: 'Politique de production', carrello: 'Panier' },
    de: { titolo: 'BEKLEIDUNG', sottotutte: 'Alle Unterkategorien', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', venduto: 'ausverkauft', erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.', visualizzaPolicy: 'Richtlinie anzeigen', accetta: 'Ich stimme der Produktionsrichtlinie zu', continua: 'Bestellung fortsetzen', rimuovi: 'Entfernen', policyTitolo: 'Produktionsrichtlinie', carrello: 'Warenkorb' },
    es: { titolo: 'ROPA', sottotutte: 'Todas las subcategorías', aggiungi: 'Agregar al carrito', checkout: 'Pagar', indietro: 'Atrás', venduto: 'vendido', erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.', visualizzaPolicy: 'Ver política', accetta: 'Acepto la política de producción', continua: 'Continuar pedido', rimuovi: 'Eliminar', policyTitolo: 'Política de producción', carrello: 'Carrito' },
    ar: { titolo: 'ملابس', sottotutte: 'جميع الفئات الفرعية', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'عودة', venduto: 'تم البيع', erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.', visualizzaPolicy: 'عرض السياسة', accetta: 'أوافق على سياسة الإنتاج', continua: 'متابعة الطلب', rimuovi: 'إزالة', policyTitolo: 'سياسة الإنتاج', carrello: 'سلة التسوق' },
    zh: { titolo: '服饰', sottotutte: '所有子类别', aggiungi: '加入购物车', checkout: '结账', indietro: '返回', venduto: '售罄', erroreQuantita: '请求数量超出库存！请查看我们的生产政策。', visualizzaPolicy: '查看政策', accetta: '我同意生产政策', continua: '继续下单', rimuovi: '移除', policyTitolo: '生产政策', carrello: '购物车' },
    ja: { titolo: 'ファッションウェア', sottotutte: 'すべてのサブカテゴリ', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', venduto: '売切れ', erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。', visualizzaPolicy: 'ポリシーを見る', accetta: '生産ポリシーに同意します', continua: '注文を続ける', rimuovi: '削除', policyTitolo: '生産ポリシー', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    abiti: { it: 'Abiti', en: 'Dresses', fr: 'Robes', de: 'Kleider', es: 'Vestidos', ar: 'فساتين', zh: '连衣裙', ja: 'ドレス' },
    'camicie top': { it: 'Camicie Top', en: 'Shirts & Tops', fr: 'Chemises & Tops', de: 'Hemden & Tops', es: 'Camisas y Tops', ar: 'قمصان وبلوزات', zh: '衬衫和上衣', ja: 'シャツとトップス' },
    pantaloni: { it: 'Pantaloni', en: 'Trousers', fr: 'Pantalons', de: 'Hosen', es: 'Pantalones', ar: 'سراويل', zh: '裤子', ja: 'ズボン' },
    gonne: { it: 'Gonne', en: 'Skirts', fr: 'Jupes', de: 'Röcke', es: 'Faldas', ar: 'تنانير', zh: '裙子', ja: 'スカート' },
    'giacche e cappotti': { it: 'Giacche e Cappotti', en: 'Jackets & Coats', fr: 'Vestes & Manteaux', de: 'Jacken & Mäntel', es: 'Chaquetas y Abrigos', ar: 'سترات ومعاطف', zh: '夹克和大衣', ja: 'ジャケットとコート' },
    abaye: { it: 'Abaye', en: 'Abayas', fr: 'Abayas', de: 'Abayas', es: 'Abayas', ar: 'عبايات', zh: '阿拜亚', ja: 'アバヤ' },
    caftani: { it: 'Caftani', en: 'Kaftans', fr: 'Caftans', de: 'Kaftane', es: 'Caftanes', ar: 'قفاطين', zh: '开襟长袍', ja: 'カフタン' },
    'abbigliamento da mare': { it: 'Abbigliamento da mare', en: 'Beachwear', fr: 'Tenues de plage', de: 'Badebekleidung', es: 'Ropa de playa', ar: 'ملابس بحر', zh: '泳装', ja: 'ビーチウェア' }
  };
  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'abbigliamento')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };
  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', textAlign: 'center', marginBottom: '2rem' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{ display: 'flex', gap: '1rem', overflowX: 'auto', padding: '1rem' }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.65rem',
              textAlign: 'center',
              flex: '0 0 auto',
              width: '160px',
              scrollSnapAlign: 'start',
              position: 'relative'
            }}>
              {prodotto.offerta && (
                <div style={{
                  position: 'absolute',
                  top: '6px',
                  left: '6px',
                  backgroundColor: 'rgba(255, 0, 0, 0.6)',
                  color: 'white',
                  padding: '2px 4px',
                  borderRadius: '3px',
                  fontSize: '0.5rem',
                  transform: 'rotate(-12deg)',
                  fontWeight: 'bold',
                }}>✨ OFFERTA</div>
              )}
              {prodotto.quantita === 0 && (
                <div style={{
                  position: 'absolute',
                  top: '6px',
                  right: '6px',
                  backgroundColor: 'rgba(255, 0, 0, 0.2)',
                  color: 'red',
                  padding: '2px 4px',
                  fontSize: '0.5rem',
                  borderRadius: '3px',
                  transform: 'rotate(-12deg)',
                  fontWeight: 'bold'
                }}>
                  {t('venduto')}
                </div>
              )}
              <img
                src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
                alt={prodotto.nome}
                style={{ width: '100%', height: 'auto', maxHeight: '80px', objectFit: 'contain', borderRadius: '4px', marginBottom: '0.3rem', cursor: 'pointer' }}
                onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              {prodotto.offerta ? (
                <p style={{ fontFamily: 'Arial' }}>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                    {'\u20AC'} {prezzoNum.toFixed(1)}
                  </span>
                  <span style={{ color: 'red', fontWeight: 'bold' }}>
                    {'\u20AC'} {prezzoScontato.toFixed(1)} (-{scontoNum}%)
                  </span>
                </p>
              ) : (
                <p style={{ fontFamily: 'Arial' }}>
                  {'\u20AC'} {prezzoNum.toFixed(1)}
                </p>
              )}
              <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem' }}>
                <button onClick={() => cambiaQuantita(prodotto.id, -1)} style={{ border: 'none', background: 'none', fontSize: '1rem' }}>–</button>
                <input type="text" value={quantita[prodotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
                <button onClick={() => cambiaQuantita(prodotto.id, 1)} style={{ border: 'none', background: 'none', fontSize: '1rem' }}>+</button>
              </div>
              <button onClick={() => aggiungiAlCarrello(prodotto)} style={{ marginTop: '0.3rem', padding: '0.3rem', fontSize: '0.65rem', backgroundColor: '#333', color: 'white', borderRadius: '4px', border: 'none' }}>
                {t('aggiungi')}
              </button>
            </div>
          );
        })}
      </div>
      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>

          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}
          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy2.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AbbigliamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: { titolo: 'GALLERIA ABBIGLIAMENTO', sottotutte: 'Tutte le sottocategorie', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', venduto: 'venduto', erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.', visualizzaPolicy: 'Visualizza Policy', accetta: 'Sono d\'accordo con la policy per la produzione', continua: 'Continua con l’ordine', rimuovi: 'Rimuovi', policyTitolo: 'Policy per la produzione', carrello: 'Carrello' },
    en: { titolo: 'FASHION WEAR', sottotutte: 'All subcategories', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', venduto: 'sold', erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.', visualizzaPolicy: 'View Policy', accetta: 'I agree with the production policy', continua: 'Continue with order', rimuovi: 'Remove', policyTitolo: 'Production Policy', carrello: 'Cart' },
    fr: { titolo: 'VÊTEMENTS', sottotutte: 'Toutes les sous-catégories', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', venduto: 'vendu', erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.', visualizzaPolicy: 'Voir la politique', accetta: 'J’accepte la politique de production', continua: 'Continuer la commande', rimuovi: 'Supprimer', policyTitolo: 'Politique de production', carrello: 'Panier' },
    de: { titolo: 'BEKLEIDUNG', sottotutte: 'Alle Unterkategorien', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', venduto: 'ausverkauft', erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.', visualizzaPolicy: 'Richtlinie anzeigen', accetta: 'Ich stimme der Produktionsrichtlinie zu', continua: 'Bestellung fortsetzen', rimuovi: 'Entfernen', policyTitolo: 'Produktionsrichtlinie', carrello: 'Warenkorb' },
    es: { titolo: 'ROPA', sottotutte: 'Todas las subcategorías', aggiungi: 'Agregar al carrito', checkout: 'Pagar', indietro: 'Atrás', venduto: 'vendido', erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.', visualizzaPolicy: 'Ver política', accetta: 'Acepto la política de producción', continua: 'Continuar pedido', rimuovi: 'Eliminar', policyTitolo: 'Política de producción', carrello: 'Carrito' },
    ar: { titolo: 'ملابس', sottotutte: 'جميع الفئات الفرعية', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'عودة', venduto: 'تم البيع', erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.', visualizzaPolicy: 'عرض السياسة', accetta: 'أوافق على سياسة الإنتاج', continua: 'متابعة الطلب', rimuovi: 'إزالة', policyTitolo: 'سياسة الإنتاج', carrello: 'سلة التسوق' },
    zh: { titolo: '服饰', sottotutte: '所有子类别', aggiungi: '加入购物车', checkout: '结账', indietro: '返回', venduto: '售罄', erroreQuantita: '请求数量超出库存！请查看我们的生产政策。', visualizzaPolicy: '查看政策', accetta: '我同意生产政策', continua: '继续下单', rimuovi: '移除', policyTitolo: '生产政策', carrello: '购物车' },
    ja: { titolo: 'ファッションウェア', sottotutte: 'すべてのサブカテゴリ', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', venduto: '売切れ', erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。', visualizzaPolicy: 'ポリシーを見る', accetta: '生産ポリシーに同意します', continua: '注文を続ける', rimuovi: '削除', policyTitolo: '生産ポリシー', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    abiti: { it: 'Abiti', en: 'Dresses', fr: 'Robes', de: 'Kleider', es: 'Vestidos', ar: 'فساتين', zh: '连衣裙', ja: 'ドレス' },
    'camicie top': { it: 'Camicie Top', en: 'Shirts & Tops', fr: 'Chemises & Tops', de: 'Hemden & Tops', es: 'Camisas y Tops', ar: 'قمصان وبلوزات', zh: '衬衫和上衣', ja: 'シャツとトップス' },
    pantaloni: { it: 'Pantaloni', en: 'Trousers', fr: 'Pantalons', de: 'Hosen', es: 'Pantalones', ar: 'سراويل', zh: '裤子', ja: 'ズボン' },
    gonne: { it: 'Gonne', en: 'Skirts', fr: 'Jupes', de: 'Röcke', es: 'Faldas', ar: 'تنانير', zh: '裙子', ja: 'スカート' },
    'giacche e cappotti': { it: 'Giacche e Cappotti', en: 'Jackets & Coats', fr: 'Vestes & Manteaux', de: 'Jacken & Mäntel', es: 'Chaquetas y Abrigos', ar: 'سترات ومعاطف', zh: '夹克和大衣', ja: 'ジャケットとコート' },
    abaye: { it: 'Abaye', en: 'Abayas', fr: 'Abayas', de: 'Abayas', es: 'Abayas', ar: 'عبايات', zh: '阿拜亚', ja: 'アバヤ' },
    caftani: { it: 'Caftani', en: 'Kaftans', fr: 'Caftans', de: 'Kaftane', es: 'Caftanes', ar: 'قفاطين', zh: '开襟长袍', ja: 'カフタン' },
    'abbigliamento da mare': { it: 'Abbigliamento da mare', en: 'Beachwear', fr: 'Tenues de plage', de: 'Badebekleidung', es: 'Ropa de playa', ar: 'ملابس بحر', zh: '泳装', ja: 'ビーチウェア' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'abbigliamento')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);
  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', textAlign: 'center', marginBottom: '2rem' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1rem'
      }}>
        {filtrati.map(prodotto => {
          const immagini = prodotto.immagine.split(',').map(img => img.trim());
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.75rem',
              textAlign: 'center'
            }}>
              <img
                src={baseUrl + immagini[0]}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: 'auto',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(immagini[0]);
                }}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              <p style={{ fontFamily: 'Arial' }}>
                {prodotto.offerta ? (
                  <>
                    <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                      {'\u20AC'} {prezzoNum.toFixed(1)}
                    </span>
                    <span style={{ color: 'red', fontWeight: 'bold' }}>
                      {'\u20AC'} {prezzoScontato.toFixed(1)} (-{scontoNum}%)
                    </span>
                  </>
                ) : (
                  <>{'\u20AC'} {prezzoNum.toFixed(1)}</>
                )}
              </p>
            </div>
          );
        })}
      </div>
      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={() => {
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{ width: '100%', height: 'auto', borderRadius: '6px', marginBottom: '1rem' }}
            />

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', marginBottom: '1rem', flexWrap: 'wrap' }}>
              {popupProdotto.immagine.split(',').map((img, idx) => (
                <img
                  key={idx}
                  src={baseUrl + img.trim()}
                  alt={`miniatura-${idx}`}
                  onClick={() => setImmagineAttiva(img.trim())}
                  style={{
                    width: '60px',
                    height: '60px',
                    objectFit: 'cover',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    border: img.trim() === immagineAttiva ? '2px solid black' : '1px solid #ccc'
                  }}
                />
              ))}
            </div>

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>
            <p style={{ fontWeight: 'bold', fontSize: '1rem' }}>
              {'\u20AC'} {popupProdotto.offerta
                ? (
                  <span style={{ color: 'red' }}>
                    {(Number(popupProdotto.prezzo) * (1 - (Number(popupProdotto.sconto || 0) / 100))).toFixed(1)}
                  </span>
                )
                : Number(popupProdotto.prezzo).toFixed(1)}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}>
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input type="text" value={quantita[popupProdotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={() => {
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}
      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>

          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}

          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy3.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AbbigliamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: { titolo: 'GALLERIA ABBIGLIAMENTO', sottotutte: 'Tutte le sottocategorie', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', venduto: 'venduto', erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.', visualizzaPolicy: 'Visualizza Policy', accetta: 'Sono d\'accordo con la policy per la produzione', continua: 'Continua con l’ordine', rimuovi: 'Rimuovi', policyTitolo: 'Policy per la produzione', carrello: 'Carrello' },
    en: { titolo: 'FASHION WEAR', sottotutte: 'All subcategories', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', venduto: 'sold', erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.', visualizzaPolicy: 'View Policy', accetta: 'I agree with the production policy', continua: 'Continue with order', rimuovi: 'Remove', policyTitolo: 'Production Policy', carrello: 'Cart' },
    fr: { titolo: 'VÊTEMENTS', sottotutte: 'Toutes les sous-catégories', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', venduto: 'vendu', erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.', visualizzaPolicy: 'Voir la politique', accetta: 'J’accepte la politique de production', continua: 'Continuer la commande', rimuovi: 'Supprimer', policyTitolo: 'Politique de production', carrello: 'Panier' },
    de: { titolo: 'BEKLEIDUNG', sottotutte: 'Alle Unterkategorien', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', venduto: 'ausverkauft', erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.', visualizzaPolicy: 'Richtlinie anzeigen', accetta: 'Ich stimme der Produktionsrichtlinie zu', continua: 'Bestellung fortsetzen', rimuovi: 'Entfernen', policyTitolo: 'Produktionsrichtlinie', carrello: 'Warenkorb' },
    es: { titolo: 'ROPA', sottotutte: 'Todas las subcategorías', aggiungi: 'Agregar al carrito', checkout: 'Pagar', indietro: 'Atrás', venduto: 'vendido', erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.', visualizzaPolicy: 'Ver política', accetta: 'Acepto la política de producción', continua: 'Continuar pedido', rimuovi: 'Eliminar', policyTitolo: 'Política de producción', carrello: 'Carrito' },
    ar: { titolo: 'ملابس', sottotutte: 'جميع الفئات الفرعية', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'عودة', venduto: 'تم البيع', erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.', visualizzaPolicy: 'عرض السياسة', accetta: 'أوافق على سياسة الإنتاج', continua: 'متابعة الطلب', rimuovi: 'إزالة', policyTitolo: 'سياسة الإنتاج', carrello: 'سلة التسوق' },
    zh: { titolo: '服饰', sottotutte: '所有子类别', aggiungi: '加入购物车', checkout: '结账', indietro: '返回', venduto: '售罄', erroreQuantita: '请求数量超出库存！请查看我们的生产政策。', visualizzaPolicy: '查看政策', accetta: '我同意生产政策', continua: '继续下单', rimuovi: '移除', policyTitolo: '生产政策', carrello: '购物车' },
    ja: { titolo: 'ファッションウェア', sottotutte: 'すべてのサブカテゴリ', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', venduto: '売切れ', erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。', visualizzaPolicy: 'ポリシーを見る', accetta: '生産ポリシーに同意します', continua: '注文を続ける', rimuovi: '削除', policyTitolo: '生産ポリシー', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    abiti: { it: 'Abiti', en: 'Dresses', fr: 'Robes', de: 'Kleider', es: 'Vestidos', ar: 'فساتين', zh: '连衣裙', ja: 'ドレス' },
    'camicie top': { it: 'Camicie Top', en: 'Shirts & Tops', fr: 'Chemises & Tops', de: 'Hemden & Tops', es: 'Camisas y Tops', ar: 'قمصان وبلوزات', zh: '衬衫和上衣', ja: 'シャツとトップス' },
    pantaloni: { it: 'Pantaloni', en: 'Trousers', fr: 'Pantalons', de: 'Hosen', es: 'Pantalones', ar: 'سراويل', zh: '裤子', ja: 'ズボン' },
    gonne: { it: 'Gonne', en: 'Skirts', fr: 'Jupes', de: 'Röcke', es: 'Faldas', ar: 'تنانير', zh: '裙子', ja: 'スカート' },
    'giacche e cappotti': { it: 'Giacche e Cappotti', en: 'Jackets & Coats', fr: 'Vestes & Manteaux', de: 'Jacken & Mäntel', es: 'Chaquetas y Abrigos', ar: 'سترات ومعاطف', zh: '夹克和大衣', ja: 'ジャケットとコート' },
    abaye: { it: 'Abaye', en: 'Abayas', fr: 'Abayas', de: 'Abayas', es: 'Abayas', ar: 'عبايات', zh: '阿拜亚', ja: 'アバヤ' },
    caftani: { it: 'Caftani', en: 'Kaftans', fr: 'Caftans', de: 'Kaftane', es: 'Caftanes', ar: 'قفاطين', zh: '开襟长袍', ja: 'カフタン' },
    'abbigliamento da mare': { it: 'Abbigliamento da mare', en: 'Beachwear', fr: 'Tenues de plage', de: 'Badebekleidung', es: 'Ropa de playa', ar: 'ملابس بحر', zh: '泳装', ja: 'ビーチウェア' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'abbigliamento')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);
  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem 1rem', maxWidth: '100vw', overflowX: 'hidden', margin: '0 auto' }}>
      <h1 style={{ fontSize: 'clamp(1.5rem, 5vw, 2rem)', textAlign: 'center', marginBottom: '2rem', wordBreaK: 'BREAK-WORD', OVERFLOWWRAP: 'BREAK-WORD' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1rem'
      }}>
        {filtrati.map(prodotto => {
          const immagini = prodotto.immagine.split(',').map(img => img.trim());
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.75rem',
              textAlign: 'center'
            }}>
              <img
                src={baseUrl + immagini[0]}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: 'auto',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(immagini[0]);
                }}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              <p style={{ fontFamily: 'Arial' }}>
                {prodotto.offerta ? (
                  <>
                    <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                      {'\u20AC'} {prezzoNum.toFixed(1)}
                    </span>
                    <span style={{ color: 'red', fontWeight: 'bold' }}>
                      {'\u20AC'} {prezzoScontato.toFixed(1)} (-{scontoNum}%)
                    </span>
                  </>
                ) : (
                  <>{'\u20AC'} {prezzoNum.toFixed(1)}</>
                )}
              </p>
            </div>
          );
        })}
      </div>
      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{ width: '100%', height: 'auto', borderRadius: '6px', marginBottom: '1rem' }}
            />

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', marginBottom: '1rem', flexWrap: 'wrap' }}>
              {popupProdotto.immagine.split(',').map((img, idx) => (
                <img
                  key={idx}
                  src={baseUrl + img.trim()}
                  alt={`miniatura-${idx}`}
                  onClick={(e) => {
                    e.stopPropagation();
                    setImmagineAttiva(img.trim());
                  }}
                  style={{
                    width: '60px',
                    height: '60px',
                    objectFit: 'cover',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    border: img.trim() === immagineAttiva ? '2px solid black' : '1px solid #ccc'
                  }}
                />
              ))}
            </div>

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>
            <p style={{ fontWeight: 'bold', fontSize: '1rem' }}>
              {'\u20AC'} {popupProdotto.offerta
                ? (
                  <span style={{ color: 'red' }}>
                    {(Number(popupProdotto.prezzo) * (1 - (Number(popupProdotto.sconto || 0) / 100))).toFixed(1)}
                  </span>
                )
                : Number(popupProdotto.prezzo).toFixed(1)}
            </p>

            <div
              style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}
              onClick={(e) => e.stopPropagation()}
            >
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input type="text" value={quantita[popupProdotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={(e) => {
                e.stopPropagation();
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}
      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>

          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}

          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ShoppingCart } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';

export default function AbbigliamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: { titolo: 'GALLERIA ABBIGLIAMENTO', sottotutte: 'Tutte le sottocategorie', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', venduto: 'venduto', erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.', visualizzaPolicy: 'Visualizza Policy', accetta: 'Sono d\'accordo con la policy per la produzione', continua: 'Continua con l’ordine', rimuovi: 'Rimuovi', policyTitolo: 'Policy per la produzione', carrello: 'Carrello' },
    en: { titolo: 'FASHION WEAR', sottotutte: 'All subcategories', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', venduto: 'sold', erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.', visualizzaPolicy: 'View Policy', accetta: 'I agree with the production policy', continua: 'Continue with order', rimuovi: 'Remove', policyTitolo: 'Production Policy', carrello: 'Cart' },
    fr: { titolo: 'VÊTEMENTS', sottotutte: 'Toutes les sous-catégories', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', venduto: 'vendu', erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.', visualizzaPolicy: 'Voir la politique', accetta: 'J’accepte la politique de production', continua: 'Continuer la commande', rimuovi: 'Supprimer', policyTitolo: 'Politique de production', carrello: 'Panier' },
    de: { titolo: 'BEKLEIDUNG', sottotutte: 'Alle Unterkategorien', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', venduto: 'ausverkauft', erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.', visualizzaPolicy: 'Richtlinie anzeigen', accetta: 'Ich stimme der Produktionsrichtlinie zu', continua: 'Bestellung fortsetzen', rimuovi: 'Entfernen', policyTitolo: 'Produktionsrichtlinie', carrello: 'Warenkorb' },
    es: { titolo: 'ROPA', sottotutte: 'Todas las subcategorías', aggiungi: 'Agregar al carrito', checkout: 'Pagar', indietro: 'Atrás', venduto: 'vendido', erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.', visualizzaPolicy: 'Ver política', accetta: 'Acepto la política de producción', continua: 'Continuar pedido', rimuovi: 'Eliminar', policyTitolo: 'Política de producción', carrello: 'Carrito' },
    ar: { titolo: 'ملابس', sottotutte: 'جميع الفئات الفرعية', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'عودة', venduto: 'تم البيع', erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.', visualizzaPolicy: 'عرض السياسة', accetta: 'أوافق على سياسة الإنتاج', continua: 'متابعة الطلب', rimuovi: 'إزالة', policyTitolo: 'سياسة الإنتاج', carrello: 'سلة التسوق' },
    zh: { titolo: '服饰', sottotutte: '所有子类别', aggiungi: '加入购物车', checkout: '结账', indietro: '返回', venduto: '售罄', erroreQuantita: '请求数量超出库存！请查看我们的生产政策。', visualizzaPolicy: '查看政策', accetta: '我同意生产政策', continua: '继续下单', rimuovi: '移除', policyTitolo: '生产政策', carrello: '购物车' },
    ja: { titolo: 'ファッションウェア', sottotutte: 'すべてのサブカテゴリ', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', venduto: '売切れ', erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。', visualizzaPolicy: 'ポリシーを見る', accetta: '生産ポリシーに同意します', continua: '注文を続ける', rimuovi: '削除', policyTitolo: '生産ポリシー', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    abiti: { it: 'Abiti', en: 'Dresses', fr: 'Robes', de: 'Kleider', es: 'Vestidos', ar: 'فساتين', zh: '连衣裙', ja: 'ドレス' },
    'camicie top': { it: 'Camicie Top', en: 'Shirts & Tops', fr: 'Chemises & Tops', de: 'Hemden & Tops', es: 'Camisas y Tops', ar: 'قمصان وبلوزات', zh: '衬衫和上衣', ja: 'シャツとトップス' },
    pantaloni: { it: 'Pantaloni', en: 'Trousers', fr: 'Pantalons', de: 'Hosen', es: 'Pantalones', ar: 'سراويل', zh: '裤子', ja: 'ズボン' },
    gonne: { it: 'Gonne', en: 'Skirts', fr: 'Jupes', de: 'Röcke', es: 'Faldas', ar: 'تنانير', zh: '裙子', ja: 'スカート' },
    'giacche e cappotti': { it: 'Giacche e Cappotti', en: 'Jackets & Coats', fr: 'Vestes & Manteaux', de: 'Jacken & Mäntel', es: 'Chaquetas y Abrigos', ar: 'سترات ومعاطف', zh: '夹克和大衣', ja: 'ジャケットとコート' },
    abaye: { it: 'Abaye', en: 'Abayas', fr: 'Abayas', de: 'Abayas', es: 'Abayas', ar: 'عبايات', zh: '阿拜亚', ja: 'アバヤ' },
    caftani: { it: 'Caftani', en: 'Kaftans', fr: 'Caftans', de: 'Kaftane', es: 'Caftanes', ar: 'قفاطين', zh: '开襟长袍', ja: 'カフタン' },
    'abbigliamento da mare': { it: 'Abbigliamento da mare', en: 'Beachwear', fr: 'Tenues de plage', de: 'Badebekleidung', es: 'Ropa de playa', ar: 'ملابس بحر', zh: '泳装', ja: 'ビーチウェア' }
  };

  useEffect(() => {
    const carrelloSalvato = JSON.parse(localStorage.getItem('carrello') || '[]');
    setCarrello(carrelloSalvato);

    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'abbigliamento')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem 1rem', maxWidth: '100vw', overflowX: 'hidden', margin: '0 auto', position: 'relative' }}>
      {/* Icona carrello fissa */}
      {carrello.length > 0 && (
<div
  onClick={() => router.push(`/checkout?lang=${lang}`)}
  style={{
    position: 'fixed',
    top: '0.5rem',
    left: '0.5rem',
    background: 'none',
    color: 'white',
    padding: '0.4rem 0.6rem',
    fontSize: '0.75rem',
    fontFamily: 'Michroma, sans-serif',
    zIndex: 10000,
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    gap: '0.4rem',
    border: 'none',
    outline: 'none',
    boxShadow: 'none',
    WebkitBoxShadow: 'none',
    MozBoxShadow: 'none',
    borderRadius: 0
  }}
>
  <ShoppingCart size={16} strokeWidth={1.5} color="white" />
  <span style={{ lineHeight: 1 }}>Check-out</span>
</div>
      )}

      <h1 style={{
        fontSize: 'clamp(1.5rem, 5vw, 2rem)',
        textAlign: 'center',
        marginBottom: '2rem',
        wordBreak: 'break-word',
        overflowWrap: 'break-word'
      }}>
        {t('titolo')}
      </h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1rem'
      }}>
        {filtrati.map(prodotto => {
          const immagini = (prodotto.immagine || '').split(',').map(img => img.trim());
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;
          return (
              <div key={prodotto.id} style={{
                backgroundColor: 'white',
                color: 'black',
                padding: '0.5rem',
                borderRadius: '6px',
                fontSize: '0.75rem',
                textAlign: 'center',
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'space-between',
                height: '340px'  // puoi aumentare o ridurre se serve
              }}>
              <img
                src={baseUrl + immagini[0]}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: 'auto',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(immagini[0]);
                }}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              <p style={{ fontFamily: 'Arial' }}>
                {prodotto.offerta ? (
                  <>
                    <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                      € {prezzoNum.toFixed(2)}
                    </span>
                    <span style={{ color: 'red', fontWeight: 'bold' }}>
                      € {prezzoScontato.toFixed(2)} (-{scontoNum}%)
                    </span>
                  </>
                ) : (
                  <>€ {prezzoNum.toFixed(2)}</>
                )}
              </p>
            </div>
          );
        })}
      </div>

      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{ width: '100%', height: 'auto', borderRadius: '6px', marginBottom: '1rem' }}
            />

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', marginBottom: '1rem', flexWrap: 'wrap' }}>
              {popupProdotto.immagine.split(',').map((img, idx) => (
                <img
                  key={idx}
                  src={baseUrl + img.trim()}
                  alt={`miniatura-${idx}`}
                  onClick={(e) => {
                    e.stopPropagation();
                    setImmagineAttiva(img.trim());
                  }}
                  style={{
                    width: '60px',
                    height: '60px',
                    objectFit: 'cover',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    border: img.trim() === immagineAttiva ? '2px solid black' : '1px solid #ccc'
                  }}
                />
              ))}
            </div>

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>
            <p style={{ fontWeight: 'bold', fontSize: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {popupProdotto.offerta ? (
                <>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '8px' }}>
                    € {Number(popupProdotto.prezzo).toFixed(2)}
                  </span>
                  <span style={{ color: 'red' }}>
                    € {(Number(popupProdotto.prezzo) * (1 - (popupProdotto.sconto || 0) / 100)).toFixed(2)}
                    {popupProdotto.sconto > 0 && (
                      <span style={{ fontSize: '0.9rem', marginLeft: '4px' }}>
                        (-{popupProdotto.sconto}%)
                      </span>
                    )}
                  </span>
                </>
              ) : (
                <>€ {Number(popupProdotto.prezzo).toFixed(2)}</>
              )}
            </p>

            <div
              style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}
              onClick={(e) => e.stopPropagation()}
            >
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input type="text" value={quantita[popupProdotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={(e) => {
                e.stopPropagation();
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>
      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page copy1.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AccessoriPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA ACCESSORI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l’ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'ACCESSORY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE ACCESSOIRES',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'ACCESSOIRES GALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE ACCESORIOS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '配饰画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车',
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض الإكسسوارات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'アクセサリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    collane: { it: 'collane', en: 'necklaces', fr: 'colliers', de: 'ketten', es: 'collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    orecchini: { it: 'orecchini', en: 'earrings', fr: 'boucles d’oreilles', de: 'ohrringe', es: 'pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' },
    bracciali: { it: 'bracciali', en: 'bracelets', fr: 'bracelets', de: 'armbänder', es: 'pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    borse: { it: 'borse', en: 'bags', fr: 'sacs', de: 'taschen', es: 'bolsos', zh: '包', ar: 'حقائب', ja: 'バッグ' },
    foulard: { it: 'foulard', en: 'scarves', fr: 'foulards', de: 'schals', es: 'pañuelos', zh: '围巾', ar: 'أوشحة', ja: 'スカーフ' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'accessori')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '1rem',
        width: '100%',
        padding: '0.5rem',
        scrollSnapType: 'x mandatory'
      }}>
        {filtrati.map(prodotto => (
          <div key={prodotto.id} style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '0.65rem',
            textAlign: 'center',
            flex: '0 0 auto',
            width: '160px',
            scrollSnapAlign: 'start',
            position: 'relative'
          }}>
            {prodotto.quantita === 0 && (
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                color: 'red',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-12deg)',
                fontWeight: 'bold'
              }}>
                {t('venduto')}
              </div>
            )}
            <img
              src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
              alt={prodotto.nome}
              style={{
                width: '100%',
                height: 'auto',
                maxHeight: '80px',
                objectFit: 'contain',
                borderRadius: '4px',
                marginBottom: '0.3rem',
                cursor: 'pointer'
              }}
              onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
            />
            <strong>{prodotto.nome}</strong>
            <p>{prodotto.taglia}</p>
            <p style={{ fontFamily: 'Arial, sans-serif' }}>
              {'\u20AC'} {(Math.round(Number(prodotto.prezzo || 0) * 10) / 10).toFixed(1)}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
              <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

              <input
                type="text"
                value={quantita[prodotto.id] || 1}
                readOnly
                style={{
                  width: '1.8rem',
                  textAlign: 'center',
                  background: 'white',
                  color: 'black',
                  fontSize: '0.9rem',
                  border: '1px solid black',
                  borderRadius: '4px',
                  padding: '1px 3px'
                }}
              />

              <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
            </div>

            <button
              onClick={() => aggiungiAlCarrello(prodotto)}
              style={{
                padding: '0.2rem 0.4rem',
                fontSize: '0.6rem',
                backgroundColor: '#333',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        ))}
      </div>

      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}
          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}


----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page copy2.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ShoppingCart } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';

export default function AccessoriPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const formatEuro = (val) => {
    const value = Number(val || 0);
    return `€ ${value.toFixed(2)}`;
  };

  const traduzioni = {
    it: {
      titolo: 'GALLERIA ACCESSORI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l\'ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'ACCESSORY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    // ...altre lingue (fr, de, es, zh, ar, ja) se necessario
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    collane: { it: 'Collane', en: 'Necklaces' },
    orecchini: { it: 'Orecchini', en: 'Earrings' },
    bracciali: { it: 'Bracciali', en: 'Bracelets' },
    borse: { it: 'Borse', en: 'Bags' },
    foulard: { it: 'Foulard', en: 'Scarves' }
  };

  useEffect(() => {
    const carrelloSalvato = JSON.parse(localStorage.getItem('carrello') || '[]');
    setCarrello(carrelloSalvato);

    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'accessori')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1; });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem 1rem' }}>
      <h1 style={{ textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', margin: '1rem 0' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1rem'
      }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 100) / 100;
          return (
            <div key={prodotto.id} style={{ backgroundColor: 'white', color: 'black', padding: '0.5rem', borderRadius: '6px' }}>
              <img
                src={baseUrl + prodotto.immagine}
                alt={prodotto.nome}
                style={{ width: '100%', height: '200px', objectFit: 'cover' }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(prodotto.immagine);
                }}
              />
              <div style={{ textAlign: 'center', padding: '0.5rem 0' }}>
                <strong style={{
                  display: 'block',
                  fontSize: '0.9rem',
                  minHeight: '2.2em',
                  lineHeight: '1.1em'
                }}>
                  {prodotto.nome}
                </strong>
                <div style={{ fontSize: '0.8rem', color: '#555' }}>{prodotto.taglia}</div>
                <div style={{ fontSize: '0.85rem', fontFamily: 'Arial' }}>
                  {prodotto.offerta ? (
                    <>
                      <span style={{ textDecoration: 'line-through', color: 'gray' }}>
                        {formatEuro(prezzoNum)}
                      </span>
                      <span style={{ color: 'red', marginLeft: '4px' }}>
                        {formatEuro(prezzoScontato)} (-{scontoNum}%)
                      </span>
                    </>
                  ) : (
                    <>{formatEuro(prezzoNum)}</>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            zIndex: 1000
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              backgroundColor: 'white',
              color: 'black',
              maxWidth: '600px',
              width: '100%',
              padding: '1rem',
              borderRadius: '8px',
              textAlign: 'center'
            }}
          >
            <img
              src={baseUrl + immagineAttiva}
              alt="popup"
              style={{ width: '100%', borderRadius: '6px', marginBottom: '1rem' }}
            />
            <h2>{popupProdotto.nome}</h2>
            <p>{popupProdotto.descrizione}</p>
            <p>{popupProdotto.taglia}</p>
            <p style={{ fontWeight: 'bold' }}>
              {popupProdotto.offerta ? (
                <>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '8px' }}>
                    {formatEuro(popupProdotto.prezzo)}
                  </span>
                  <span style={{ color: 'red' }}>
                    {formatEuro(popupProdotto.prezzo * (1 - (popupProdotto.sconto || 0) / 100))}
                    {popupProdotto.sconto > 0 && (
                      <span style={{ fontSize: '0.9rem', marginLeft: '4px' }}>
                        (-{popupProdotto.sconto}%)
                      </span>
                    )}
                  </span>
                </>
              ) : (
                <>{formatEuro(popupProdotto.prezzo)}</>
              )}
            </p>
            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem' }}>
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)}>-</button>
              <input type="text" readOnly value={quantita[popupProdotto.id] || 1} style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)}>+</button>
            </div>
            <button
              onClick={() => {
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{ marginTop: '1rem', backgroundColor: '#333', color: 'white', padding: '0.5rem 1rem', border: 'none', borderRadius: '6px' }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ShoppingCart } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';

export default function AccessoriPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const formatEuro = (val) => {
    const value = Number(val || 0);
    return `€ ${value.toFixed(2)}`;
  };
  const traduzioni = {
    it: {
      titolo: 'GALLERIA ACCESSORI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l\'ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'ACCESSORY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE ACCESSOIRES',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'ACCESSOIRES GALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE ACCESORIOS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '配饰画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车',
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض الإكسسوارات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'アクセサリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    collane: { it: 'Collane', en: 'Necklaces', fr: 'Colliers', de: 'Ketten', es: 'Collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    orecchini: { it: 'Orecchini', en: 'Earrings', fr: 'Boucles d’oreilles', de: 'Ohrringe', es: 'Pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' },
    bracciali: { it: 'Bracciali', en: 'Bracelets', fr: 'Bracelets', de: 'Armbänder', es: 'Pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    borse: { it: 'Borse', en: 'Bags', fr: 'Sacs', de: 'Taschen', es: 'Bolsos', zh: '包', ar: 'حقائب', ja: 'バッグ' },
    foulard: { it: 'Foulard', en: 'Scarves', fr: 'Foulards', de: 'Schals', es: 'Pañuelos', zh: '围巾', ar: 'أوشحة', ja: 'スカーフ' }
  };
  useEffect(() => {
    const carrelloSalvato = JSON.parse(localStorage.getItem('carrello') || '[]');
    setCarrello(carrelloSalvato);

    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'accessori')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1; });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';
  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem 1rem', maxWidth: '100vw', overflowX: 'hidden', margin: '0 auto', position: 'relative' }}>
      {carrello.length > 0 && (
        <div
          onClick={() => router.push(`/checkout?lang=${lang}`)}
          style={{
            position: 'fixed',
            top: '0.5rem',
            left: '0.5rem',
            background: 'none',
            color: 'white',
            padding: '0.4rem 0.6rem',
            fontSize: '0.75rem',
            fontFamily: 'Michroma, sans-serif',
            zIndex: 10000,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '0.4rem',
            border: 'none',
            outline: 'none',
            boxShadow: 'none',
            WebkitBoxShadow: 'none',
            MozBoxShadow: 'none',
            borderRadius: 0
          }}
        >
          <ShoppingCart size={16} strokeWidth={1.5} color="white" />
          <span style={{ lineHeight: 1 }}>{t('checkout')}</span>
        </div>
      )}

      <h1 style={{
        fontSize: 'clamp(1.5rem, 5vw, 2rem)',
        textAlign: 'center',
        marginBottom: '2rem',
        wordBreak: 'break-word',
        overflowWrap: 'break-word'
      }}>
        {t('titolo')}
      </h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1.5rem'
      }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 100) / 100;
          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.75rem',
              textAlign: 'center',
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'space-between',
              height: '340px'
            }}>
              <img
                src={baseUrl + prodotto.immagine}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: '200px',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(prodotto.immagine);
                }}
              />
              <div style={{
                padding: '0.5rem 0',
                minHeight: '60px'
              }}>
                <strong style={{
                  display: 'block',
                  fontWeight: 'bold',
                  fontSize: '0.9rem',
                  marginBottom: '0.3rem',
                  minHeight: '2.2em',
                  lineHeight: '1.1em',
                  overflow: 'hidden'
                }}>
                  {prodotto.nome}
                </strong>
                <p style={{
                  fontSize: '0.8rem',
                  color: '#555',
                  marginBottom: '0.3rem'
                }}>{prodotto.taglia}</p>
                <p style={{ fontFamily: 'Arial' }}>
                  {prodotto.offerta ? (
                    <>
                      <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                        € {prezzoNum.toFixed(2)}
                      </span>
                      <span style={{ color: 'red', fontWeight: 'bold' }}>
                        € {prezzoScontato.toFixed(2)} (-{scontoNum}%)
                      </span>
                    </>
                  ) : (
                    <>€ {prezzoNum.toFixed(2)}</>
                  )}
                </p>
              </div>
            </div>
          );
        })}
      </div>
      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{
                width: '100%',
                height: 'auto',
                borderRadius: '6px',
                marginBottom: '1rem'
              }}
            />

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>

            <p style={{
              fontWeight: 'bold',
              fontSize: '1rem',
              margin: '1rem 0',
              fontFamily: 'Arial, sans-serif'
            }}>
              {popupProdotto.offerta ? (
                <>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '8px' }}>
                    € {Number(popupProdotto.prezzo).toFixed(2)}
                  </span>
                  <span style={{ color: 'red' }}>
                    € {(Number(popupProdotto.prezzo) * (1 - (popupProdotto.sconto || 0) / 100)).toFixed(2)}
                    {popupProdotto.sconto > 0 && (
                      <span style={{ fontSize: '0.9rem', marginLeft: '4px' }}>
                        (-{popupProdotto.sconto}%)
                      </span>
                    )}
                  </span>
                </>
              ) : (
                <>€ {Number(popupProdotto.prezzo).toFixed(2)}</>
              )}
            </p>
            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}>
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input
                type="text"
                value={quantita[popupProdotto.id] || 1}
                readOnly
                style={{ width: '2rem', textAlign: 'center' }}
              />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={(e) => {
                e.stopPropagation();
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}
      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy1.js -----
'use client';
import { useEffect, useState } from 'react';

export default function ClientiPage() {
  const [clienti, setClienti] = useState([]);

  useEffect(() => {
    fetch('/data/clienti.json')
      .then(res => res.json())
      .then(setClienti)
      .catch(err => console.error('Errore nel caricamento clienti:', err));
  }, []);

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>👥 Clienti Registrati</h1>

      {clienti.length === 0 ? (
        <p style={{ textAlign: 'center' }}>Nessun cliente registrato.</p>
      ) : (
        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.9rem' }}>
          <thead>
            <tr style={{ borderBottom: '1px solid #444' }}>
              <th style={{ padding: '0.5rem' }}>ID</th>
              <th style={{ padding: '0.5rem' }}>Nome</th>
              <th style={{ padding: '0.5rem' }}>Email</th>
              <th style={{ padding: '0.5rem' }}>Registrato il</th>
            </tr>
          </thead>
          <tbody>
            {clienti.map((cliente) => (
              <tr key={cliente.id} style={{ borderBottom: '1px solid #333' }}>
                <td style={{ padding: '0.5rem' }}>{cliente.id}</td>
                <td style={{ padding: '0.5rem' }}>{cliente.nome || '—'}</td>
                <td style={{ padding: '0.5rem' }}>{cliente.email}</td>
                <td style={{ padding: '0.5rem' }}>
                  {new Date(cliente.data_registrazione).toLocaleDateString('it-IT')}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy2.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { Download, Mail, MessageSquareText, Star } from 'lucide-react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export default function ClientiPage() {
  const [clienti, setClienti] = useState([]);

  useEffect(() => {
    async function fetchClienti() {
      const { data, error } = await supabase.from('clienti').select('*');
      if (!error) setClienti(data);
    }
    fetchClienti();
  }, []);

  const exportCSV = () => {
    const headers = ['Email', 'Nome', 'Cognome', 'Telefono1', 'Telefono2', 'Indirizzo', 'Città', 'Paese', 'Data Iscrizione', 'Totale Acquisti'];
    const rows = clienti.map(c => [
      c.email,
      c.nome,
      c.cognome,
      c.telefono1,
      c.telefono2,
      c.indirizzo,
      c.citta,
      c.paese,
      new Date(c.created_at).toLocaleDateString(),
      (c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0).toFixed(2) + ' €'
    ]);
    const csvContent = [headers, ...rows].map(r => r.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'clienti.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.autoTable({
      head: [['Email', 'Nome', 'Cognome', 'Telefono', 'Città', 'Paese', 'Totale €']],
      body: clienti.map(c => [
        c.email,
        c.nome,
        c.cognome,
        c.telefono1,
        c.citta,
        c.paese,
        (c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0).toFixed(2)
      ])
    });
    doc.save('clienti.pdf');
  };

  const inviaEmail = (email) => {
    window.location.href = `mailto:${email}`;
  };

  const inviaWhatsApp = (telefono) => {
    const numero = telefono.replace(/\D/g, '');
    window.open(`https://wa.me/${numero}`);
  };

  return (
    <div className="p-4 max-w-full overflow-x-auto">
      <h1 className="text-xl font-bold mb-4 text-center">Gestione Clienti</h1>

      <div className="flex gap-4 justify-center mb-4 flex-wrap">
        <button onClick={exportCSV} className="bg-blue-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> CSV</button>
        <button onClick={exportPDF} className="bg-red-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> PDF</button>
        <button onClick={() => alert('Funzione eventi/promozioni in sviluppo')} className="bg-yellow-500 text-white px-3 py-1 rounded flex items-center gap-2"><Star size={16}/> Eventi/Offerte</button>
      </div>

      <table className="min-w-full border text-sm">
        <thead className="bg-gray-200">
          <tr>
            <th className="border px-2">Nome</th>
            <th className="border px-2">Email</th>
            <th className="border px-2">Telefono</th>
            <th className="border px-2">Totale €</th>
            <th className="border px-2">Ordini</th>
            <th className="border px-2">Azioni</th>
          </tr>
        </thead>
        <tbody>
          {clienti.map((c, i) => (
            <tr key={i} className="text-xs">
              <td className="border px-2 whitespace-nowrap">{c.nome} {c.cognome}</td>
              <td className="border px-2 whitespace-nowrap">{c.email}</td>
              <td className="border px-2 whitespace-nowrap">{c.telefono1}</td>
              <td className="border px-2 whitespace-nowrap">{(c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0).toFixed(2)}</td>
              <td className="border px-2 whitespace-nowrap">
                <ul className="list-disc pl-4">
                  {(c.ordini || []).map((o, j) => <li key={j}>{o.prodotto} ({o.taglia}) - {o.prezzo} €<br/>{o.data || '-'}</li>)}
                </ul>
              </td>
              <td className="border px-2 text-center">
                <button onClick={() => inviaEmail(c.email)} className="text-blue-600 hover:underline mr-2"><Mail size={16}/></button>
                <button onClick={() => inviaWhatsApp(c.telefono1)} className="text-green-600 hover:underline"><MessageSquareText size={16}/></button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy3.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { Download, Mail, MessageSquareText, Star } from 'lucide-react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export default function ClientiPage() {
  const [clienti, setClienti] = useState([]);

  useEffect(() => {
    async function fetchClienti() {
      const { data, error } = await supabase.from('clienti').select('*');
      if (!error) setClienti(data);
    }
    fetchClienti();
  }, []);

  const exportCSV = () => {
    const headers = ['Email', 'Nome', 'Cognome', 'Telefono1', 'Telefono2', 'Indirizzo', 'Città', 'Paese', 'Data Iscrizione', 'Totale Acquisti'];
    const rows = clienti.map(c => [
      c.email,
      c.nome,
      c.cognome,
      c.telefono1,
      c.telefono2,
      c.indirizzo,
      c.citta,
      c.paese,
      new Date(c.created_at).toLocaleDateString(),
      '\u20AC ' + (Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)
    ]);
    const csvContent = [headers, ...rows].map(r => r.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'clienti.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.autoTable({
      head: [['Email', 'Nome', 'Cognome', 'Telefono', 'Città', 'Paese', 'Totale €']],
      body: clienti.map(c => [
        c.email,
        c.nome,
        c.cognome,
        c.telefono1,
        c.citta,
        c.paese,
        '\u20AC ' + (Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)
      ])
    });
    doc.save('clienti.pdf');
  };

  const inviaEmail = (email) => {
    window.location.href = `mailto:${email}`;
  };

  const inviaWhatsApp = (telefono) => {
    const numero = telefono.replace(/\D/g, '');
    window.open(`https://wa.me/${numero}`);
  };

  return (
    <div className="p-4 max-w-full overflow-x-auto">
      <h1 className="text-xl font-bold mb-4 text-center">Gestione Clienti</h1>

      <div className="flex gap-4 justify-center mb-4 flex-wrap">
        <button onClick={exportCSV} className="bg-blue-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> CSV</button>
        <button onClick={exportPDF} className="bg-red-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> PDF</button>
        <button onClick={() => alert('Funzione eventi/promozioni in sviluppo')} className="bg-yellow-500 text-white px-3 py-1 rounded flex items-center gap-2"><Star size={16}/> Eventi/Offerte</button>
      </div>

      <table className="min-w-full border text-sm">
        <thead className="bg-gray-200">
          <tr>
            <th className="border px-2">Nome</th>
            <th className="border px-2">Email</th>
            <th className="border px-2">Telefono</th>
            <th className="border px-2" style={{ fontFamily: 'Arial, sans-serif' }}>Totale {'\u20AC'}</th>
            <th className="border px-2">Ordini</th>
            <th className="border px-2">Azioni</th>
          </tr>
        </thead>
        <tbody>
          {clienti.map((c, i) => (
            <tr key={i} className="text-xs">
              <td className="border px-2 whitespace-nowrap">{c.nome} {c.cognome}</td>
              <td className="border px-2 whitespace-nowrap">{c.email}</td>
              <td className="border px-2 whitespace-nowrap">{c.telefono1}</td>
              <td className="border px-2 whitespace-nowrap" style={{ fontFamily: 'Arial, sans-serif' }}>
                {'\u20AC'} {(Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)}
              </td>
              <td className="border px-2 whitespace-nowrap">
                <ul className="list-disc pl-4">
                  {(c.ordini || []).map((o, j) => (
                    <li key={j}>
                      {o.prodotto} ({o.taglia}) - {'\u20AC'} {o.prezzo}<br />
                      {o.data || '-'}
                    </li>
                  ))}
                </ul>
              </td>
              <td className="border px-2 text-center">
                <button onClick={() => inviaEmail(c.email)} className="text-blue-600 hover:underline mr-2"><Mail size={16}/></button>
                <button onClick={() => inviaWhatsApp(c.telefono1)} className="text-green-600 hover:underline"><MessageSquareText size={16}/></button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy4.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { Download, Mail, MessageSquareText, Star } from 'lucide-react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export default function ClientiPage() {
  const [clienti, setClienti] = useState([]);
  const [selezionati, setSelezionati] = useState([]);
  const [selezionaTutti, setSelezionaTutti] = useState(false);

  useEffect(() => {
    async function fetchClienti() {
      const { data, error } = await supabase.from('clienti').select('*');
      if (!error) setClienti(data);
    }
    fetchClienti();
  }, []);

  const toggleSelezione = (email) => {
    setSelezionati(prev =>
      prev.includes(email)
        ? prev.filter(e => e !== email)
        : [...prev, email]
    );
  };

  const toggleSelezionaTutti = () => {
    if (selezionaTutti) {
      setSelezionati([]);
    } else {
      setSelezionati(clienti.map(c => c.email));
    }
    setSelezionaTutti(!selezionaTutti);
  };

  const exportCSV = () => {
    const headers = ['Email', 'Nome', 'Cognome', 'Telefono1', 'Telefono2', 'Indirizzo', 'Città', 'Paese', 'Data Iscrizione', 'Totale Acquisti'];
    const rows = clienti.map(c => [
      c.email,
      c.nome,
      c.cognome,
      c.telefono1,
      c.telefono2,
      c.indirizzo,
      c.citta,
      c.paese,
      new Date(c.created_at).toLocaleDateString(),
      '\u20AC ' + (Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)
    ]);
    const csvContent = [headers, ...rows].map(r => r.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'clienti.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.autoTable({
      head: [['Email', 'Nome', 'Cognome', 'Telefono', 'Città', 'Paese', 'Totale €']],
      body: clienti.map(c => [
        c.email,
        c.nome,
        c.cognome,
        c.telefono1,
        c.citta,
        c.paese,
        '\u20AC ' + (Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)
      ])
    });
    doc.save('clienti.pdf');
  };

  const inviaEmailMultipla = async () => {
    if (selezionati.length === 0) return alert("Nessun cliente selezionato");

    const res = await fetch('/api/email/send-offerte', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ destinatari: selezionati })
    });

    if (res.ok) {
      alert('Email inviate con successo!');
    } else {
      alert('Errore durante l\'invio delle email');
    }
  };

  const apriWhatsAppPerSelezionati = () => {
    clienti
      .filter(c => selezionati.includes(c.email))
      .forEach(c => {
        const numero = (c.telefono1 || '').replace(/\D/g, '');
        if (numero) {
          window.open(`https://wa.me/${numero}?text=Scopri%20le%20nuove%20offerte%20G-R%20Gabriella%20Romeo`, '_blank');
        }
      });
  };

  return (
    <div className="p-4 max-w-full overflow-x-auto">
      <h1 className="text-xl font-bold mb-4 text-center">Gestione Clienti</h1>

      <div className="flex gap-4 justify-center mb-4 flex-wrap">
        <button onClick={exportCSV} className="bg-blue-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> CSV</button>
        <button onClick={exportPDF} className="bg-red-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> PDF</button>
        <button onClick={inviaEmailMultipla} className="bg-green-600 text-white px-3 py-1 rounded flex items-center gap-2" disabled={selezionati.length === 0}><Mail size={16}/> Invia Email</button>
        <button onClick={apriWhatsAppPerSelezionati} className="bg-emerald-700 text-white px-3 py-1 rounded flex items-center gap-2" disabled={selezionati.length === 0}><MessageSquareText size={16}/> WhatsApp</button>
        <button onClick={() => alert('Funzione eventi/promozioni in sviluppo')} className="bg-yellow-500 text-white px-3 py-1 rounded flex items-center gap-2"><Star size={16}/> Eventi/Offerte</button>
      </div>

      <table className="min-w-full border text-sm">
        <thead className="bg-gray-200 text-black">
          <tr>
            <th className="border px-2"><input type="checkbox" checked={selezionaTutti} onChange={toggleSelezionaTutti} /></th>
            <th className="border px-2">Nome</th>
            <th className="border px-2">Email</th>
            <th className="border px-2">Telefono</th>
            <th className="border px-2">Totale €</th>
            <th className="border px-2">Ordini</th>
            <th className="border px-2">Azioni</th>
          </tr>
        </thead>
        <tbody>
          {clienti.map((c, i) => (
            <tr key={i} className="text-xs">
              <td className="border px-2 text-center">
                <input
                  type="checkbox"
                  checked={selezionati.includes(c.email)}
                  onChange={() => toggleSelezione(c.email)}
                />
              </td>
              <td className="border px-2 whitespace-nowrap">{c.nome} {c.cognome}</td>
              <td className="border px-2 whitespace-nowrap">{c.email}</td>
              <td className="border px-2 whitespace-nowrap">{c.telefono1}</td>
              <td className="border px-2 whitespace-nowrap">
                {'\u20AC'} {(Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)}
              </td>
              <td className="border px-2 whitespace-nowrap">
                <ul className="list-disc pl-4">
                  {(c.ordini || []).map((o, j) => (
                    <li key={j}>
                      {o.prodotto} ({o.taglia}) - {'\u20AC'} {o.prezzo}<br />
                      {o.data || '-'}
                    </li>
                  ))}
                </ul>
              </td>
              <td className="border px-2 text-center">
                <button onClick={() => window.location.href = `mailto:${c.email}`} className="text-blue-600 hover:underline mr-2"><Mail size={16}/></button>
                <button onClick={() => window.open(`https://wa.me/${(c.telefono1 || '').replace(/\D/g, '')}`, '_blank')} className="text-green-600 hover:underline"><MessageSquareText size={16}/></button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { Download, Mail, MessageSquareText, Star } from 'lucide-react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export default function ClientiPage() {
  const [clienti, setClienti] = useState([]);
  const [selezionati, setSelezionati] = useState([]);
  const [selezionaTutti, setSelezionaTutti] = useState(false);

  useEffect(() => {
    async function fetchClienti() {
      const { data, error } = await supabase.from('clienti').select('*');
      if (!error) setClienti(data);
    }
    fetchClienti();
  }, []);

  const toggleSelezione = (email) => {
    setSelezionati(prev =>
      prev.includes(email)
        ? prev.filter(e => e !== email)
        : [...prev, email]
    );
  };

  const toggleSelezionaTutti = () => {
    if (selezionaTutti) {
      setSelezionati([]);
    } else {
      setSelezionati(clienti.map(c => c.email));
    }
    setSelezionaTutti(!selezionaTutti);
  };

  const exportCSV = () => {
    const headers = ['Email', 'Nome', 'Cognome', 'Telefono1', 'Telefono2', 'Indirizzo', 'Città', 'Paese', 'Data Iscrizione', 'Totale Acquisti'];
    const rows = clienti.map(c => [
      c.email,
      c.nome,
      c.cognome,
      c.telefono1,
      c.telefono2,
      c.indirizzo,
      c.citta,
      c.paese,
      new Date(c.created_at).toLocaleDateString(),
      '\u20AC ' + (Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)
    ]);
    const csvContent = [headers, ...rows].map(r => r.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'clienti.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.autoTable({
      head: [['Email', 'Nome', 'Cognome', 'Telefono', 'Città', 'Paese', 'Totale €']],
      body: clienti.map(c => [
        c.email,
        c.nome,
        c.cognome,
        c.telefono1,
        c.citta,
        c.paese,
        '\u20AC ' + (Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)
      ])
    });
    doc.save('clienti.pdf');
  };

  const inviaEmailMultipla = async () => {
    if (selezionati.length === 0) return alert("Nessun cliente selezionato");

    const res = await fetch('/api/email/send-offerte', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ destinatari: selezionati })
    });

    if (res.ok) {
      alert('Email inviate con successo!');
    } else {
      alert('Errore durante l\'invio delle email');
    }
  };

  const apriWhatsAppPerSelezionati = () => {
    clienti
      .filter(c => selezionati.includes(c.email))
      .forEach(c => {
        const numero = (c.telefono1 || '').replace(/\D/g, '');
        if (numero) {
          window.open(`https://wa.me/${numero}?text=Scopri%20le%20nuove%20offerte%20G-R%20Gabriella%20Romeo`, '_blank');
        }
      });
  };

  return (
    <div className="p-4 max-w-full overflow-x-auto bg-black text-white">
      <h1 className="text-xl font-bold mb-4 text-center">Gestione Clienti</h1>

      <div className="flex gap-4 justify-center mb-4 flex-wrap">
        <button onClick={exportCSV} className="bg-blue-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> CSV</button>
        <button onClick={exportPDF} className="bg-red-500 text-white px-3 py-1 rounded flex items-center gap-2"><Download size={16}/> PDF</button>
        <button onClick={inviaEmailMultipla} className="bg-green-600 text-white px-3 py-1 rounded flex items-center gap-2" disabled={selezionati.length === 0}><Mail size={16}/> Invia Email</button>
        <button onClick={apriWhatsAppPerSelezionati} className="bg-emerald-700 text-white px-3 py-1 rounded flex items-center gap-2" disabled={selezionati.length === 0}><MessageSquareText size={16}/> WhatsApp</button>
        <button onClick={() => alert('Funzione eventi/promozioni in sviluppo')} className="bg-yellow-500 text-white px-3 py-1 rounded flex items-center gap-2"><Star size={16}/> Eventi/Offerte</button>
      </div>

      <table className="min-w-full border text-sm text-white">
        <thead className="bg-gray-700">
          <tr>
            <th className="border px-2 py-1"><input type="checkbox" checked={selezionaTutti} onChange={toggleSelezionaTutti} /></th>
            <th className="border px-2 py-1">Nome</th>
            <th className="border px-2 py-1">Email</th>
            <th className="border px-2 py-1">Telefono</th>
            <th className="border px-2 py-1">Totale €</th>
            <th className="border px-2 py-1">Ordini</th>
          </tr>
        </thead>
        <tbody>
          {clienti.map((c, i) => (
            <tr key={i} className="text-xs align-top">
              <td className="border px-2 py-1 text-center">
                <input
                  type="checkbox"
                  checked={selezionati.includes(c.email)}
                  onChange={() => toggleSelezione(c.email)}
                />
              </td>
              <td className="border px-2 py-1 whitespace-normal break-words">{c.nome} {c.cognome}</td>
              <td className="border px-2 py-1 whitespace-normal break-words">{c.email}</td>
              <td className="border px-2 py-1 whitespace-normal break-words">{c.telefono1}</td>
              <td className="border px-2 py-1 whitespace-nowrap text-right" style={{ fontFamily: 'Arial, sans-serif' }}>
                {'\u20AC'} {(Math.round((c.ordini || []).reduce((acc, o) => acc + (parseFloat(o.prezzo) || 0), 0) * 10) / 10).toFixed(1)}
              </td>
              <td className="border px-2 py-1 whitespace-normal break-words">
                <ul className="pl-3 list-disc">
                  {(c.ordini || [])
                    .filter(o => o.prodotto && parseFloat(o.prezzo) > 0)
                    .map((o, j) => (
                      <li key={j}>
                        {o.prodotto} {o.taglia ? `(${o.taglia})` : ''} – {'\u20AC'} {o.prezzo}<br />
                        {o.data ? new Date(o.data).toLocaleString() : '-'}
                      </li>
                    ))}
                </ul>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/[id]/page.tsx -----
'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';

interface Product {
  name: string;
  description: string;
  price: string;
  image: string;
  language: string;
}

export default function EditProductPage() {
  const router = useRouter();
  const params = useParams();
  const id = typeof params.id === 'string' ? params.id : Array.isArray(params.id) ? params.id[0] : '';

  const [product, setProduct] = useState<Product>({
    name: '',
    description: '',
    price: '',
    image: '',
    language: 'it'
  });

  useEffect(() => {
    if (!id) return;
    fetch(`/api/products/${id}`)
      .then(res => res.json())
      .then(data => setProduct(data))
      .catch(err => console.error('Errore nel recupero del prodotto:', err));
  }, [id]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setProduct(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const res = await fetch(`/api/products/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(product)
    });

    if (res.ok) {
      alert('Prodotto aggiornato con successo!');
      router.push('/admin');
    } else {
      alert("Errore durante l'aggiornamento.");
    }
  };

  return (
    <div className="min-h-screen bg-white py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-4xl font-bold text-center mb-8">Modifica Prodotto</h1>
        <form onSubmit={handleSubmit} className="grid grid-cols-1 gap-6 bg-gray-50 p-6 rounded-lg shadow-md border border-gray-200">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Nome</label>
            <input
              name="name"
              value={product.name}
              onChange={handleChange}
              placeholder="Nome"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-black focus:border-black"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Descrizione</label>
            <textarea
              name="description"
              value={product.description}
              onChange={handleChange}
              placeholder="Descrizione"
              rows={3}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-black focus:border-black"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Prezzo (€)</label>
            <input
              name="price"
              type="number"
              value={product.price}
              onChange={handleChange}
              placeholder="Prezzo"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-black focus:border-black"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">URL immagine</label>
            <input
              name="image"
              value={product.image}
              onChange={handleChange}
              placeholder="https://example.com/immagine.jpg"
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-black focus:border-black"
            />
            {product.image && (
              <div className="mt-4">
                <img
                  src={product.image}
                  alt="Anteprima immagine"
                  className="w-full h-auto max-h-64 object-contain rounded border"
                />
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Lingua</label>
            <select
              name="language"
              value={product.language}
              onChange={handleChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-black focus:border-black"
            >
              <option value="it">🇮🇹 Italiano</option>
              <option value="en">🇬🇧 English</option>
              <option value="fr">🇫🇷 Français</option>
            </select>
          </div>

          <button
            type="submit"
            className="w-full bg-black text-white font-semibold py-3 px-6 rounded-md hover:bg-gray-800 transition"
          >
            💾 Salva Modifiche
          </button>
        </form>
      </div>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/[id]/tsconfig.json -----
{
    "compilerOptions": {
      "target": "es5",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "forceConsistentCasingInFileNames": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "node",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "preserve",
      "incremental": true
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
    "exclude": ["node_modules"]
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/data/products.json -----

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/id/page.tsx -----
'use client';

import React, { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';

interface Product {
  name: string;
  description: string;
  price: string;
  image: string;
  language: string;
}

export default function EditProductPage() {
  const router = useRouter();
  const params = useParams();
  const id = typeof params.id === 'string' ? params.id : Array.isArray(params.id) ? params.id[0] : '';

  const [product, setProduct] = useState<Product>({
    name: '',
    description: '',
    price: '',
    image: '',
    language: 'it'
  });

  useEffect(() => {
    if (!id) return;
    fetch(`/api/products/${id}`)
      .then(res => res.json())
      .then(data => setProduct(data))
      .catch(err => console.error('Errore nel recupero del prodotto:', err));
  }, [id]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setProduct(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const res = await fetch(`/api/products/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(product)
    });

    if (res.ok) {
      alert('Prodotto aggiornato con successo!');
      router.push('/admin');
    } else {
      alert("Errore durante l'aggiornamento.");
    }
  };

  return (
    <div className="p-8 max-w-xl mx-auto">
      <h1 className="text-3xl font-bold mb-6 text-center">Modifica Prodotto</h1>
      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label className="block mb-1 font-semibold">Nome</label>
          <input
            name="name"
            value={product.name}
            onChange={handleChange}
            placeholder="Nome"
            className="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <div>
          <label className="block mb-1 font-semibold">Descrizione</label>
          <textarea
            name="description"
            value={product.description}
            onChange={handleChange}
            placeholder="Descrizione"
            className="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <div>
          <label className="block mb-1 font-semibold">Prezzo</label>
          <input
            name="price"
            type="number"
            value={product.price}
            onChange={handleChange}
            placeholder="Prezzo"
            className="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <div>
          <label className="block mb-1 font-semibold">URL immagine</label>
          <input
            name="image"
            value={product.image}
            onChange={handleChange}
            placeholder="https://example.com/immagine.jpg"
            className="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <div>
          <label className="block mb-1 font-semibold">Lingua</label>
          <select
            name="language"
            value={product.language}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded"
          >
            <option value="it">🇮🇹 Italiano</option>
            <option value="en">🇬🇧 English</option>
            <option value="fr">🇫🇷 Français</option>
          </select>
        </div>

        <button
          type="submit"
          className="w-full bg-black text-white font-semibold py-2 px-4 rounded hover:bg-gray-800 transition"
        >
          💾 Salva Modifiche
        </button>
      </form>
    </div>
  );
} // 👈 Questa è la graffa finale che mancava!

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy 2.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';

export default function MagazzinoPage() {
  const [prodotti, setProdotti] = useState([]);
  const [totale, setTotale] = useState(0);

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('categoria', { ascending: true });

      if (error) {
        console.error('Errore nel caricamento del magazzino:', error.message);
      } else {
        setProdotti(data);
        const somma = data.reduce((acc, item) => acc + Number(item.prezzo || 0), 0);
        setTotale(somma);
      }
    };

    fetchProdotti();
  }, []);

  const raggruppati = prodotti.reduce((acc, prodotto) => {
    const { categoria, sottocategoria } = prodotto;
    if (!acc[categoria]) acc[categoria] = {};
    if (!acc[categoria][sottocategoria]) acc[categoria][sottocategoria] = [];
    acc[categoria][sottocategoria].push(prodotto);
    return acc;
  }, {});

  const stampaPagina = () => window.print();

  return (
    <main style={{ padding: '1rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center', fontSize: '2rem', marginBottom: '1rem' }}>
        🧾 INVENTARIO / MAGAZZINO
      </h1>

      {Object.entries(raggruppati).map(([categoria, sottogruppi]) => (
        <section key={categoria} style={{ marginBottom: '2rem' }}>
          <h2 style={{ fontSize: '1.5rem', marginTop: '1rem', color: '#00ffff' }}>
            {categoria.toUpperCase()}
          </h2>

          {Object.entries(sottogruppi).map(([sottocategoria, items]) => (
            <div key={sottocategoria} style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
              <h3 style={{ fontSize: '1.2rem', color: '#ffd700' }}>{sottocategoria}</h3>
              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.85rem' }}>
                <thead>
                  <tr style={{ borderBottom: '1px solid white' }}>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Nome</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Descrizione</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Taglia</th>
                    <th style={{ textAlign: 'right', padding: '0.3rem' }}>Prezzo (€)</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((p) => (
                    <tr key={p.id} style={{ borderBottom: '1px dotted #666' }}>
                      <td style={{ padding: '0.3rem' }}>{p.nome}</td>
                      <td style={{ padding: '0.3rem' }}>{p.descrizione}</td>
                      <td style={{ padding: '0.3rem' }}>{p.taglia}</td>
                      <td style={{ textAlign: 'right', padding: '0.3rem' }}>
                        {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(Number(p.prezzo))}
                      </td>
                    </tr>
                  ))}
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      Subtotale
                    </td>
                    <td style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(
                        items.reduce((sum, i) => sum + Number(i.prezzo || 0), 0)
                      )}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          ))}
        </section>
      ))}

      <h2 style={{ textAlign: 'right', fontSize: '1.4rem', marginTop: '2rem', color: 'white' }}>
        Totale Magazzino: {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(totale)}
      </h2>

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={stampaPagina}
          style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.6rem 1.5rem',
            fontWeight: 'bold',
            borderRadius: '8px',
            fontSize: '1rem'
          }}
        >
          📄 Stampa Inventario
        </button>

        <div style={{ textAlign: 'center', marginTop: '1.5rem' }}>
          <a
            href="/admin"
            style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.6rem 1.5rem',
              fontWeight: 'bold',
              borderRadius: '8px',
              fontSize: '1rem',
              display: 'inline-block',
              textDecoration: 'none'
            }}
          >
            🔙 INDIETRO
          </a>
        </div>
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';

export default function MagazzinoPage() {
  const [prodotti, setProdotti] = useState([]);
  const [totale, setTotale] = useState(0);

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('categoria', { ascending: true });

      if (error) {
        console.error('Errore nel caricamento del magazzino:', error.message);
      } else {
        setProdotti(data);
        const somma = data.reduce((acc, item) => acc + Number(item.prezzo || 0), 0);
        setTotale(somma);
      }
    };

    fetchProdotti();
  }, []);

  const raggruppati = prodotti.reduce((acc, prodotto) => {
    const { categoria, sottocategoria } = prodotto;
    if (!acc[categoria]) acc[categoria] = {};
    if (!acc[categoria][sottocategoria]) acc[categoria][sottocategoria] = [];
    acc[categoria][sottocategoria].push(prodotto);
    return acc;
  }, {});

  const stampaPagina = () => window.print();

  const formatEuro = (val) =>
    '\u20AC ' + (Math.round(Number(val || 0) * 10) / 10).toFixed(1);

  return (
    <main style={{ padding: '1rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center', fontSize: '2rem', marginBottom: '1rem' }}>
        🧾 INVENTARIO / MAGAZZINO
      </h1>

      {Object.entries(raggruppati).map(([categoria, sottogruppi]) => (
        <section key={categoria} style={{ marginBottom: '2rem' }}>
          <h2 style={{ fontSize: '1.5rem', marginTop: '1rem', color: '#00ffff' }}>
            {categoria.toUpperCase()}
          </h2>

          {Object.entries(sottogruppi).map(([sottocategoria, items]) => (
            <div key={sottocategoria} style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
              <h3 style={{ fontSize: '1.2rem', color: '#ffd700' }}>{sottocategoria}</h3>
              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.85rem' }}>
                <thead>
                  <tr style={{ borderBottom: '1px solid white' }}>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Nome</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Descrizione</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Taglia</th>
                    <th style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>Prezzo €</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((p) => (
                    <tr key={p.id} style={{ borderBottom: '1px dotted #666' }}>
                      <td style={{ padding: '0.3rem' }}>{p.nome}</td>
                      <td style={{ padding: '0.3rem' }}>{p.descrizione}</td>
                      <td style={{ padding: '0.3rem' }}>{p.taglia}</td>
                      <td style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>
                        {formatEuro(p.prezzo)}
                      </td>
                    </tr>
                  ))}
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      Subtotale
                    </td>
                    <td style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem', fontFamily: 'Arial, sans-serif' }}>
                      {formatEuro(items.reduce((sum, i) => sum + Number(i.prezzo || 0), 0))}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          ))}
        </section>
      ))}

      <h2 style={{ textAlign: 'right', fontSize: '1.4rem', marginTop: '2rem', color: 'white', fontFamily: 'Arial, sans-serif' }}>
        Totale Magazzino: {formatEuro(totale)}
      </h2>

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={stampaPagina}
          style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.6rem 1.5rem',
            fontWeight: 'bold',
            borderRadius: '8px',
            fontSize: '1rem'
          }}
        >
          📄 Stampa Inventario
        </button>

        <div style={{ textAlign: 'center', marginTop: '1.5rem' }}>
          <a
            href="/admin"
            style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.6rem 1.5rem',
              fontWeight: 'bold',
              borderRadius: '8px',
              fontSize: '1rem',
              display: 'inline-block',
              textDecoration: 'none'
            }}
          >
            🔙 INDIETRO
          </a>
        </div>
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy1.js -----
'use client';

import { useEffect, useState } from 'react';

export default function MagazzinoPage() {
  const [prodotti, setProdotti] = useState([]);
  const [totale, setTotale] = useState(0);

  useEffect(() => {
    fetch('/data/products.json')
      .then(res => res.json())
      .then(data => {
        setProdotti(data);
        const somma = data.reduce((acc, item) => acc + Number(item.prezzo || 0), 0);
        setTotale(somma);
      })
      .catch(err => console.error('Errore nel caricamento del magazzino:', err));
  }, []);

  const raggruppati = prodotti.reduce((acc, prodotto) => {
    const { categoria, sottocategoria } = prodotto;
    if (!acc[categoria]) acc[categoria] = {};
    if (!acc[categoria][sottocategoria]) acc[categoria][sottocategoria] = [];
    acc[categoria][sottocategoria].push(prodotto);
    return acc;
  }, {});

  const stampaPagina = () => window.print();

  return (
    <main style={{ padding: '1rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center', fontSize: '2rem', marginBottom: '1rem' }}>
        🧾 INVENTARIO / MAGAZZINO
      </h1>

      {Object.entries(raggruppati).map(([categoria, sottogruppi]) => (
        <section key={categoria} style={{ marginBottom: '2rem' }}>
          <h2 style={{ fontSize: '1.5rem', marginTop: '1rem', color: '#00ffff' }}>
            {categoria.toUpperCase()}
          </h2>

          {Object.entries(sottogruppi).map(([sottocategoria, items]) => (
            <div key={sottocategoria} style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
              <h3 style={{ fontSize: '1.2rem', color: '#ffd700' }}>{sottocategoria}</h3>
              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.85rem' }}>
                <thead>
                  <tr style={{ borderBottom: '1px solid white' }}>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Nome</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Descrizione</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Taglia</th>
                    <th style={{ textAlign: 'right', padding: '0.3rem' }}>Prezzo (€)</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((p) => (
                    <tr key={p.id} style={{ borderBottom: '1px dotted #666' }}>
                      <td style={{ padding: '0.3rem' }}>{p.nome}</td>
                      <td style={{ padding: '0.3rem' }}>{p.descrizione}</td>
                      <td style={{ padding: '0.3rem' }}>{p.taglia}</td>
                      <td style={{ textAlign: 'right', padding: '0.3rem' }}>
                        {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(Number(p.prezzo))}
                      </td>
                    </tr>
                  ))}
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      Subtotale
                    </td>
                    <td style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(
                        items.reduce((sum, i) => sum + Number(i.prezzo || 0), 0)
                      )}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          ))}
        </section>
      ))}

      <h2 style={{ textAlign: 'right', fontSize: '1.4rem', marginTop: '2rem', color: 'white' }}>
        Totale Magazzino: {new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(totale)}
      </h2>

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={stampaPagina}
          style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.6rem 1.5rem',
            fontWeight: 'bold',
            borderRadius: '8px',
            fontSize: '1rem'
          }}
        >
          📄 Stampa Inventario
        </button>

        <div style={{ textAlign: 'center', marginTop: '1.5rem' }}>
          <a
            href="/admin"
            style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.6rem 1.5rem',
              fontWeight: 'bold',
              borderRadius: '8px',
              fontSize: '1rem',
              display: 'inline-block',
              textDecoration: 'none'
            }}
          >
            🔙 INDIETRO
          </a>
        </div>
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy3.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';

export default function MagazzinoPage() {
  const [prodotti, setProdotti] = useState([]);
  const [totale, setTotale] = useState(0);

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('categoria', { ascending: true });

      if (error) {
        console.error('Errore nel caricamento del magazzino:', error.message);
      } else {
        setProdotti(data);
        const somma = data.reduce((acc, item) => acc + Number(item.prezzo || 0), 0);
        setTotale(somma);
      }
    };

    fetchProdotti();
  }, []);

  const raggruppati = prodotti.reduce((acc, prodotto) => {
    const { categoria, sottocategoria } = prodotto;
    if (!acc[categoria]) acc[categoria] = {};
    if (!acc[categoria][sottocategoria]) acc[categoria][sottocategoria] = [];
    acc[categoria][sottocategoria].push(prodotto);
    return acc;
  }, {});

  const stampaPagina = () => window.print();

  const formatEuro = (val) =>
    '\u20AC ' + (Math.round(Number(val || 0) * 10) / 10).toFixed(1);

  return (
    <main style={{ padding: '1rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center', fontSize: '2rem', marginBottom: '1rem' }}>
        🧾 INVENTARIO / MAGAZZINO
      </h1>

      {Object.entries(raggruppati).map(([categoria, sottogruppi]) => (
        <section key={categoria} style={{ marginBottom: '2rem' }}>
          <h2 style={{ fontSize: '1.5rem', marginTop: '1rem', color: '#00ffff' }}>
            {categoria.toUpperCase()}
          </h2>

          {Object.entries(sottogruppi).map(([sottocategoria, items]) => (
            <div key={sottocategoria} style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
              <h3 style={{ fontSize: '1.2rem', color: '#ffd700' }}>{sottocategoria}</h3>
              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.85rem' }}>
                <thead>
                  <tr style={{ borderBottom: '1px solid white' }}>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Nome</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Descrizione</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Taglia</th>
                    <th style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>Prezzo €</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((p) => (
                    <tr key={p.id} style={{ borderBottom: '1px dotted #666' }}>
                      <td style={{ padding: '0.3rem' }}>{p.nome}</td>
                      <td style={{ padding: '0.3rem' }}>{p.descrizione}</td>
                      <td style={{ padding: '0.3rem' }}>{p.taglia}</td>
                      <td style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>
                        {formatEuro(p.prezzo)}
                      </td>
                    </tr>
                  ))}
                  <tr>
                    <td colSpan="3" style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      Subtotale
                    </td>
                    <td style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem', fontFamily: 'Arial, sans-serif' }}>
                      {formatEuro(items.reduce((sum, i) => sum + Number(i.prezzo || 0), 0))}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          ))}
        </section>
      ))}

      <h2 style={{ textAlign: 'right', fontSize: '1.4rem', marginTop: '2rem', color: 'white', fontFamily: 'Arial, sans-serif' }}>
        Totale Magazzino: {formatEuro(totale)}
      </h2>

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={stampaPagina}
          style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.6rem 1.5rem',
            fontWeight: 'bold',
            borderRadius: '8px',
            fontSize: '1rem'
          }}
        >
          📄 Stampa Inventario
        </button>

        <div style={{ textAlign: 'center', marginTop: '1.5rem' }}>
          <a
            href="/admin"
            style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.6rem 1.5rem',
              fontWeight: 'bold',
              borderRadius: '8px',
              fontSize: '1rem',
              display: 'inline-block',
              textDecoration: 'none'
            }}
          >
            🔙 INDIETRO
          </a>
        </div>
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';

export default function MagazzinoPage() {
  const [prodotti, setProdotti] = useState([]);
  const [totaleMagazzino, setTotaleMagazzino] = useState(0);

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('categoria', { ascending: true });

      if (error) {
        console.error('Errore nel caricamento del magazzino:', error.message);
      } else {
        // Filtra solo i prodotti con quantità > 0
        const prodottiFiltrati = data.filter(item => item.quantita > 0);
        setProdotti(prodottiFiltrati);
        
        // Calcola il totale del magazzino come somma di (prezzo × quantità)
        const somma = prodottiFiltrati.reduce(
          (acc, item) => acc + (Number(item.prezzo || 0) * Number(item.quantita || 0)), 
          0
        );
        setTotaleMagazzino(somma);
      }
    };

    fetchProdotti();
  }, []);

  const raggruppati = prodotti.reduce((acc, prodotto) => {
    const { categoria, sottocategoria } = prodotto;
    if (!acc[categoria]) acc[categoria] = {};
    if (!acc[categoria][sottocategoria]) acc[categoria][sottocategoria] = [];
    acc[categoria][sottocategoria].push(prodotto);
    return acc;
  }, {});

  const stampaPagina = () => window.print();

  const formatEuro = (val) => {
    const value = Number(val || 0);
    // Formattazione come nel vecchio script (senza separatori migliaia)
    return `€ ${value.toFixed(2)}`;
  };

  return (
    <main style={{ padding: '1rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center', fontSize: '2rem', marginBottom: '1rem' }}>
        🧾 INVENTARIO / MAGAZZINO
      </h1>

      {Object.entries(raggruppati).map(([categoria, sottogruppi]) => (
        <section key={categoria} style={{ marginBottom: '2rem' }}>
          <h2 style={{ fontSize: '1.5rem', marginTop: '1rem', color: '#00ffff' }}>
            {categoria.toUpperCase()}
          </h2>

          {Object.entries(sottogruppi).map(([sottocategoria, items]) => (
            <div key={sottocategoria} style={{ marginLeft: '1rem', marginTop: '0.5rem' }}>
              <h3 style={{ fontSize: '1.2rem', color: '#ffd700' }}>{sottocategoria}</h3>
              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.85rem' }}>
                <thead>
                  <tr style={{ borderBottom: '1px solid white' }}>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Nome</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Descrizione</th>
                    <th style={{ textAlign: 'left', padding: '0.3rem' }}>Taglia</th>
                    <th style={{ textAlign: 'center', padding: '0.3rem' }}>Q.tà</th>
                    <th style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>Prezzo Unit. €</th>
                    <th style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>Totale €</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((p) => {
                    const totaleProdotto = Number(p.prezzo) * Number(p.quantita);
                    return (
                      <tr key={p.id} style={{ borderBottom: '1px dotted #666' }}>
                        <td style={{ padding: '0.3rem' }}>{p.nome}</td>
                        <td style={{ padding: '0.3rem' }}>{p.descrizione}</td>
                        <td style={{ padding: '0.3rem' }}>{p.taglia}</td>
                        <td style={{ textAlign: 'center', padding: '0.3rem' }}>{p.quantita}</td>
                        <td style={{ textAlign: 'right', padding: '0.3rem', fontFamily: 'Arial, sans-serif' }}>
                          {formatEuro(p.prezzo)}
                        </td>
                        <td style={{ textAlign: 'right', padding: '0.3rem', fontWeight: 'bold', fontFamily: 'Arial, sans-serif' }}>
                          {formatEuro(totaleProdotto)}
                        </td>
                      </tr>
                    );
                  })}
                  <tr>
                    <td colSpan="5" style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem' }}>
                      Subtotale {sottocategoria}
                    </td>
                    <td style={{ textAlign: 'right', fontWeight: 'bold', paddingTop: '0.4rem', fontFamily: 'Arial, sans-serif' }}>
                      {formatEuro(items.reduce(
                        (sum, i) => sum + (Number(i.prezzo || 0) * Number(i.quantita || 0)), 
                        0
                      ))}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          ))}
        </section>
      ))}

      <h2 style={{ 
        textAlign: 'right', 
        fontSize: '1.4rem', 
        marginTop: '2rem', 
        color: 'white',
        borderTop: '2px solid #666',
        paddingTop: '1rem',
        fontFamily: 'Arial, sans-serif'
      }}>
        Valore Totale Magazzino: {formatEuro(totaleMagazzino)}
      </h2>

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={stampaPagina}
          style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.6rem 1.5rem',
            fontWeight: 'bold',
            borderRadius: '8px',
            fontSize: '1rem'
          }}
        >
          📄 Stampa Inventario
        </button>

        <div style={{ textAlign: 'center', marginTop: '1.5rem' }}>
          <a
            href="/admin"
            style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.6rem 1.5rem',
              fontWeight: 'bold',
              borderRadius: '8px',
              fontSize: '1rem',
              display: 'inline-block',
              textDecoration: 'none'
            }}
          >
            🔙 INDIETRO
          </a>
        </div>
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/login/page copy1.js -----
'use client';
import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function AdminLogin() {
  const router = useRouter();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [errore, setErrore] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();

    const userOk = username === 'administrator';
    const passOk = password === 'Gabriella';

    if (userOk && passOk) {
      localStorage.setItem('adminAuth', 'true');

      const logEntry = {
        user: username,
        tipo: 'login',
        data: new Date().toISOString(),
      };

      await fetch('/api/admin-log', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(logEntry)
      });

      router.push('/admin');
    } else {
      setErrore('Credenziali non valide');
    }
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
      <form onSubmit={handleLogin} style={{ display: 'flex', flexDirection: 'column', gap: '1rem', backgroundColor: '#222', padding: '2rem', borderRadius: '8px' }}>
        <h1>Login Amministratore</h1>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
          style={{ padding: '0.5rem' }}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
          style={{ padding: '0.5rem' }}
        />
        <button type="submit" style={{ padding: '0.5rem', backgroundColor: '#4caf50', color: 'white', cursor: 'pointer' }}>
          Accedi
        </button>
        {errore && <p style={{ color: 'red' }}>{errore}</p>}
      </form>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/login/page.js -----
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../../lib/supabaseClient';

export default function AdminLogin() {
  const router = useRouter();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [errore, setErrore] = useState('');
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [emailPass, setEmailPass] = useState('');

  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => {
      if (data?.user) setUtente(data.user);
    });
  }, []);

  const handleLogin = async (e) => {
    e.preventDefault();

    const userOk = username === 'administrator';
    const passOk = password === 'Gabriella';

    if (userOk && passOk) {
      localStorage.setItem('adminAuth', 'true');

      const logEntry = {
        user: username,
        tipo: 'login',
        data: new Date().toISOString(),
      };

      await fetch('/api/admin-log', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(logEntry)
      });

      router.push('/admin');
    } else {
      setErrore('Credenziali non valide');
    }
  };

  const loginConEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password: emailPass,
    });
    if (error) setErrore(error.message);
    else router.refresh();
  };

  const loginConGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
    });
    if (error) setErrore(error.message);
  };

  const loginConApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
    });
    if (error) setErrore(error.message);
  };

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    router.refresh();
  };

  return (
    <main style={{
      backgroundColor: 'black',
      color: 'white',
      height: '100vh',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }}>
      <form onSubmit={handleLogin} style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem',
        backgroundColor: '#222',
        padding: '2rem',
        borderRadius: '8px'
      }}>
        <h1>Login Amministratore</h1>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
          style={{ padding: '0.5rem' }}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
          style={{ padding: '0.5rem' }}
        />
        <button type="submit" style={{
          padding: '0.5rem',
          backgroundColor: '#4caf50',
          color: 'white',
          cursor: 'pointer'
        }}>
          Accedi
        </button>

        <hr style={{ marginTop: '1rem', marginBottom: '0.5rem' }} />

        <h3>Login Utente Registrato</h3>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          style={{ padding: '0.5rem' }}
        />
        <input
          type="password"
          placeholder="Password"
          value={emailPass}
          onChange={(e) => setEmailPass(e.target.value)}
          style={{ padding: '0.5rem' }}
        />
        <button type="button" onClick={loginConEmail} style={{
          padding: '0.5rem',
          backgroundColor: '#2196f3',
          color: 'white',
          cursor: 'pointer'
        }}>
          Login con Email
        </button>
        <button type="button" onClick={loginConGoogle} style={{
          padding: '0.5rem',
          backgroundColor: '#db4437',
          color: 'white',
          cursor: 'pointer'
        }}>
          Login con Google
        </button>
        <button type="button" onClick={loginConApple} style={{
          padding: '0.5rem',
          backgroundColor: '#333',
          color: 'white',
          cursor: 'pointer'
        }}>
          Login con Apple
        </button>

        {errore && <p style={{ color: 'red' }}>{errore}</p>}
        {utente && (
          <div>
            <p>Accesso come: {utente.email}</p>
            <button onClick={logout} style={{ marginTop: '1rem', backgroundColor: '#555', color: 'white', padding: '0.5rem' }}>
              Logout
            </button>
          </div>
        )}
      </form>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/offerte/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../../lib/supabaseClient';

export default function OffertePage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);

  const traduzioni = {
    it: { titolo: 'PRODOTTI IN OFFERTA', aggiungi: 'Aggiungi al carrello', inofferta: 'IN OFFERTA', rimuovi: 'Rimuovi', checkout: 'Check-out', indietro: 'Indietro', carrello: 'Carrello' },
    en: { titolo: 'DISCOUNTED PRODUCTS', aggiungi: 'Add to cart', inofferta: 'DISCOUNTED', rimuovi: 'Remove', checkout: 'Checkout', indietro: 'Back', carrello: 'Cart' },
    fr: { titolo: 'PRODUITS EN PROMOTION', aggiungi: 'Ajouter au panier', inofferta: 'EN PROMO', rimuovi: 'Supprimer', checkout: 'Passer à la caisse', indietro: 'Retour', carrello: 'Panier' },
    de: { titolo: 'ANGEBOTSARTIKEL', aggiungi: 'In den Warenkorb', inofferta: 'IM ANGEBOT', rimuovi: 'Entfernen', checkout: 'Zur Kasse', indietro: 'Zurück', carrello: 'Warenkorb' },
    es: { titolo: 'PRODUCTOS EN OFERTA', aggiungi: 'Agregar al carrito', inofferta: 'EN OFERTA', rimuovi: 'Eliminar', checkout: 'Finalizar compra', indietro: 'Atrás', carrello: 'Carrito' },
    zh: { titolo: '促销商品', aggiungi: '加入购物车', inofferta: '促销中', rimuovi: '移除', checkout: '结账', indietro: '返回', carrello: '购物车' },
    ar: { titolo: 'المنتجات المخفضة', aggiungi: 'أضف إلى السلة', inofferta: 'عرض خاص', rimuovi: 'إزالة', checkout: 'الدفع', indietro: 'رجوع', carrello: 'عربة التسوق' },
    ja: { titolo: 'セール商品', aggiungi: 'カートに追加', inofferta: 'セール中', rimuovi: '削除', checkout: 'チェックアウト', indietro: '戻る', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('offerta', true)
        .order('created_at', { ascending: false });

      if (!error && data) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '1rem',
        width: '100%',
        padding: '0.5rem',
        scrollSnapType: 'x mandatory'
      }}>
        {prodotti.map(prodotto => {
          const sconto = prodotto.sconto_offerta || 0;
          const prezzoFinale = (prodotto.prezzo * (1 - sconto / 100)).toFixed(2);

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.65rem',
              textAlign: 'center',
              flex: '0 0 auto',
              width: '160px',
              scrollSnapAlign: 'start',
              position: 'relative'
            }}>
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'rgba(255, 0, 0, 0.8)',
                color: 'white',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-12deg)',
                fontWeight: 'bold'
              }}>
                {t('inofferta')}
              </div>

              <img
                src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: 'auto',
                  maxHeight: '80px',
                  objectFit: 'contain',
                  borderRadius: '4px',
                  marginBottom: '0.3rem'
                }}
                onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              <p style={{ textDecoration: 'line-through', fontSize: '0.55rem' }}>
                € {(Number(prodotto.prezzo) || 0).toFixed(2)}
              </p>
              <p style={{ fontWeight: 'bold', color: 'green' }}>
                € {prezzoFinale}
              </p>

              <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
                <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                  style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

                <input
                  type="text"
                  value={quantita[prodotto.id] || 1}
                  readOnly
                  style={{
                    width: '1.8rem',
                    textAlign: 'center',
                    background: 'white',
                    color: 'black',
                    fontSize: '0.9rem',
                    border: '1px solid black',
                    borderRadius: '4px',
                    padding: '1px 3px'
                  }}
                />

                <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                  style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
              </div>

              <button
                onClick={() => aggiungiAlCarrello(prodotto)}
                style={{
                  padding: '0.2rem 0.4rem',
                  fontSize: '0.6rem',
                  backgroundColor: '#333',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                {t('aggiungi')}
              </button>
            </div>
          );
        })}
      </div>

      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}
          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy1.js -----
'use client';
import { useEffect, useState } from 'react';

export default function OrdiniPage() {
  const [ordini, setOrdini] = useState([]);

  useEffect(() => {
    fetch('/data/ordini.json')
      .then(res => res.json())
      .then(setOrdini)
      .catch(err => console.error('Errore nel caricamento ordini:', err));
  }, []);

  const marcaComeSpedito = async (id) => {
    const aggiornati = ordini.map(o => o.id === id ? { ...o, spedito: true } : o);
    setOrdini(aggiornati);

    await fetch('/api/save-ordini', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(aggiornati),
    });
  };

  const daSpedire = ordini.filter(o => !o.spedito);
  const spediti = ordini.filter(o => o.spedito);

  const renderOrdine = (o) => (
    <div key={o.id} style={{ backgroundColor: '#fff', color: '#000', padding: '1rem', marginBottom: '1rem', borderRadius: '8px' }}>
      <p><strong>Ordine:</strong> {o.numeroOrdine}</p>
      <p><strong>Data:</strong> {new Date(o.data).toLocaleDateString()}</p>
      <p><strong>Prodotti:</strong> {o.prodotti.map(p => `${p.nome} (${p.taglia}) x${p.quantità}`).join(', ')}</p>
      <p><strong>Acquirente:</strong> {o.nome}</p>
      <p><strong>Indirizzo:</strong> {`${o.indirizzo.via}, ${o.indirizzo.cap} ${o.indirizzo.città}, ${o.indirizzo.paese}`}</p>
      <p><strong>Spedizione:</strong> {o.spedizione.tipo} ({o.spedizione.costo} €)</p>
      <p><strong>Pagamento:</strong> {o.pagamento}</p>
      {!o.spedito && (
        <button onClick={() => marcaComeSpedito(o.id)} style={{ marginTop: '0.5rem', padding: '0.3rem 1rem', backgroundColor: 'green', color: 'white' }}>
          Marca come spedito
        </button>
      )}
    </div>
  );

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1>Ordini da spedire</h1>
      {daSpedire.length ? daSpedire.map(renderOrdine) : <p>Nessun ordine da spedire</p>}

      <h1 style={{ marginTop: '3rem' }}>Ordini spediti</h1>
      {spediti.length ? spediti.map(renderOrdine) : <p>Nessun ordine spedito</p>}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy2.js -----
'use client';
import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';

export default function OrdiniPage() {
  const [ordini, setOrdini] = useState([]);

  useEffect(() => {
    const fetchOrdini = async () => {
      const { data, error } = await supabase
        .from('ordini')
        .select('*')
        .order('data', { ascending: false });

      if (error) {
        console.error('Errore nel caricamento ordini:', error);
      } else {
        setOrdini(data);
      }
    };

    fetchOrdini();
  }, []);

  const marcaComeSpedito = async (id) => {
    const codiceTracking = prompt('Inserisci codice di spedizione (tracking number):');

    const { error } = await supabase
      .from('ordini')
      .update({ stato: 'spedito', tracking: codiceTracking || null })
      .eq('id', id);

    if (error) {
      alert('Errore nel salvataggio dello stato di spedizione');
      console.error(error);
      return;
    }

    const aggiornata = ordini.map(o =>
      o.id === id ? { ...o, stato: 'spedito', tracking: codiceTracking } : o
    );
    setOrdini(aggiornata);
  };

  const daSpedire = ordini.filter(o => o.stato !== 'spedito');
  const spediti = ordini.filter(o => o.stato === 'spedito');

  const renderOrdine = (o) => (
    <div key={o.id} style={{
      backgroundColor: '#fff',
      color: '#000',
      padding: '1rem',
      marginBottom: '1rem',
      borderRadius: '8px'
    }}>
      <p><strong>Ordine:</strong> {o.id}</p>
      <p><strong>Data:</strong> {new Date(o.data).toLocaleString()}</p>
      <p><strong>Prodotti:</strong></p>
      <ul>
        {o.carrello?.map((p, i) => (
          <li key={i}>{p.nome} ({p.taglia}) x{p.quantita}</li>
        ))}
      </ul>
      <p><strong>Acquirente:</strong> {o.cliente?.nome} {o.cliente?.cognome}</p>
      <p><strong>Email:</strong> {o.cliente?.email}</p>
      <p><strong>Indirizzo:</strong> {o.cliente?.indirizzo}, {o.cliente?.cap} {o.cliente?.citta}, {o.cliente?.paese}</p>
      <p><strong>Spedizione:</strong> {o.spedizione}</p>
      <p><strong>Pagamento:</strong> {o.pagamento}</p>
      {o.tracking && <p><strong>Tracking:</strong> {o.tracking}</p>}
      {o.stato !== 'spedito' && (
        <button
          onClick={() => marcaComeSpedito(o.id)}
          style={{
            marginTop: '0.5rem',
            padding: '0.3rem 1rem',
            backgroundColor: 'green',
            color: 'white',
            borderRadius: '5px'
          }}
        >
          Marca come spedito
        </button>
      )}
    </div>
  );

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1>📦 Ordini da spedire</h1>
      {daSpedire.length ? daSpedire.map(renderOrdine) : <p>Nessun ordine da spedire</p>}

      <h1 style={{ marginTop: '3rem' }}>📬 Ordini spediti</h1>
      {spediti.length ? spediti.map(renderOrdine) : <p>Nessun ordine spedito</p>}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy3.js -----
'use client';
import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';

export default function OrdiniPage() {
  const [ordini, setOrdini] = useState([]);

  useEffect(() => {
    const fetchOrdini = async () => {
      const { data, error } = await supabase
        .from('ordini')
        .select('*')
        .order('data', { ascending: false });

      if (error) {
        console.error('Errore nel caricamento ordini:', error);
      } else {
        setOrdini(data);
      }
    };

    fetchOrdini();
  }, []);

  const marcaComeSpedito = async (id) => {
    const codiceTracking = prompt('Inserisci codice di spedizione (tracking number):');

    const { error } = await supabase
      .from('ordini')
      .update({ stato: 'spedito', tracking: codiceTracking || null })
      .eq('id', id);

    if (error) {
      alert('Errore nel salvataggio dello stato di spedizione');
      console.error(error);
      return;
    }

    const aggiornata = ordini.map(o =>
      o.id === id ? { ...o, stato: 'spedito', tracking: codiceTracking } : o
    );
    setOrdini(aggiornata);
  };

  const daSpedire = ordini.filter(o =>
    o.stato !== 'spedito' &&
    o.spedizione?.toLowerCase() !== 'ritiro in negozio'
  );

  const spediti = ordini.filter(o =>
    o.stato === 'spedito' ||
    o.spedizione?.toLowerCase() === 'ritiro in negozio'
  );

  const renderOrdine = (o) => (
    <div key={o.id} style={{
      backgroundColor: '#fff',
      color: '#000',
      padding: '1rem',
      marginBottom: '1rem',
      borderRadius: '8px'
    }}>
      <p><strong>Ordine:</strong> {o.id}</p>
      <p><strong>Data:</strong> {new Date(o.data).toLocaleString()}</p>
      <p><strong>Prodotti:</strong></p>
      <ul>
        {o.carrello?.map((p, i) => (
          <li key={i}>{p.nome} ({p.taglia}) x{p.quantita}</li>
        ))}
      </ul>
      <p><strong>Acquirente:</strong> {o.cliente?.nome} {o.cliente?.cognome}</p>
      <p><strong>Email:</strong> {o.cliente?.email}</p>
      <p><strong>Indirizzo:</strong> {o.cliente?.indirizzo}, {o.cliente?.cap} {o.cliente?.citta}, {o.cliente?.paese}</p>
      <p><strong>Spedizione:</strong> {o.spedizione}</p>
      <p><strong>Pagamento:</strong> {o.pagamento}</p>
      {o.tracking && <p><strong>Tracking:</strong> {o.tracking}</p>}
      {o.stato !== 'spedito' && o.spedizione?.toLowerCase() !== 'ritiro in negozio' && (
        <button
          onClick={() => marcaComeSpedito(o.id)}
          style={{
            marginTop: '0.5rem',
            padding: '0.3rem 1rem',
            backgroundColor: 'green',
            color: 'white',
            borderRadius: '5px'
          }}
        >
          Marca come spedito
        </button>
      )}
    </div>
  );

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1>📦 Ordini da spedire</h1>
      {daSpedire.length ? daSpedire.map(renderOrdine) : <p>Nessun ordine da spedire</p>}

      <h1 style={{ marginTop: '3rem' }}>📬 Ordini spediti</h1>
      {spediti.length ? spediti.map(renderOrdine) : <p>Nessun ordine spedito</p>}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy4.js -----
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../../lib/supabaseClient';

export default function OrdiniPage() {
  const [ordini, setOrdini] = useState([]);
  const router = useRouter();

  useEffect(() => {
    const fetchOrdini = async () => {
      const { data, error } = await supabase
        .from('ordini')
        .select('*')
        .order('data', { ascending: false });

      console.log('📦 ORDINI RAW SUPABASE:', data);
      if (error) {
        console.error('Errore nel caricamento ordini:', error);
      } else {
        const parsed = data.map(o => ({
          ...o,
          cliente: typeof o.cliente === 'string' ? JSON.parse(o.cliente) : o.cliente,
          carrello: typeof o.carrello === 'string' ? JSON.parse(o.carrello) : o.carrello
        }));
        setOrdini(parsed);
      }
    };

    fetchOrdini();
  }, []);

  const marcaComeSpedito = async (id) => {
    const codiceTracking = prompt('Inserisci codice di spedizione (tracking number):');
    const { error } = await supabase
      .from('ordini')
      .update({ stato: 'spedito', tracking: codiceTracking || null })
      .eq('id', id);

    if (error) {
      alert('Errore nel salvataggio dello stato di spedizione');
      console.error(error);
      return;
    }

    const aggiornata = ordini.map(o =>
      o.id === id ? { ...o, stato: 'spedito', tracking: codiceTracking } : o
    );
    setOrdini(aggiornata);
  };

  const daSpedire = ordini.filter(o =>
    Array.isArray(o.carrello) &&
    o.stato !== 'spedito' &&
    o.spedizione?.toLowerCase() !== 'ritiro'
  );

  const spediti = ordini.filter(o =>
    Array.isArray(o.carrello) &&
    (o.stato === 'spedito' || o.spedizione?.toLowerCase() === 'ritiro')
  );

  const renderOrdine = (o) => (
    <div key={o.id} style={{
      backgroundColor: '#fff',
      color: '#000',
      padding: '1rem',
      marginBottom: '1rem',
      borderRadius: '8px'
    }}>
      <p><strong>Ordine:</strong> {o.id}</p>
      <p><strong>Data:</strong> {new Date(o.data).toLocaleString()}</p>
      <p><strong>Prodotti:</strong></p>
      <ul>
        {o.carrello?.map((p, i) => (
          <li key={i}>{p.nome} ({p.taglia}) x{p.quantita}</li>
        ))}
      </ul>
      <p><strong>Acquirente:</strong> {o.cliente?.nome} {o.cliente?.cognome}</p>
      <p><strong>Email:</strong> {o.cliente?.email}</p>
      <p><strong>Indirizzo:</strong> {o.cliente?.indirizzo}, {o.cliente?.cap} {o.cliente?.citta}, {o.cliente?.paese}</p>
      <p><strong>Spedizione:</strong> {o.spedizione}</p>
      <p><strong>Pagamento:</strong> {o.pagamento}</p>
      {o.tracking && <p><strong>Tracking:</strong> {o.tracking}</p>}
      {o.stato !== 'spedito' && o.spedizione?.toLowerCase() !== 'ritiro' && (
        <button
          onClick={() => marcaComeSpedito(o.id)}
          style={{
            marginTop: '0.5rem',
            padding: '0.3rem 1rem',
            backgroundColor: 'green',
            color: 'white',
            borderRadius: '5px'
          }}
        >
          Marca come spedito
        </button>
      )}
    </div>
  );

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <button
        onClick={() => router.push('/admin')}
        style={{
          marginBottom: '1.5rem',
          backgroundColor: '#333',
          color: 'white',
          borderRadius: '5px',
          padding: '0.5rem 1rem',
          cursor: 'pointer'
        }}
      >🔙 Indietro</button>

      <h1 style={{ fontSize: '2rem', marginBottom: '1rem' }}>📦 Ordini da spedire</h1>
      {daSpedire.length ? daSpedire.map(renderOrdine) : <p>Nessun ordine da spedire</p>}

      <h1 style={{ fontSize: '2rem', marginTop: '3rem', marginBottom: '1rem' }}>📬 Ordini spediti</h1>
      {spediti.length ? spediti.map(renderOrdine) : <p>Nessun ordine spedito</p>}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy5.js -----
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../../lib/supabaseClient';

export default function OrdiniPage() {
  const [ordini, setOrdini] = useState([]);
  const router = useRouter();

  useEffect(() => {
    const fetchOrdini = async () => {
      const { data, error } = await supabase
        .from('ordini')
        .select('*')
        .order('data', { ascending: false });

      console.log('📦 ORDINI RAW SUPABASE:', data);
      if (error) {
        console.error('Errore nel caricamento ordini:', error);
      } else {
        const parsed = data.map(o => ({
          ...o,
          cliente: typeof o.cliente === 'string' ? JSON.parse(o.cliente) : o.cliente,
          carrello: typeof o.carrello === 'string' ? JSON.parse(o.carrello) : o.carrello
        }));
        setOrdini(parsed);
      }
    };

    fetchOrdini();
  }, []);

  const marcaComeSpedito = async (id) => {
    const codiceTracking = prompt('Inserisci codice di spedizione (tracking number):');
    const { error } = await supabase
      .from('ordini')
      .update({ stato: 'spedito', tracking: codiceTracking || null })
      .eq('id', id);

    if (error) {
      alert('Errore nel salvataggio dello stato di spedizione');
      console.error(error);
      return;
    }

    const aggiornata = ordini.map(o =>
      o.id === id ? { ...o, stato: 'spedito', tracking: codiceTracking } : o
    );
    setOrdini(aggiornata);
  };

  const daSpedire = ordini.filter(o =>
    Array.isArray(o.carrello) &&
    o.stato !== 'spedito' &&
    o.spedizione?.toLowerCase() !== 'ritiro'
  );

  const spediti = ordini.filter(o =>
    Array.isArray(o.carrello) &&
    (o.stato === 'spedito' || o.spedizione?.toLowerCase() === 'ritiro')
  );

  const renderOrdine = (o) => (
    <div key={o.id} style={{
      backgroundColor: '#fff',
      color: '#000',
      padding: '0.6rem',
      borderRadius: '8px',
      fontSize: '0.75rem',
      lineHeight: '1.2',
      boxShadow: '0 0 4px rgba(255,255,255,0.1)',
      display: 'flex',
      flexDirection: 'column',
      gap: '0.3rem',
      minHeight: '180px',
      overflow: 'hidden'
    }}>
      <div><strong>Ordine:</strong> {o.id}</div>
      <div><strong>Data:</strong> {new Date(o.data).toLocaleDateString()}</div>
      <div><strong>Prodotti:</strong> {o.carrello?.map((p, i) => (
        <div key={i}>{p.nome} ({p.taglia}) x{p.quantita}</div>
      ))}</div>
      <div><strong>Dest:</strong> {o.cliente?.nome} {o.cliente?.cognome}</div>
      <div>{o.cliente?.email}</div>
      <div style={{ fontSize: '0.7rem' }}>{o.cliente?.citta}, {o.cliente?.paese}</div>
      <div><strong>Sped:</strong> {o.spedizione}</div>
      <div><strong>Pag:</strong> {o.pagamento}</div>
      {o.tracking && <div><strong>Track:</strong> {o.tracking}</div>}
      {o.stato !== 'spedito' && o.spedizione?.toLowerCase() !== 'ritiro' && (
        <button
          onClick={() => marcaComeSpedito(o.id)}
          style={{
            marginTop: '0.3rem',
            padding: '0.3rem 0.6rem',
            backgroundColor: 'green',
            color: 'white',
            borderRadius: '4px',
            fontSize: '0.7rem',
            alignSelf: 'flex-start'
          }}
        >
          ✅ Spedisci
        </button>
      )}
    </div>
  );

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <button
        onClick={() => router.push('/admin')}
        style={{
          marginBottom: '1.5rem',
          backgroundColor: '#333',
          color: 'white',
          borderRadius: '5px',
          padding: '0.5rem 1rem',
          cursor: 'pointer'
        }}
      >🔙 Indietro</button>

      <h1 style={{ fontSize: '1.8rem', marginBottom: '1rem' }}>📦 Ordini da spedire</h1>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
        gap: '0.8rem'
      }}>
        {daSpedire.length
          ? daSpedire.map(renderOrdine)
          : <p style={{ gridColumn: '1 / -1' }}>Nessun ordine da spedire</p>}
      </div>

      <h1 style={{ fontSize: '1.8rem', marginTop: '3rem', marginBottom: '1rem' }}>📬 Ordini spediti</h1>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
        gap: '0.8rem'
      }}>
        {spediti.length
          ? spediti.map(renderOrdine)
          : <p style={{ gridColumn: '1 / -1' }}>Nessun ordine spedito</p>}
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page.js -----
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../../lib/supabaseClient';

export default function OrdiniPage() {
  const [ordini, setOrdini] = useState([]);
  const router = useRouter();

  useEffect(() => {
    const fetchOrdini = async () => {
      const { data, error } = await supabase
        .from('ordini')
        .select('*')
        .order('data', { ascending: false });

      console.log('📦 ORDINI RAW SUPABASE:', data);
      if (error) {
        console.error('Errore nel caricamento ordini:', error);
      } else {
        const parsed = data.map(o => ({
          ...o,
          cliente: typeof o.cliente === 'string' ? JSON.parse(o.cliente) : o.cliente,
          carrello: typeof o.carrello === 'string' ? JSON.parse(o.carrello) : o.carrello
        }));
        setOrdini(parsed);
      }
    };

    fetchOrdini();
  }, []);

  const marcaComeSpedito = async (id) => {
    const codiceTracking = prompt('Inserisci codice di spedizione (tracking number):');
    const { error } = await supabase
      .from('ordini')
      .update({ stato: 'spedito', tracking: codiceTracking || null })
      .eq('id', id);

    if (error) {
      alert('Errore nel salvataggio dello stato di spedizione');
      console.error(error);
      return;
    }

    const aggiornata = ordini.map(o =>
      o.id === id ? { ...o, stato: 'spedito', tracking: codiceTracking } : o
    );
    setOrdini(aggiornata);
  };

  const daSpedire = ordini.filter(o =>
    Array.isArray(o.carrello) &&
    o.stato !== 'spedito' &&
    o.spedizione?.toLowerCase() !== 'ritiro'
  );

  const spediti = ordini.filter(o =>
    Array.isArray(o.carrello) &&
    (o.stato === 'spedito' || o.spedizione?.toLowerCase() === 'ritiro')
  );

  const renderOrdine = (o) => (
    <div key={o.id} style={{
      backgroundColor: '#fff',
      color: '#000',
      padding: '0.5rem',
      borderRadius: '8px',
      fontSize: '0.72rem',
      lineHeight: '1.2',
      boxShadow: '0 0 4px rgba(255,255,255,0.1)',
      display: 'inline-block',
      verticalAlign: 'top',
      maxWidth: '100%',
      boxSizing: 'border-box',
      wordBreak: 'break-word'
    }}>
      <div><strong>Ordine:</strong> {o.id}</div>
      <div><strong>Data:</strong> {new Date(o.data).toLocaleDateString()}</div>
      <div><strong>Prodotti:</strong> {o.carrello?.map((p, i) => (
        <div key={i}>{p.nome} ({p.taglia}) x{p.quantita}</div>
      ))}</div>
      <div><strong>Dest:</strong> {o.cliente?.nome} {o.cliente?.cognome}</div>
      <div>{o.cliente?.email}</div>
      <div style={{ fontSize: '0.68rem' }}>{o.cliente?.citta}, {o.cliente?.paese}</div>
      <div><strong>Sped:</strong> {o.spedizione}</div>
      <div><strong>Pag:</strong> {o.pagamento}</div>
      {o.tracking && <div><strong>Track:</strong> {o.tracking}</div>}
      {o.stato !== 'spedito' && o.spedizione?.toLowerCase() !== 'ritiro' && (
        <button
          onClick={() => marcaComeSpedito(o.id)}
          style={{
            marginTop: '0.3rem',
            padding: '0.3rem 0.6rem',
            backgroundColor: 'green',
            color: 'white',
            borderRadius: '4px',
            fontSize: '0.7rem',
            cursor: 'pointer'
          }}
        >
          ✅ Spedisci
        </button>
      )}
    </div>
  );

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <button
        onClick={() => router.push('/admin')}
        style={{
          marginBottom: '1.5rem',
          backgroundColor: '#333',
          color: 'white',
          borderRadius: '5px',
          padding: '0.5rem 1rem',
          cursor: 'pointer'
        }}
      >🔙 Indietro</button>

      <h1 style={{ fontSize: '1.8rem', marginBottom: '1rem' }}>📦 Ordini da spedire</h1>
      <div style={{
        display: 'flex',
        flexWrap: 'wrap',
        gap: '0.7rem',
        justifyContent: 'flex-start'
      }}>
        {daSpedire.length
          ? daSpedire.map(renderOrdine)
          : <p style={{ width: '100%' }}>Nessun ordine da spedire</p>}
      </div>

      <h1 style={{ fontSize: '1.8rem', marginTop: '3rem', marginBottom: '1rem' }}>📬 Ordini spediti</h1>
      <div style={{
        display: 'flex',
        flexWrap: 'wrap',
        gap: '0.7rem',
        justifyContent: 'flex-start'
      }}>
        {spediti.length
          ? spediti.map(renderOrdine)
          : <p style={{ width: '100%' }}>Nessun ordine spedito</p>}
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy1.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
    if (name === 'categoria') setCategoriaSelezionata(value);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoFormattato = form.prezzo && !isNaN(Number(form.prezzo))
      ? Number(form.prezzo)
      : 0;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFormattato,
      immagine: nomeFileSelezionato,
      disponibile: true,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '' });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo (€)" value={form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          💾 <span className="uppercase text-sm">Salva</span>
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem'
                }}>
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p>
                    {item.prezzo !== undefined && !isNaN(Number(item.prezzo))
                      ? new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(Number(item.prezzo))
                      : ''}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy10.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const prodottoData = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita) || 0,
      immagine: nomeFileSelezionato || form.immagine,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      updated_at: new Date().toISOString()
    };

    try {
      let res;
      if (modificaId) {
        // MODIFICA PRODOTTO ESISTENTE
        res = await fetch(`/api/products/${modificaId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(prodottoData)
        });
      } else {
        // CREA NUOVO PRODOTTO
        res = await fetch('/api/save-product', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...prodottoData,
            created_at: new Date().toISOString()
          })
        });
      }

      const result = await res.json();

      if (res.ok) {
        alert(result.message || (modificaId ? '✅ Prodotto aggiornato!' : '✅ Prodotto salvato!'));
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        // Ricarica i prodotti
        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem' }}>
          <label>
            <input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} />
            {' '}Prodotto in Offerta
          </label>
          <label>
            <input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} />
            {' '}Manda email a tutti i clienti
          </label>
          {form.offerta && (
            <input
              type="number"
              name="sconto"
              min="0"
              max="100"
              placeholder="Sconto %"
              value={form.sconto}
              onChange={handleInputChange}
              style={{ color: 'black', width: '100%' }}
            />
          )}
        </div>

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          {modificaId ? '🔄 Aggiorna' : '💾 Salva'}
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem',
                  position: 'relative'
                }}>
                  {item.offerta && (
                    <div style={{
                      position: 'absolute',
                      top: '-6px',
                      left: '-4px',
                      backgroundColor: 'red',
                      color: 'white',
                      padding: '0.1rem 0.2rem',
                      borderRadius: '4px',
                      fontSize: '0.5rem'
                    }}>✨ OFFERTA</div>
                  )}
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p style={{ fontFamily: 'Arial, sans-serif' }}>
                    {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                  </p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy2.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0, // quantità iniziale a 0
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
    if (name === 'categoria') setCategoriaSelezionata(value);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoFormattato = form.prezzo && !isNaN(Number(form.prezzo))
      ? Number(form.prezzo)
      : 0;

    const quantitaFormattata = form.quantita && !isNaN(Number(form.quantita))
      ? Number(form.quantita)
      : 0;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFormattato,
      quantita: quantitaFormattata,
      immagine: nomeFileSelezionato,
      disponibile: true,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo (€)" value={form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          💾 <span className="uppercase text-sm">Salva</span>
        </button>
      </form>

      {/* Pulsanti gestione */}
      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {/* Galleria prodotti */}
      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem'
                }}>
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p>
                    {item.prezzo !== undefined && !isNaN(Number(item.prezzo))
                      ? new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(Number(item.prezzo))
                      : ''}
                  </p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy3.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
    if (name === 'categoria') setCategoriaSelezionata(value);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoFormattato = form.prezzo && !isNaN(Number(form.prezzo))
      ? Number(form.prezzo)
      : 0;

    const quantitaFormattata = form.quantita && !isNaN(Number(form.quantita))
      ? Number(form.quantita)
      : 0;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFormattato,
      quantita: quantitaFormattata,
      immagine: nomeFileSelezionato,
      disponibile: true,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo (€)" value={form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          💾 <span className="uppercase text-sm">Salva</span>
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem'
                }}>
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p style={{ fontFamily: 'Arial, sans-serif' }}>
                    {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                  </p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy4.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
    if (name === 'categoria') setCategoriaSelezionata(value);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoFormattato = form.prezzo && !isNaN(Number(form.prezzo))
      ? Number(form.prezzo)
      : 0;

    const quantitaFormattata = form.quantita && !isNaN(Number(form.quantita))
      ? Number(form.quantita)
      : 0;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFormattato,
      quantita: quantitaFormattata,
      immagine: nomeFileSelezionato,
      disponibile: true,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };
  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange}required style={{ color: 'black' }}
/>

        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          💾 <span className="uppercase text-sm">Salva</span>
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem'
                }}>
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p style={{ fontFamily: 'Arial, sans-serif' }}>
                    {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                  </p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy5.js -----

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

// [BLOCCO 2 - SOTTOCATEGORIE + useEffect]
  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

// [BLOCCO 3 - GESTIONE CAMPI]

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

// [BLOCCO 4 - UPLOAD IMMAGINE]

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

// [BLOCCO 5 - SUBMIT CON SCONTO]

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita) || 0,
      immagine: nomeFileSelezionato,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

// [BLOCCO 6 - EDIT & DELETE RESTANO UGUALI]

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

// [BLOCCO 7 - STILE E RENDERING — segue nel prossimo blocco 👇]
const selectStyle = {
  backgroundColor: 'transparent',
  color: 'white',
  border: '2px solid white',
  borderRadius: '10px',
  padding: '0.5rem 1rem',
  fontSize: '0.9rem',
  textAlign: 'center',
  appearance: 'none',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
};

const buttonStyle = {
  backgroundColor: 'white',
  color: 'black',
  padding: '0.5rem 1rem',
  borderRadius: '6px',
  fontWeight: 'bold',
  fontSize: '0.85rem'
};

return (
  <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
    <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
      <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
        <option value="">Seleziona Categoria</option>
        <option value="gioielli">Gioielleria</option>
        <option value="abbigliamento">Abbigliamento</option>
        <option value="accessori">Accessori</option>
      </select>

      {categoriaSelezionata && (
        <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Sottocategoria</option>
          {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
            <option key={i} value={sotto}>{sotto}</option>
          ))}
        </select>
      )}

      <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
      <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

      {/* NOVITÀ: Offerta + Email + Sconto */}
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem' }}>
        <label>
          <input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} />
          {' '}Prodotto in Offerta
        </label>
        <label>
          <input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} />
          {' '}Manda email a tutti i clienti
        </label>
        {form.offerta && (
          <input
            type="number"
            name="sconto"
            min="0"
            max="100"
            placeholder="Sconto %"
            value={form.sconto}
            onChange={handleInputChange}
            style={{ color: 'black', width: '100%' }}
          />
        )}
      </div>

      <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
        Carica immagine
        <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
      </label>
      <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

      <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
        💾 <span className="uppercase text-sm">Salva</span>
      </button>
    </form>

    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
      <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
      <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
      <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
      <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
      <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
    </div>

    {categoriaSelezionata && (
      <>
        <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
          gap: '0.5rem',
          marginTop: '1rem',
          maxHeight: '400px',
          overflowY: 'auto',
          padding: '1rem',
          backgroundColor: '#1a1a1a',
          borderRadius: '10px'
        }}>
          {prodottiFiltrati
            .filter(p => p.categoria === categoriaSelezionata)
            .map((item) => (
              <div key={item.id} style={{
                backgroundColor: 'white',
                color: 'black',
                padding: '0.3rem',
                borderRadius: '6px',
                width: '80px',
                textAlign: 'center',
                fontSize: '0.55rem',
                position: 'relative'
              }}>
                {item.offerta && (
                  <div style={{
                    position: 'absolute',
                    top: '-6px',
                    left: '-4px',
                    backgroundColor: 'red',
                    color: 'white',
                    padding: '0.1rem 0.2rem',
                    borderRadius: '4px',
                    fontSize: '0.5rem'
                  }}>✨ OFFERTA</div>
                )}
                <img
                  src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                  alt={item.nome}
                  style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                />
                <strong>{item.nome}</strong>
                <p>{item.taglia}</p>
                <p style={{ fontFamily: 'Arial, sans-serif' }}>
                  {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                </p>
                <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                  {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                </p>
                <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                  <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                  <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                </div>
              </div>
            ))}
        </div>
      </>
    )}
  </main>
);
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy6.js -----

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

// [BLOCCO 2 - SOTTOCATEGORIE + useEffect]
  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

// [BLOCCO 3 - GESTIONE CAMPI]

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

// [BLOCCO 4 - UPLOAD IMMAGINE]

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

// [BLOCCO 5 - SUBMIT CON SCONTO]

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita) || 0,
      immagine: nomeFileSelezionato,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

// [BLOCCO 6 - EDIT & DELETE RESTANO UGUALI]

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

// [BLOCCO 7 - STILE E RENDERING — segue nel prossimo blocco 👇]
const selectStyle = {
  backgroundColor: 'transparent',
  color: 'white',
  border: '2px solid white',
  borderRadius: '10px',
  padding: '0.5rem 1rem',
  fontSize: '0.9rem',
  textAlign: 'center',
  appearance: 'none',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
};

const buttonStyle = {
  backgroundColor: 'white',
  color: 'black',
  padding: '0.5rem 1rem',
  borderRadius: '6px',
  fontWeight: 'bold',
  fontSize: '0.85rem'
};

return (
  <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
    <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
      <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
        <option value="">Seleziona Categoria</option>
        <option value="gioielli">Gioielleria</option>
        <option value="abbigliamento">Abbigliamento</option>
        <option value="accessori">Accessori</option>
      </select>

      {categoriaSelezionata && (
        <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Sottocategoria</option>
          {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
            <option key={i} value={sotto}>{sotto}</option>
          ))}
        </select>
      )}

      <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
      <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

      {/* NOVITÀ: Offerta + Email + Sconto */}
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem' }}>
        <label>
          <input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} />
          {' '}Prodotto in Offerta
        </label>
        <label>
          <input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} />
          {' '}Manda email a tutti i clienti
        </label>
        {form.offerta && (
          <input
            type="number"
            name="sconto"
            min="0"
            max="100"
            placeholder="Sconto %"
            value={form.sconto}
            onChange={handleInputChange}
            style={{ color: 'black', width: '100%' }}
          />
        )}
      </div>

      <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
        Carica immagine
        <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
      </label>
      <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

      <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
        💾 <span className="uppercase text-sm">Salva</span>
      </button>
    </form>

    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
      <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
      <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
      <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
      <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
      <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
    </div>

    {categoriaSelezionata && (
      <>
        <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
          gap: '0.5rem',
          marginTop: '1rem',
          maxHeight: '400px',
          overflowY: 'auto',
          padding: '1rem',
          backgroundColor: '#1a1a1a',
          borderRadius: '10px'
        }}>
          {prodottiFiltrati
            .filter(p => p.categoria === categoriaSelezionata)
            .map((item) => (
              <div key={item.id} style={{
                backgroundColor: 'white',
                color: 'black',
                padding: '0.3rem',
                borderRadius: '6px',
                width: '80px',
                textAlign: 'center',
                fontSize: '0.55rem',
                position: 'relative'
              }}>
                {item.offerta && (
                  <div style={{
                    position: 'absolute',
                    top: '-6px',
                    left: '-4px',
                    backgroundColor: 'red',
                    color: 'white',
                    padding: '0.1rem 0.2rem',
                    borderRadius: '4px',
                    fontSize: '0.5rem'
                  }}>✨ OFFERTA</div>
                )}
                <img
                  src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                  alt={item.nome}
                  style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                />
                <strong>{item.nome}</strong>
                <p>{item.taglia}</p>
                <p style={{ fontFamily: 'Arial, sans-serif' }}>
                  {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                </p>
                <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                  {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                </p>
                <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                  <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                  <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                </div>
              </div>
            ))}
        </div>
      </>
    )}
  </main>
);
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy7.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (!error) setProdottiFiltrati(data);
    };

    fetchProdotti();
  }, []);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();
      if (res.ok) setNomeFileSelezionato(result.fileName);
      else alert('Errore upload immagine: ' + result.error);
    } catch (err) {
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita),
      immagine: nomeFileSelezionato,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      updated_at: new Date().toISOString()
    };

    const { data, error } = modificaId
      ? await supabase.from('products').update(nuovoProdotto).eq('id', modificaId)
      : await supabase.from('products').insert({ ...nuovoProdotto, created_at: new Date().toISOString() });

    if (error) {
      alert('❌ Errore: ' + error.message);
    } else {
      alert('✅ Prodotto salvato!');
      setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
      setNomeFileSelezionato('');
      setCategoriaSelezionata('');
      setModificaId(null);

      const { data: refresh, error: refreshErr } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });
      if (!refreshErr) setProdottiFiltrati(refresh);
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    const { error } = await supabase.from('products').delete().eq('id', id);
    if (!error) {
      setProdottiFiltrati((prev) => prev.filter((p) => p.id !== id));
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((s, i) => (
              <option key={i} value={s}>{s}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo (€)" value={form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem' }}>
          <label><input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} /> Prodotto in Offerta</label>
          <label><input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} /> Manda email a tutti i clienti</label>
          {form.offerta && (
            <input
              type="number"
              name="sconto"
              min="0"
              max="100"
              placeholder="Sconto %"
              value={form.sconto}
              onChange={handleInputChange}
              style={{ color: 'black', width: '100%' }}
            />
          )}
        </div>

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          💾 <span className="uppercase text-sm">Salva</span>
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map(item => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem',
                  position: 'relative'
                }}>
                  {item.offerta && (
                    <div style={{
                      position: 'absolute',
                      top: '-6px',
                      left: '-4px',
                      backgroundColor: 'red',
                      color: 'white',
                      padding: '0.1rem 0.2rem',
                      borderRadius: '4px',
                      fontSize: '0.5rem'
                    }}>
                      ✨ OFFERTA -{item.sconto}%
                    </div>
                  )}
                  <img src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`} alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }} />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p style={{ fontFamily: 'Arial, sans-serif' }}>{'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}</p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy8.js -----

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

// [BLOCCO 2 - SOTTOCATEGORIE + useEffect]
  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

// [BLOCCO 3 - GESTIONE CAMPI]

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

// [BLOCCO 4 - UPLOAD IMMAGINE]

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

// [BLOCCO 5 - SUBMIT CON SCONTO]

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const nuovoProdotto = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita) || 0,
      immagine: nomeFileSelezionato,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      created_at: new Date().toISOString()
    };

    try {
      const res = await fetch('/api/save-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nuovoProdotto)
      });

      const result = await res.json();

      if (res.ok) {
        alert(result.message || '✅ Prodotto salvato!');
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

// [BLOCCO 6 - EDIT & DELETE RESTANO UGUALI]

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

// [BLOCCO 7 - STILE E RENDERING — segue nel prossimo blocco 👇]
const selectStyle = {
  backgroundColor: 'transparent',
  color: 'white',
  border: '2px solid white',
  borderRadius: '10px',
  padding: '0.5rem 1rem',
  fontSize: '0.9rem',
  textAlign: 'center',
  appearance: 'none',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
};

const buttonStyle = {
  backgroundColor: 'white',
  color: 'black',
  padding: '0.5rem 1rem',
  borderRadius: '6px',
  fontWeight: 'bold',
  fontSize: '0.85rem'
};

return (
  <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
    <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

    <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
      <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
        <option value="">Seleziona Categoria</option>
        <option value="gioielli">Gioielleria</option>
        <option value="abbigliamento">Abbigliamento</option>
        <option value="accessori">Accessori</option>
      </select>

      {categoriaSelezionata && (
        <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Sottocategoria</option>
          {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
            <option key={i} value={sotto}>{sotto}</option>
          ))}
        </select>
      )}

      <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
      <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
      <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

      {/* NOVITÀ: Offerta + Email + Sconto */}
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem' }}>
        <label>
          <input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} />
          {' '}Prodotto in Offerta
        </label>
        <label>
          <input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} />
          {' '}Manda email a tutti i clienti
        </label>
        {form.offerta && (
          <input
            type="number"
            name="sconto"
            min="0"
            max="100"
            placeholder="Sconto %"
            value={form.sconto}
            onChange={handleInputChange}
            style={{ color: 'black', width: '100%' }}
          />
        )}
      </div>

      <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
        Carica immagine
        <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
      </label>
      <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

      <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
        💾 <span className="uppercase text-sm">Salva</span>
      </button>
    </form>

    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
      <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
      <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
      <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
      <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
      <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
    </div>

    {categoriaSelezionata && (
      <>
        <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
          gap: '0.5rem',
          marginTop: '1rem',
          maxHeight: '400px',
          overflowY: 'auto',
          padding: '1rem',
          backgroundColor: '#1a1a1a',
          borderRadius: '10px'
        }}>
          {prodottiFiltrati
            .filter(p => p.categoria === categoriaSelezionata)
            .map((item) => (
              <div key={item.id} style={{
                backgroundColor: 'white',
                color: 'black',
                padding: '0.3rem',
                borderRadius: '6px',
                width: '80px',
                textAlign: 'center',
                fontSize: '0.55rem',
                position: 'relative'
              }}>
                {item.offerta && (
                  <div style={{
                    position: 'absolute',
                    top: '-6px',
                    left: '-4px',
                    backgroundColor: 'red',
                    color: 'white',
                    padding: '0.1rem 0.2rem',
                    borderRadius: '4px',
                    fontSize: '0.5rem'
                  }}>✨ OFFERTA</div>
                )}
                <img
                  src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                  alt={item.nome}
                  style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                />
                <strong>{item.nome}</strong>
                <p>{item.taglia}</p>
                <p style={{ fontFamily: 'Arial, sans-serif' }}>
                  {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                </p>
                <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                  {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                </p>
                <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                  <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                  <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                </div>
              </div>
            ))}
        </div>
      </>
    )}
  </main>
);
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy9.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, []);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const prodottoData = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita) || 0,
      immagine: nomeFileSelezionato || form.immagine,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      updated_at: new Date().toISOString()
    };

    try {
      let res;
      if (modificaId) {
        // MODIFICA PRODOTTO ESISTENTE
        res = await fetch(`/api/products/${modificaId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(prodottoData)
        });
      } else {
        // CREA NUOVO PRODOTTO
        res = await fetch('/api/save-product', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...prodottoData,
            created_at: new Date().toISOString()
          })
        });
      }

      const result = await res.json();

      if (res.ok) {
        alert(result.message || (modificaId ? '✅ Prodotto aggiornato!' : '✅ Prodotto salvato!'));
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        // Ricarica i prodotti
        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { method: 'DELETE' });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem'
  };

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange} required style={{ color: 'black' }} />
        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black' }} />

        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem' }}>
          <label>
            <input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} />
            {' '}Prodotto in Offerta
          </label>
          <label>
            <input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} />
            {' '}Manda email a tutti i clienti
          </label>
          {form.offerta && (
            <input
              type="number"
              name="sconto"
              min="0"
              max="100"
              placeholder="Sconto %"
              value={form.sconto}
              onChange={handleInputChange}
              style={{ color: 'black', width: '100%' }}
            />
          )}
        </div>

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" className="bg-white text-black px-4 py-2 rounded-md flex items-center gap-2 shadow">
          {modificaId ? '🔄 Aggiorna' : '💾 Salva'}
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem',
                  position: 'relative'
                }}>
                  {item.offerta && (
                    <div style={{
                      position: 'absolute',
                      top: '-6px',
                      left: '-4px',
                      backgroundColor: 'red',
                      color: 'white',
                      padding: '0.1rem 0.2rem',
                      borderRadius: '4px',
                      fontSize: '0.5rem'
                    }}>✨ OFFERTA</div>
                  )}
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p style={{ fontFamily: 'Arial, sans-serif' }}>
                    {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                  </p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page.js -----
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AdminPage() {
  const router = useRouter();
  const [authenticated, setAuthenticated] = useState(false);
  const [loginForm, setLoginForm] = useState({
    username: '',
    password: ''
  });
  const [loginError, setLoginError] = useState('');

  const [form, setForm] = useState({
    categoria: '',
    sottocategoria: '',
    nome: '',
    descrizione: '',
    taglia: '',
    prezzo: '',
    quantita: 0,
    offerta: false,
    emailOfferta: false,
    sconto: 0,
  });

  const [prodottiFiltrati, setProdottiFiltrati] = useState([]);
  const [nomeFileSelezionato, setNomeFileSelezionato] = useState('');
  const [categoriaSelezionata, setCategoriaSelezionata] = useState('');
  const [modificaId, setModificaId] = useState(null);

  const sottocategorie = {
    gioielli: ['anelli', 'collane', 'bracciali', 'orecchini'],
    abbigliamento: ['abiti', 'camicie top', 'pantaloni', 'gonne', 'giacche e cappotti', 'abaye', 'caftani', 'abbigliamento da mare'],
    accessori: ['collane', 'orecchini', 'bracciali', 'borse', 'foulard']
  };

  const handleLoginChange = (e) => {
    const { name, value } = e.target;
    setLoginForm(prev => ({ ...prev, [name]: value }));
  };

  const handleLogin = (e) => {
    e.preventDefault();
    if (loginForm.username === 'admin' && loginForm.password === 'Gg5255105@') {
      setAuthenticated(true);
      setLoginError('');
    } else {
      setLoginError('Credenziali non valide');
    }
  };

  useEffect(() => {
    if (!authenticated) return;

    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Errore caricamento da Supabase:', error.message);
      } else {
        setProdottiFiltrati(data);
      }
    };

    fetchProdotti();
  }, [authenticated]);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === 'checkbox' ? checked : value;

    setForm((prev) => ({ ...prev, [name]: val }));
    if (name === 'categoria') setCategoriaSelezionata(val);
  };

  const handleImageChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await fetch('/api/upload-image', {
        method: 'POST',
        body: formData,
      });

      const result = await res.json();

      if (res.ok) {
        setNomeFileSelezionato(result.fileName);
      } else {
        console.error('Errore upload:', result.error);
        alert('Errore upload immagine: ' + result.error);
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('Errore rete durante upload immagine.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const prezzoNum = Number(form.prezzo) || 0;
    const scontoNum = form.offerta ? Number(form.sconto) : 0;
    const prezzoFinale = form.offerta && scontoNum > 0
      ? Math.round(prezzoNum - (prezzoNum * scontoNum / 100))
      : prezzoNum;

    const prodottoData = {
      categoria: form.categoria,
      sottocategoria: form.sottocategoria,
      nome: form.nome,
      descrizione: form.descrizione,
      taglia: form.taglia,
      prezzo: prezzoFinale,
      quantita: Number(form.quantita) || 0,
      immagine: nomeFileSelezionato || form.immagine,
      disponibile: true,
      offerta: form.offerta,
      sconto: scontoNum,
      emailOfferta: form.emailOfferta,
      updated_at: new Date().toISOString()
    };

    try {
      let res;
      if (modificaId) {
        res = await fetch(`/api/products/${modificaId}`, {
          method: 'PUT',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': 'Bearer Gg5255105@'
          },
          body: JSON.stringify(prodottoData)
        });
      } else {
        res = await fetch('/api/save-product', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Authorization': 'Bearer Gg5255105@'
          },
          body: JSON.stringify({
            ...prodottoData,
            created_at: new Date().toISOString()
          })
        });
      }

      const result = await res.json();

      if (res.ok) {
        alert(result.message || (modificaId ? '✅ Prodotto aggiornato!' : '✅ Prodotto salvato!'));
        setForm({ categoria: '', sottocategoria: '', nome: '', descrizione: '', taglia: '', prezzo: '', quantita: 0, offerta: false, emailOfferta: false, sconto: 0 });
        setNomeFileSelezionato('');
        setCategoriaSelezionata('');
        setModificaId(null);

        const { data, error } = await supabase
          .from('products')
          .select('*')
          .order('created_at', { ascending: false });

        if (!error) setProdottiFiltrati(data);
      } else {
        alert('❌ Errore: ' + (result.error || 'Errore sconosciuto'));
      }
    } catch (err) {
      console.error('Errore rete:', err);
      alert('❌ Errore di rete durante il salvataggio.');
    }
  };

  const handleEdit = (item) => {
    setForm({
      categoria: item.categoria,
      sottocategoria: item.sottocategoria,
      nome: item.nome,
      descrizione: item.descrizione,
      taglia: item.taglia,
      prezzo: item.prezzo,
      quantita: item.quantita || 0,
      offerta: item.offerta || false,
      emailOfferta: item.emailOfferta || false,
      sconto: item.sconto || 0
    });
    setCategoriaSelezionata(item.categoria);
    setNomeFileSelezionato(item.immagine);
    setModificaId(item.id);
  };

  const handleDelete = async (id) => {
    try {
      const res = await fetch(`/api/products/${id}`, { 
        method: 'DELETE',
        headers: {
          'Authorization': 'Bearer Gg5255105@'
        }
      });
      if (res.ok) {
        setProdottiFiltrati((prev) => prev.filter((item) => item.id !== id));
      } else {
        console.error('Errore nella cancellazione:', res.status);
      }
    } catch (err) {
      console.error('Errore di rete durante la cancellazione:', err);
    }
  };

  const selectStyle = {
    backgroundColor: 'transparent',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    padding: '0.5rem 1rem',
    fontSize: '0.9rem',
    textAlign: 'center',
    appearance: 'none',
    WebkitAppearance: 'none',
    MozAppearance: 'none',
  };

  const buttonStyle = {
    backgroundColor: 'white',
    color: 'black',
    padding: '0.5rem 1rem',
    borderRadius: '6px',
    fontWeight: 'bold',
    fontSize: '0.85rem',
    border: 'none',
    cursor: 'pointer'
  };

  const logoutButtonStyle = {
    ...buttonStyle,
    backgroundColor: 'red',
    color: 'white',
    marginLeft: '0.5rem'
  };

  if (!authenticated) {
    return (
      <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
        <div style={{ maxWidth: '400px', width: '100%' }}>
          <h1 style={{ fontSize: '2.3rem', marginBottom: '2rem' }}>ACCESSO ADMIN</h1>
          
          <form onSubmit={handleLogin} style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
            <input
              type="text"
              name="username"
              placeholder="Username"
              value={loginForm.username}
              onChange={handleLoginChange}
              required
              style={{ padding: '0.5rem 1rem', borderRadius: '6px', color: 'black' }}
            />
            
            <input
              type="password"
              name="password"
              placeholder="Password"
              value={loginForm.password}
              onChange={handleLoginChange}
              required
              style={{ padding: '0.5rem 1rem', borderRadius: '6px', color: 'black' }}
            />
            
            {loginError && <p style={{ color: 'red' }}>{loginError}</p>}
            
            <button type="submit" style={{ backgroundColor: 'white', color: 'black', padding: '0.5rem 1rem', borderRadius: '6px', fontWeight: 'bold' }}>
              Accedi
            </button>
          </form>
        </div>
      </main>
    );
  }

  return (
    <main style={{ textAlign: 'center', padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ fontSize: '2.3rem', marginBottom: '1rem' }}>GESTIONE PRODOTTI</h1>

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '1rem', maxWidth: '400px', margin: 'auto' }}>
        <select name="categoria" value={form.categoria} onChange={handleInputChange} required style={selectStyle}>
          <option value="">Seleziona Categoria</option>
          <option value="gioielli">Gioielleria</option>
          <option value="abbigliamento">Abbigliamento</option>
          <option value="accessori">Accessori</option>
        </select>

        {categoriaSelezionata && (
          <select name="sottocategoria" value={form.sottocategoria} onChange={handleInputChange} required style={selectStyle}>
            <option value="">Seleziona Sottocategoria</option>
            {sottocategorie[categoriaSelezionata]?.map((sotto, i) => (
              <option key={i} value={sotto}>{sotto}</option>
            ))}
          </select>
        )}

        <input type="text" name="nome" placeholder="Nome prodotto" value={form.nome} onChange={handleInputChange} required style={{ color: 'black', width: '100%', padding: '0.5rem' }} />
        <textarea name="descrizione" placeholder="Descrizione prodotto" value={form.descrizione} onChange={handleInputChange} required style={{ color: 'black', width: '100%', padding: '0.5rem', minHeight: '80px' }} />
        <input type="text" name="taglia" placeholder="Taglia / Misura" value={form.taglia} onChange={handleInputChange} required style={{ color: 'black', width: '100%', padding: '0.5rem' }} />
        <input type="number" name="prezzo" placeholder="Prezzo" value={form.prezzo === 0 ? '' : form.prezzo} onChange={handleInputChange} required style={{ color: 'black', width: '100%', padding: '0.5rem' }} />
        <input type="number" name="quantita" placeholder="Quantità disponibile" value={form.quantita} onChange={handleInputChange} required min="0" style={{ color: 'black', width: '100%', padding: '0.5rem' }} />

        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '0.5rem', width: '100%' }}>
          <label style={{ display: 'flex', alignItems: 'center' }}>
            <input type="checkbox" name="offerta" checked={form.offerta} onChange={handleInputChange} style={{ marginRight: '0.5rem' }} />
            Prodotto in Offerta
          </label>
          <label style={{ display: 'flex', alignItems: 'center' }}>
            <input type="checkbox" name="emailOfferta" checked={form.emailOfferta} onChange={handleInputChange} style={{ marginRight: '0.5rem' }} />
            Manda email a tutti i clienti
          </label>
          {form.offerta && (
            <input
              type="number"
              name="sconto"
              min="0"
              max="100"
              placeholder="Sconto %"
              value={form.sconto}
              onChange={handleInputChange}
              style={{ color: 'black', width: '100%', padding: '0.5rem' }}
            />
          )}
        </div>

        <label htmlFor="fileUpload" style={{ backgroundColor: 'white', color: 'black', padding: '0.4rem 1rem', borderRadius: '5px', cursor: 'pointer', width: '100%', textAlign: 'center' }}>
          Carica immagine
          <input id="fileUpload" type="file" accept=".png, .jpg, .jpeg" onChange={handleImageChange} style={{ display: 'none' }} />
        </label>
        <span style={{ fontSize: '0.8rem', marginTop: '-0.5rem' }}>{nomeFileSelezionato}</span>

        <button type="submit" style={{ ...buttonStyle, width: '100%' }}>
          {modificaId ? '🔄 Aggiorna' : '💾 Salva'}
        </button>
      </form>

      <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '0.8rem', marginTop: '1.5rem', alignItems: 'center' }}>
        <button onClick={() => router.push('/admin/ordini')} style={buttonStyle}>📦 ORDINI</button>
        <button onClick={() => router.push('/admin/inventario')} style={buttonStyle}>📊 MAGAZZINO</button>
        <button onClick={() => router.push('/admin/clienti')} style={buttonStyle}>👥 CLIENTI</button>
        <button onClick={() => router.push('/admin/vendite')} style={buttonStyle}>💰 VENDITE</button>
        <button onClick={() => router.push('/admin/spedizioni')} style={buttonStyle}>🚚 SPEDIZIONI</button>
        <button onClick={() => setAuthenticated(false)} style={logoutButtonStyle}>ESCI</button>
      </div>

      {categoriaSelezionata && (
        <>
          <h2 style={{ marginTop: '2rem' }}>Galleria: {categoriaSelezionata.toUpperCase()}</h2>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(80px, 1fr))',
            gap: '0.5rem',
            marginTop: '1rem',
            maxHeight: '400px',
            overflowY: 'auto',
            padding: '1rem',
            backgroundColor: '#1a1a1a',
            borderRadius: '10px'
          }}>
            {prodottiFiltrati
              .filter(p => p.categoria === categoriaSelezionata)
              .map((item) => (
                <div key={item.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.3rem',
                  borderRadius: '6px',
                  width: '80px',
                  textAlign: 'center',
                  fontSize: '0.55rem',
                  position: 'relative'
                }}>
                  {item.offerta && (
                    <div style={{
                      position: 'absolute',
                      top: '-6px',
                      left: '-4px',
                      backgroundColor: 'red',
                      color: 'white',
                      padding: '0.1rem 0.2rem',
                      borderRadius: '4px',
                      fontSize: '0.5rem'
                    }}>✨ OFFERTA</div>
                  )}
                  <img
                    src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${item.immagine}`}
                    alt={item.nome}
                    style={{ width: '100%', height: 'auto', maxHeight: '60px', objectFit: 'cover', borderRadius: '4px', marginBottom: '0.2rem' }}
                  />
                  <strong>{item.nome}</strong>
                  <p>{item.taglia}</p>
                  <p style={{ fontFamily: 'Arial, sans-serif' }}>
                    {'\u20AC'} {(Math.round(Number(item.prezzo || 0) * 10) / 10).toFixed(1)}
                  </p>
                  <p style={{ fontWeight: 'bold', color: item.quantita === 0 ? 'red' : 'black' }}>
                    {item.quantita === 0 ? 'da ordinare' : `Q: ${item.quantita}`}
                  </p>
                  <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '0.2rem' }}>
                    <button onClick={() => handleEdit(item)} style={{ backgroundColor: '#4caf50', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>✏️</button>
                    <button onClick={() => handleDelete(item.id)} style={{ backgroundColor: '#f44336', color: 'white', padding: '0.1rem 0.2rem', borderRadius: '3px', fontSize: '0.6rem' }}>🗑️</button>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/spedizioni/page.js -----
export default function SpedizioniPage() {
  return (
    <main
      style={{
        minHeight: '100vh',
        backgroundColor: 'black',
        color: 'white',
        fontFamily: 'inherit',
        padding: '2rem',
        textAlign: 'center'
      }}
    >
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '0.5rem', fontSize: '2rem', marginTop: '1rem' }}>
        <span style={{ fontSize: '2.5rem' }}>🚚</span>
        <h1 style={{ margin: 0 }}>Spedizioni</h1>
      </div>
      <p style={{ marginTop: '2rem', fontSize: '1rem' }}>
        Questa è la pagina per la gestione delle spedizioni. In sviluppo.
      </p>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/vendite/VenditePageContent.js -----
'use client';
import { useSearchParams } from 'next/navigation';

export default function VenditePageContent() {
  const searchParams = useSearchParams();

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', textAlign: 'center' }}>
      <h1 style={{ fontSize: '2rem' }}>💰 Vendite</h1>
      <p>Questa è la pagina per il monitoraggio delle vendite. In sviluppo.</p>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/vendite/page.js -----
'use client';
import { Suspense } from 'react';
import VenditePageContent from './VenditePageContent';

export default function VenditePageWrapper() {
  return (
    <Suspense fallback={<div>Loading vendite...</div>}>
      <VenditePageContent />
    </Suspense>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/admin-log/route.js -----
import { promises as fs } from 'fs';
import path from 'path';

const logPath = path.join(process.cwd(), 'public', 'data', 'admin-log.json');

export async function POST(request) {
  try {
    const nuovoLog = await request.json();
    const data = await fs.readFile(logPath, 'utf-8').catch(() => '[]');
    const logs = JSON.parse(data);

    logs.push(nuovoLog);
    await fs.writeFile(logPath, JSON.stringify(logs, null, 2));

    return new Response(JSON.stringify({ status: 'ok' }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: 'Errore salvataggio log' }), { status: 500 });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/auth/login.js -----
import fs from 'fs';
import path from 'path';
import bcrypt from 'bcryptjs';

export async function POST(req) {
  const body = await req.json();
  const filePath = path.join(process.cwd(), 'public', 'data', 'clienti.json');

  const clienti = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
  const utente = clienti.find(c => c.email === body.email);
  if (!utente) {
    return new Response(JSON.stringify({ error: 'Email non trovata' }), { status: 404 });
  }

  const valid = await bcrypt.compare(body.password, utente.password);
  if (!valid) {
    return new Response(JSON.stringify({ error: 'Password errata' }), { status: 401 });
  }

  return new Response(JSON.stringify({
    ok: true,
    utente: {
      id: utente.id,
      nome: utente.nome,
      email: utente.email
    }
  }), { status: 200 });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/auth/register.js -----
import fs from 'fs';
import path from 'path';
import bcrypt from 'bcryptjs';

export async function POST(req) {
  const body = await req.json();
  const filePath = path.join(process.cwd(), 'public', 'data', 'clienti.json');

  let clienti = [];
  try {
    clienti = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
  } catch {
    clienti = [];
  }

  const esiste = clienti.find(c => c.email === body.email);
  if (esiste) {
    return new Response(JSON.stringify({ error: 'Utente già registrato' }), { status: 400 });
  }

  const hash = await bcrypt.hash(body.password, 10);

  const nuovo = {
    id: `c${Date.now()}`,
    nome: body.nome || '',
    email: body.email,
    password: hash,
    ordini: [],
    feedback: [],
    data_registrazione: new Date().toISOString()
  };

  clienti.push(nuovo);
  fs.writeFileSync(filePath, JSON.stringify(clienti, null, 2));
  return new Response(JSON.stringify({ ok: true }), { status: 201 });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/route copy1.js -----
import { NextResponse } from 'next/server';
import { Resend } from 'resend';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { supabase } from '../../lib/supabaseClient';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req) {
  const { email, nome, ordineId, totale, lang } = await req.json();

  const { data: ordine, error } = await supabase
    .from('ordini')
    .select('*')
    .eq('id', ordineId)
    .single();

  if (error) return NextResponse.json({ error: error.message }, { status: 500 });

  // Genera PDF
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]);
  const { height } = page.getSize();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const drawText = (text, x, y, size = 12) =>
    page.drawText(text, { x, y, size, font, color: rgb(0, 0, 0) });

  let y = height - 50;
  drawText('G-R Gabriella Romeo - Fattura', 50, y, 18);
  y -= 30;
  drawText(`Ordine: ${ordine.id}`, 50, y);
  drawText(`Data: ${new Date(ordine.data).toLocaleDateString()}`, 300, y);
  y -= 20;
  drawText(`Cliente: ${ordine.cliente.nome} ${ordine.cliente.cognome}`, 50, y);
  y -= 20;
  drawText(`Email: ${ordine.cliente.email}`, 50, y);
  y -= 30;
  drawText('Prodotti:', 50, y, 14);
  y -= 20;

  ordine.carrello.forEach(p => {
    drawText(`• ${p.nome} (${p.taglia}) - ${p.quantita} x €${p.prezzo.toFixed(2)}`, 50, y);
    y -= 20;
  });

  y -= 10;
  drawText(`Spedizione: ${ordine.spedizione}`, 50, y);
  y -= 20;
  drawText(`Pagamento: ${ordine.pagamento}`, 50, y);
  y -= 20;
  drawText(`Totale: €${ordine.totale.toFixed(2)}`, 50, y, 14);

  const pdfBytes = await pdfDoc.save();
  const pdfBase64 = Buffer.from(pdfBytes).toString('base64');

  const messaggio = {
    it: `Grazie ${nome}, in allegato trovi la fattura del tuo ordine ${ordineId}.`,
    en: `Thank you ${nome}, attached is the invoice for your order ${ordineId}.`
  }[lang];

  try {
    await resend.emails.send({
      from: 'info@g-rgabriellaromeo.it',
      to: email,
      subject: `Fattura Ordine ${ordineId}`,
      html: `<p>${messaggio}</p>`,
      attachments: [
        {
          filename: `fattura_${ordineId}.pdf`,
          content: pdfBase64,
          type: 'application/pdf',
          disposition: 'attachment'
        }
      ]
    });

    return NextResponse.json({ success: true });
  } catch (err) {
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/route.js -----
import { NextResponse } from 'next/server';
import { Resend } from 'resend';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { supabase } from '../../lib/supabaseClient';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req) {
  const { email, nome, ordineId, totale, lang } = await req.json();

  const { data: ordine, error } = await supabase
    .from('ordini')
    .select('*')
    .eq('id', ordineId)
    .single();

  if (error) return NextResponse.json({ error: error.message }, { status: 500 });

  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]);
  const { height } = page.getSize();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const drawText = (text, x, y, size = 12) =>
    page.drawText(text, { x, y, size, font, color: rgb(0, 0, 0) });

  let y = height - 50;
  drawText('G-R Gabriella Romeo - Fattura', 50, y, 18);
  y -= 30;
  drawText(`Ordine: ${ordine.id}`, 50, y);
  drawText(`Data: ${new Date(ordine.data).toLocaleDateString()}`, 300, y);
  y -= 20;
  drawText(`Cliente: ${ordine.cliente.nome} ${ordine.cliente.cognome}`, 50, y);
  y -= 20;
  drawText(`Email: ${ordine.cliente.email}`, 50, y);
  y -= 30;
  drawText('Prodotti:', 50, y, 14);
  y -= 20;

  ordine.carrello.forEach(p => {
    drawText(`• ${p.nome} (${p.taglia}) - ${p.quantita} x €${p.prezzo.toFixed(2)}`, 50, y);
    y -= 20;
  });

  y -= 10;
  drawText(`Spedizione: ${ordine.spedizione}`, 50, y);
  y -= 20;
  drawText(`Pagamento: ${ordine.pagamento}`, 50, y);
  y -= 20;
  drawText(`Totale: €${ordine.totale.toFixed(2)}`, 50, y, 14);

  const pdfBytes = await pdfDoc.save();
  const pdfBase64 = Buffer.from(pdfBytes).toString('base64');

  const messaggio = {
    it: `Grazie ${nome}, in allegato trovi la fattura del tuo ordine ${ordineId}.`,
    en: `Thank you ${nome}, attached is the invoice for your order ${ordineId}.`
  }[lang];

  try {
    await resend.emails.send({
      from: 'info@g-rgabriellaromeo.it',
      to: email,
      subject: `Fattura Ordine ${ordineId}`,
      html: `<p>${messaggio}</p>`,
      attachments: [
        {
          filename: `fattura_${ordineId}.pdf`,
          content: pdfBase64,
          type: 'application/pdf',
          disposition: 'attachment'
        }
      ]
    });

    return NextResponse.json({ success: true });
  } catch (err) {
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/send-offerte.js -----
import { NextResponse } from 'next/server';
import { Resend } from 'resend';
import { supabase } from '../../../lib/supabaseClient';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req) {
  try {
    const { prodotti } = await req.json();

    if (!prodotti || prodotti.length === 0) {
      return NextResponse.json({ error: 'Nessun prodotto selezionato' }, { status: 400 });
    }

    // Recupera tutti i clienti registrati
    const { data: clienti, error: clientiError } = await supabase
      .from('clienti')
      .select('email');

    if (clientiError) {
      console.error('Errore lettura clienti:', clientiError.message);
      return NextResponse.json({ error: 'Errore lettura clienti' }, { status: 500 });
    }

    const destinatari = clienti.map((c) => c.email).filter(Boolean);

    const corpoHtml = `
      <h2>🌟 Offerte del giorno da GR Gabriella Romeo</h2>
      <ul>
        ${prodotti.map((p) => `
          <li>
            <strong>${p.nome}</strong><br/>
            ${p.descrizione || ''}<br/>
            Prezzo: € ${p.prezzo?.toFixed(2)}<br/>
            ${p.sconto ? `<em>Sconto: ${p.sconto}%</em><br/>` : ''}
          </li>
        `).join('')}
      </ul>
      <p>Visita il nostro sito per vedere tutti i prodotti in offerta!</p>
    `;

    const result = await resend.emails.send({
      from: 'info@g-rgabriellaromeo.it',
      to: destinatari,
      subject: '📣 Nuove Offerte G-R Gabriella Romeo',
      html: corpoHtml,
    });

    return NextResponse.json({ message: '✅ Email inviate correttamente!', result });
  } catch (error) {
    console.error('Errore invio email:', error);
    return NextResponse.json({ error: 'Errore durante invio email' }, { status: 500 });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/fattura/route.js -----
import { NextResponse } from 'next/server';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';

export async function POST(req) {
  const { ordine } = await req.json();

  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // A4

  const { width, height } = page.getSize();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  const drawText = (text, x, y, size = 12) => {
    page.drawText(text, {
      x,
      y,
      size,
      font,
      color: rgb(0, 0, 0)
    });
  };

  let y = height - 50;
  drawText('G-R Gabriella Romeo - Fattura', 50, y, 18);
  y -= 30;
  drawText(`Ordine: ${ordine.id}`, 50, y);
  drawText(`Data: ${new Date(ordine.data).toLocaleDateString()}`, 300, y);
  y -= 20;
  drawText(`Cliente: ${ordine.cliente.nome} ${ordine.cliente.cognome}`, 50, y);
  y -= 20;
  drawText(`Email: ${ordine.cliente.email}`, 50, y);
  y -= 30;

  drawText('Prodotti:', 50, y, 14);
  y -= 20;

  ordine.carrello.forEach(p => {
    drawText(`• ${p.nome} (${p.taglia}) - ${p.quantita} x €${p.prezzo.toFixed(2)}`, 50, y);
    y -= 20;
  });

  y -= 10;
  drawText(`Spedizione: ${ordine.spedizione}`, 50, y);
  y -= 20;
  drawText(`Pagamento: ${ordine.pagamento}`, 50, y);
  y -= 20;
  drawText(`Totale: €${ordine.totale.toFixed(2)}`, 50, y, 14);

  const pdfBytes = await pdfDoc.save();

  return new Response(pdfBytes, {
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="fattura_${ordine.id}.pdf"`
    }
  });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/get-ordine/route copy1.js -----
import { supabase } from '../../lib/supabaseClient';

export async function GET(request) {
  return new Response(JSON.stringify({ message: 'Ordine ricevuto OK' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' },
  });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/get-ordine/route.js -----
import { supabase } from '../../lib/supabaseClient';

export async function GET(request) {
  return new Response(JSON.stringify({ message: 'Ordine ricevuto OK' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' },
  });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/[id]/route.js -----
import { supabase } from '../../../lib/supabaseClient';

export async function PUT(request, { params }) {
  const id = params.id;
  const body = await request.json();

  const { data, error } = await supabase
    .from('products')
    .update(body)
    .eq('id', id);

  if (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 500 });
  }

  return new Response(JSON.stringify({ message: 'Prodotto aggiornato con successo', data }), { status: 200 });
}

export async function DELETE(request, { params }) {
  const id = params.id;

  const { error } = await supabase
    .from('products')
    .delete()
    .eq('id', id);

  if (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 500 });
  }

  return new Response(JSON.stringify({ message: 'Prodotto eliminato con successo' }), { status: 200 });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/rou.ts -----
import { promises as fs } from 'fs';
import path from 'path';
import { NextRequest } from 'next/server';

const filePath = path.join(process.cwd(), 'data', 'products.json');

export async function GET() {
  try {
    const data = await fs.readFile(filePath, 'utf-8');
    return new Response(data, { status: 200 });
  } catch {
    return new Response(JSON.stringify([]), { status: 200 });
  }
}

export async function POST(request: NextRequest) {
  const newProduct = await request.json();
  const data = await fs.readFile(filePath, 'utf-8').catch(() => '[]');
  const products = JSON.parse(data);
  products.push(newProduct);
  await fs.writeFile(filePath, JSON.stringify(products, null, 2));
  return new Response(JSON.stringify(products), { status: 200 });
}

export async function PUT(request: NextRequest) {
  const updated = await request.json();
  const data = await fs.readFile(filePath, 'utf-8');
  const products = JSON.parse(data).map((p: any) =>
    p.id === updated.id ? updated : p
  );
  await fs.writeFile(filePath, JSON.stringify(products, null, 2));
  return new Response(JSON.stringify(products), { status: 200 });
}

export async function DELETE(request: NextRequest) {
  const { id } = await request.json();
  const data = await fs.readFile(filePath, 'utf-8');
  const products = JSON.parse(data).filter((p: any) => p.id !== id);
  await fs.writeFile(filePath, JSON.stringify(products, null, 2));
  return new Response(JSON.stringify(products), { status: 200 });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/route.js -----
import fs from 'fs/promises';
import path from 'path';

const filePath = path.join(process.cwd(), 'public', 'data', 'products.json');

export async function GET() {
  try {
    const data = await fs.readFile(filePath, 'utf-8');
    return new Response(data, {
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (err) {
    console.error('Errore lettura file:', err);
    return new Response(JSON.stringify([]), {
      headers: { 'Content-Type': 'application/json' },
      status: 200
    });
  }
}

export async function POST(req) {
  try {
    const nuovoProdotto = await req.json();
    const data = await fs.readFile(filePath, 'utf-8');
    const prodotti = JSON.parse(data);

    const index = prodotti.findIndex(p => p.id === nuovoProdotto.id);
    if (index !== -1) {
      prodotti[index] = nuovoProdotto; // MODIFICA
    } else {
      prodotti.push(nuovoProdotto); // AGGIUNTA
    }

    await fs.writeFile(filePath, JSON.stringify(prodotti, null, 2), 'utf-8');
    return new Response(JSON.stringify(nuovoProdotto), {
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (err) {
    console.error('Errore salvataggio:', err);
    return new Response(JSON.stringify({ error: 'Errore salvataggio' }), {
      status: 500
    });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-ordini/route.js -----
import { promises as fs } from 'fs';
import path from 'path';

const filePath = path.join(process.cwd(), 'public', 'data', 'ordini.json');

export async function POST(request) {
  try {
    const ordini = await request.json();
    await fs.writeFile(filePath, JSON.stringify(ordini, null, 2));
    return new Response(JSON.stringify({ ok: true }), { status: 200 });
  } catch (err) {
    return new Response(JSON.stringify({ ok: false, error: err.message }), { status: 500 });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-product/route copy.js -----
import fs from 'fs';
import path from 'path';

export async function POST(request) {
  try {
    const prodotti = await request.json();
    const filePath = path.join(process.cwd(), 'public', 'data', 'products.json');

    fs.writeFileSync(filePath, JSON.stringify(prodotti, null, 2));
    return new Response(JSON.stringify({ message: 'Prodotti salvati con successo!' }), {
      status: 200,
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: 'Errore nel salvataggio dei prodotti' }), {
      status: 500,
    });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-product/route.js -----
import { supabase } from '../../lib/supabaseClient';


export async function POST(request) {
  try {
    const prodotto = await request.json();

    const result = await supabase
  .from('products')
  .insert([prodotto]);

if (result.error) {
  console.error('❌ ERRORE SUPABASE:', result.error);
  return new Response(JSON.stringify({
    error: result.error.message || 'Errore sconosciuto da Supabase'
  }), {
    status: 500,
  });
}

return new Response(JSON.stringify({ message: 'Prodotto salvato con successo' }), {
  status: 200,
});
    return new Response(JSON.stringify({ error: error.message || 'Errore generico su Supabase' }), {
  status: 500,
    });    
  } catch (error) {
    console.error('❌ ERRORE DA SUPABASE:', error); // <--- STAMPA NEL TERMINALE
    return new Response(JSON.stringify({
      error: error?.message || JSON.stringify(error) || 'Errore generico su Supabase'
    }), {
      status: 500,
    });
  }  
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/upload-image/route copy.js -----
import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

const writeFile = promisify(fs.writeFile);

export async function POST(request) {
  const formData = await request.formData();
  const file = formData.get('file');

  if (!file || typeof file.name !== 'string') {
    return new Response(JSON.stringify({ error: 'Nessun file valido ricevuto' }), {
      status: 400,
    });
  }

  try {
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    const uploadsDir = path.join(process.cwd(), 'public', 'uploads');

    // Crea la cartella uploads se non esiste
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }

    const filePath = path.join(uploadsDir, file.name);
    await writeFile(filePath, buffer);

    return new Response(JSON.stringify({ message: 'Immagine caricata', fileName: file.name }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Errore salvataggio file:', error);
    return new Response(JSON.stringify({ error: 'Errore nel salvataggio immagine' }), {
      status: 500,
    });
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/upload-image/route.js -----
import { supabase } from '../../lib/supabaseClient';

export async function POST(request) {
  const formData = await request.formData();
  const file = formData.get('file');

  if (!file) {
    return new Response(JSON.stringify({ error: 'Nessun file ricevuto' }), { status: 400 });
  }

  const fileName = `${Date.now()}_${file.name}`;
  const arrayBuffer = await file.arrayBuffer();
  const buffer = new Uint8Array(arrayBuffer);

  const { error } = await supabase.storage
    .from('immagini') // nome bucket
    .upload(fileName, buffer, {
      contentType: file.type,
      upsert: true
    });

  if (error) {
    console.error('Upload error Supabase', error);
    return new Response(JSON.stringify({ error: error.message }), { status: 500 });
  }

  return new Response(JSON.stringify({ message: 'Upload riuscito', fileName }), { status: 200 });
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ar/page.js -----
'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function ArabicPage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative',
      direction: 'rtl' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000, direction: 'ltr' }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="ar" />
      </div>

    </main>
  );
}


----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy1.js -----
'use client';

import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

export default function BrandPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';

  const testi = {
    it: `GR Gabriella Romeo nasce a Catania, culla di miti e luce mediterranea, dove il sole bacia il mare e la storia si intreccia con la magia. Ogni creazione è un pezzo unico, realizzato a mano con amore e dedizione, un’incantevole fusione di arte e cuore.

Il brand celebra una femminilità rara, autentica e potente, capace di illuminare chi la indossa con eleganza senza tempo. GR Gabriella Romeo è molto più di moda: è un viaggio poetico tra tradizione e innovazione, un sogno tangibile che cattura l’essenza vibrante e magica della Sicilia.

Questo è il mio stile.`,
    en: `GR Gabriella Romeo was born in Catania, cradle of myths and Mediterranean light, where the sun kisses the sea and history intertwines with magic. Each creation is a unique piece, handmade with love and dedication — a magical fusion of art and heart.

The brand celebrates a rare, authentic and powerful femininity, capable of illuminating the wearer with timeless elegance. GR Gabriella Romeo is more than fashion: it is a poetic journey between tradition and innovation, a tangible dream that captures the vibrant and magical essence of Sicily.

This is my style.`,
    fr: `GR Gabriella Romeo est née à Catane, berceau des mythes et de la lumière méditerranéenne, où le soleil embrasse la mer et où l’histoire se mêle à la magie. Chaque création est une pièce unique, réalisée à la main avec amour et dévouement, une fusion enchanteresse d’art et de cœur.

La marque célèbre une féminité rare, authentique et puissante, capable d’illuminer celle qui la porte avec une élégance intemporelle. GR Gabriella Romeo, c’est bien plus que de la mode : c’est un voyage poétique entre tradition et innovation, un rêve tangible qui capture l’essence vibrante et magique de la Sicile.

C’est mon style.`,
    es: `GR Gabriella Romeo nació en Catania, cuna de mitos y luz mediterránea, donde el sol besa el mar y la historia se entrelaza con la magia. Cada creación es una pieza única, hecha a mano con amor y dedicación, una fusión encantadora de arte y corazón.

La marca celebra una feminidad rara, auténtica y poderosa, capaz de iluminar a quien la lleva con una elegancia atemporal. GR Gabriella Romeo es mucho más que moda: es un viaje poético entre tradición e innovación, un sueño tangible que captura la esencia vibrante y mágica de Sicilia.

Este es mi estilo.`,
    de: `GR Gabriella Romeo wurde in Catania geboren, Wiege von Mythen und mediterranem Licht, wo die Sonne das Meer küsst und sich Geschichte mit Magie vermischt. Jede Kreation ist ein Unikat, von Hand gefertigt mit Liebe und Hingabe — eine zauberhafte Verschmelzung von Kunst und Herz.

Die Marke feiert eine seltene, authentische und kraftvolle Weiblichkeit, die ihre Trägerin mit zeitloser Eleganz erstrahlen lässt. GR Gabriella Romeo ist mehr als Mode: eine poetische Reise zwischen Tradition und Innovation, ein greifbarer Traum, der die lebendige, magische Essenz Siziliens einfängt.

Das ist mein Stil.`,
    ar: `وُلدت علامة GR Gabriella Romeo في كاتانيا، مهد الأساطير والنور المتوسطي، حيث تقبّل الشمس البحر وتتشابك فيهما الحكاية بالسحر. كلّ تصميم هو قطعة فريدة مصنوعة يدويًا بحب واهتمام، ومزيج ساحر بين الفن والقلب.

تحتفي العلامة بأنوثة نادرة وأصيلة وقوية، تضيء من ترتديها بأناقة خالدة. GR Gabriella Romeo هي أكثر من مجرّد موضة؛ إنها رحلة شعرية بين التقاليد والابتكار، حلم ملموس يلتقط جوهر صقلية النابض والساحر.

هذا هو أسلوبي.`,
    zh: `GR Gabriella Romeo 诞生于卡塔尼亚，这是一个充满神话与地中海阳光的地方，阳光亲吻着大海，历史与魔法交织在一起。每件作品都是独一无二的手工制作，融合了爱与奉献，是艺术与心灵的迷人结合。

这个品牌颂扬一种罕见、真实而强大的女性气质，使佩戴者散发出永恒的优雅。GR Gabriella Romeo 远不止于时尚：它是一场诗意的旅程，融合传统与创新，是一个捕捉西西里岛生动魔力的可触梦想。

这就是我的风格。`,
    ja: `GR Gabriella Romeo は、神話と地中海の光に満ちたカターニアで生まれました。太陽が海を照らし、歴史が魔法と交差する地です。すべての作品は、愛と献身を込めて手作業で作られたユニークな一点物であり、芸術と心の魅惑的な融合です。

ブランドは、まれで本物、そして力強い女性らしさを称賛し、それをまとう人を時を超えた優雅さで輝かせます。GR Gabriella Romeo はファッションを超えた存在。伝統と革新の間を旅する詩的な物語であり、西シチリアの活気ある魔法の本質を捉えた、触れられる夢です。

これが私のスタイルです。`
  };

  return (
    <main
      style={{
        backgroundImage: 'url("/data/images/carretti.png")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '2rem',
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        fontFamily: 'Michroma, sans-serif',
        backdropFilter: 'brightness(0.9)',
      }}
    >
      <div
        style={{
          backgroundColor: 'rgba(0, 0, 0, 0.75)',
          padding: '2rem',
          borderRadius: '1rem',
          maxWidth: '800px',
          whiteSpace: 'pre-wrap',
        }}
      >
        <p style={{ fontSize: '0.95rem', marginBottom: '2rem' }}>
          {testi[lang] || testi.it}
        </p>
        <Image
          src="/data/images/firma-gabriella.png"
          alt="Firma Gabriella Romeo"
          width={280}
          height={120}
        />
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy2.js -----
'use client';

import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

export default function BrandPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';

  const testi = {
    it: `Gabriella Romeo nasce a Catania, culla di miti e luce mediterranea, dove il sole bacia il mare e la storia si intreccia con la magia. Ogni creazione è un pezzo unico, realizzato a mano con amore e dedizione, un’incantevole fusione di arte e cuore.

Il brand celebra una femminilità rara, autentica e potente, capace di illuminare chi la indossa con eleganza senza tempo. GR Gabriella Romeo è molto più di moda: è un viaggio poetico tra tradizione e innovazione, un sogno tangibile che cattura l’essenza vibrante e magica della Sicilia.

Questo è il mio stile.`,
    en: `Gabriella Romeo was born in Catania, cradle of myths and Mediterranean light, where the sun kisses the sea and history intertwines with magic. Each creation is a unique piece, handmade with love and dedication — a magical fusion of art and heart.

The brand celebrates a rare, authentic and powerful femininity, capable of illuminating the wearer with timeless elegance. GR Gabriella Romeo is more than fashion: it is a poetic journey between tradition and innovation, a tangible dream that captures the vibrant and magical essence of Sicily.

This is my style.`,
    fr: `Gabriella Romeo est née à Catane, berceau des mythes et de la lumière méditerranéenne, où le soleil embrasse la mer et où l’histoire se mêle à la magie. Chaque création est une pièce unique, réalisée à la main avec amour et dévouement, une fusion enchanteresse d’art et de cœur.

La marque célèbre une féminité rare, authentique et puissante, capable d’illuminer celle qui la porte avec une élégance intemporelle. GR Gabriella Romeo, c’est bien plus que de la mode : c’est un voyage poétique entre tradition et innovation, un rêve tangible qui capture l’essence vibrante et magique de la Sicile.

C’est mon style.`,
    es: `Gabriella Romeo nació en Catania, cuna de mitos y luz mediterránea, donde el sol besa el mar y la historia se entrelaza con la magia. Cada creación es una pieza única, hecha a mano con amor y dedicación, una fusión encantadora de arte y corazón.

La marca celebra una feminidad rara, auténtica y poderosa, capaz de iluminar a quien la lleva con una elegancia atemporal. GR Gabriella Romeo es mucho más que moda: es un viaje poético entre tradición e innovación, un sueño tangible que captura la esencia vibrante y mágica de Sicilia.

Este es mi estilo.`,
    de: `Gabriella Romeo wurde in Catania geboren, Wiege von Mythen und mediterranem Licht, wo die Sonne das Meer küsst und sich Geschichte mit Magie vermischt. Jede Kreation ist ein Unikat, von Hand gefertigt mit Liebe und Hingabe — eine zauberhafte Verschmelzung von Kunst und Herz.

Die Marke feiert eine seltene, authentische und kraftvolle Weiblichkeit, die ihre Trägerin mit zeitloser Eleganz erstrahlen lässt. GRI Gabriella Romeo ist mehr als Mode: eine poetische Reise zwischen Tradition und Innovation, ein greifbarer Traum, der die lebendige, magische Essenz Siziliens einfängt.

Das ist mein Stil.`,
    ar: `وُلدت علامة Gabriella Romeo في كاتانيا، مهد الأساطير والنور المتوسطي، حيث تقبّل الشمس البحر وتتشابك فيهما الحكاية بالسحر. كلّ تصميم هو قطعة فريدة مصنوعة يدويًا بحب واهتمام، ومزيج ساحر بين الفن والقلب.

تحتفي العلامة بأنوثة نادرة وأصيلة وقوية، تضيء من ترتديها بأناقة خالدة. GR Gabriella Romeo هي أكثر من مجرّد موضة؛ إنها رحلة شعرية بين التقاليد والابتكار، حلم ملموس يلتقط جوهر صقلية النابض والساحر.

هذا هو أسلوبي.`,
    zh: `Gabriella Romeo 诞生于卡塔尼亚，这是一个充满神话与地中海阳光的地方，阳光亲吻着大海，历史与魔法交织在一起。每件作品都是独一无二的手工制作，融合了爱与奉献，是艺术与心灵的迷人结合。

这个品牌颂扬一种罕见、真实而强大的女性气质，使佩戴者散发出永恒的优雅。GR Gabriella Romeo 远不止于时尚：它是一场诗意的旅程，融合传统与创新，是一个捕捉西西里岛生动魔力的可触梦想。

这就是我的风格。`,
    ja: `Gabriella Romeo は、神話と地中海の光に満ちたカターニアで生まれました。太陽が海を照らし、歴史が魔法と交差する地です。すべての作品は、愛と献身を込めて手作業で作られたユニークな一点物であり、芸術と心の魅惑的な融合です。

ブランドは、まれで本物、そして力強い女性らしさを称賛し、それをまとう人を時を超えた優雅さで輝かせます。GR Gabriella Romeo はファッションを超えた存在。伝統と革新の間を旅する詩的な物語であり、西シチリアの活気ある魔法の本質を捉えた、触れられる夢です。

これが私のスタイルです。`
  };

  return (
    <main
      style={{
        backgroundImage: 'url("/data/images/carretti.png")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '2rem',
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        fontFamily: 'Michroma, sans-serif',
        position: 'relative',
      }}
    >
      {/* Semi-transparent overlay for better readability */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.4)',
        zIndex: 1,
      }} />
      
      <div
        style={{
          maxWidth: '800px',
          padding: '3rem 2rem',
          whiteSpace: 'pre-wrap',
          zIndex: 2,
          position: 'relative',
        }}
      >
        <p style={{ 
          fontSize: '1.4rem', 
          marginBottom: '3rem',
          lineHeight: '1.8',
          fontWeight: 300,
          letterSpacing: '0.5px',
          textShadow: '0 2px 10px rgba(0,0,0,0.5)'
        }}>
          {testi[lang] || testi.it}
        </p>
        
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
        }}>
          <Image
            src="/data/images/firma-gabriella.png"
            alt="Firma Gabriella Romeo"
            width={280}
            height={120}
            style={{ 
              filter: 'brightness(0) invert(1)' // Makes signature pure white
            }}
          />
        </div>
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy3.js -----
'use client';

import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

export default function BrandPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';

  const testi = {
    it: `Gabriella Romeo nasce a Catania, culla di miti e luce mediterranea, dove il sole bacia il mare e la storia si intreccia con la magia. Ogni creazione è un pezzo unico, realizzato a mano con amore e dedizione, un’incantevole fusione di arte e cuore.

Il brand celebra una femminilità rara, autentica e potente, capace di illuminare chi la indossa con eleganza senza tempo. GR Gabriella Romeo è molto più di moda: è un viaggio poetico tra tradizione e innovazione, un sogno tangibile che cattura l’essenza vibrante e magica della Sicilia.

Questo è il mio stile.`,
    en: `Gabriella Romeo was born in Catania, cradle of myths and Mediterranean light, where the sun kisses the sea and history intertwines with magic. Each creation is a unique piece, handmade with love and dedication — a magical fusion of art and heart.

The brand celebrates a rare, authentic and powerful femininity, capable of illuminating the wearer with timeless elegance. GR Gabriella Romeo is more than fashion: it is a poetic journey between tradition and innovation, a tangible dream that captures the vibrant and magical essence of Sicily.

This is my style.`,
    fr: `Gabriella Romeo est née à Catane, berceau des mythes et de la lumière méditerranéenne, où le soleil embrasse la mer et où l’histoire se mêle à la magie. Chaque création est une pièce unique, réalisée à la main avec amour et dévouement, une fusion enchanteresse d’art et de cœur.

La marque célèbre une féminité rare, authentique et puissante, capable d’illuminer celle qui la porte avec une élégance intemporelle. GR Gabriella Romeo, c’est bien plus que de la mode : c’est un voyage poétique entre tradition et innovation, un rêve tangible qui capture l’essence vibrante et magique de la Sicile.

C’est mon style.`,
    es: `Gabriella Romeo nació en Catania, cuna de mitos y luz mediterránea, donde el sol besa el mar y la historia se entrelaza con la magia. Cada creación es una pieza única, hecha a mano con amor y dedicación, una fusión encantadora de arte y corazón.

La marca celebra una feminidad rara, auténtica y poderosa, capaz de iluminar a quien la lleva con una elegancia atemporal. GR Gabriella Romeo es mucho más que moda: es un viaje poético entre tradición e innovación, un sueño tangible que captura la esencia vibrante y mágica de Sicilia.

Este es mi estilo.`,
    de: `Gabriella Romeo wurde in Catania geboren, Wiege von Mythen und mediterranem Licht, wo die Sonne das Meer küsst und sich Geschichte mit Magie vermischt. Jede Kreation ist ein Unikat, von Hand gefertigt mit Liebe und Hingabe — eine zauberhafte Verschmelzung von Kunst und Herz.

Die Marke feiert eine seltene, authentische und kraftvolle Weiblichkeit, die ihre Trägerin mit zeitloser Eleganz erstrahlen lässt. GRI Gabriella Romeo ist mehr als Mode: eine poetische Reise zwischen Tradition und Innovation, ein greifbarer Traum, der die lebendige, magische Essenz Siziliens einfängt.

Das ist mein Stil.`,
    ar: `وُلدت علامة Gabriella Romeo في كاتانيا، مهد الأساطير والنور المتوسطي، حيث تقبّل الشمس البحر وتتشابك فيهما الحكاية بالسحر. كلّ تصميم هو قطعة فريدة مصنوعة يدويًا بحب واهتمام، ومزيج ساحر بين الفن والقلب.

تحتفي العلامة بأنوثة نادرة وأصيلة وقوية، تضيء من ترتديها بأناقة خالدة. GR Gabriella Romeo هي أكثر من مجرّد موضة؛ إنها رحلة شعرية بين التقاليد والابتكار، حلم ملموس يلتقط جوهر صقلية النابض والساحر.

هذا هو أسلوبي.`,
    zh: `Gabriella Romeo 诞生于卡塔尼亚，这是一个充满神话与地中海阳光的地方，阳光亲吻着大海，历史与魔法交织在一起。每件作品都是独一无二的手工制作，融合了爱与奉献，是艺术与心灵的迷人结合。

这个品牌颂扬一种罕见、真实而强大的女性气质，使佩戴者散发出永恒的优雅。GR Gabriella Romeo 远不止于时尚：它是一场诗意的旅程，融合传统与创新，是一个捕捉西西里岛生动魔力的可触梦想。

这就是我的风格。`,
    ja: `Gabriella Romeo は、神話と地中海の光に満ちたカターニアで生まれました。太陽が海を照らし、歴史が魔法と交差する地です。すべての作品は、愛と献身を込めて手作業で作られたユニークな一点物であり、芸術と心の魅惑的な融合です。

ブランドは、まれで本物、そして力強い女性らしさを称賛し、それをまとう人を時を超えた優雅さで輝かせます。GR Gabriella Romeo はファッションを超えた存在。伝統と革新の間を旅する詩的な物語であり、西シチリアの活気ある魔法の本質を捉えた、触れられる夢です。

これが私のスタイルです。`
  };

  return (
    <main
      style={{
        backgroundImage: 'url("/data/images/carretti.png")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '2rem',
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        fontFamily: 'Michroma, sans-serif',
        position: 'relative',
      }}
    >
      {/* Semi-transparent overlay for better readability */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.4)',
        zIndex: 1,
      }} />
      
      <div
        style={{
          maxWidth: '800px',
          padding: '3rem 2rem',
          whiteSpace: 'pre-wrap',
          zIndex: 2,
          position: 'relative',
        }}
      >
        <p style={{ 
          fontSize: '1.4rem', 
          marginBottom: '3rem',
          lineHeight: '1.8',
          fontWeight: 300,
          letterSpacing: '0.5px',
          textShadow: '0 2px 10px rgba(0,0,0,0.5)'
        }}>
          {testi[lang] || testi.it}
        </p>
        
        <div style={{
          display: 'flex',
          justifyContent: 'center',
        }}>
          <Image
            src="/data/images/firma-gabriella.png"
            alt="Firma Gabriella Romeo"
            width={280}
            height={120}
            style={{ 
              // REMOVED THE FILTER - signature should be visible now
            }}
          />
        </div>
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy4.js -----
'use client';

import { useState } from 'react';
import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

export default function BrandPage() {
  const params = useSearchParams();
  const langParam = params.get('lang') || 'it';
  const [lang, setLang] = useState(langParam);

  const testi = {
    it: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo nasce a Catania, culla di miti e luce mediterranea, dove il sole bacia il mare e la storia si intreccia con la magia. Ogni creazione è un pezzo unico, realizzato a mano con amore e dedizione, un'incantevole fusione di arte e cuore.

Il brand celebra una femminilità rara, autentica e potente, capace di illuminare chi la indossa con eleganza senza tempo. GR Gabriella Romeo è molto più di moda: è un viaggio poetico tra tradizione e innovazione, un sogno tangibile che cattura l'essenza vibrante e magica della Sicilia.

Questo è il mio stile.`,
      signature: "Gabriella Romeo"
    },
    en: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo was born in Catania, cradle of myths and Mediterranean light, where the sun kisses the sea and history intertwines with magic. Each creation is a unique piece, handmade with love and dedication — a magical fusion of art and heart.

The brand celebrates a rare, authentic and powerful femininity, capable of illuminating the wearer with timeless elegance. GR Gabriella Romeo is more than fashion: it is a poetic journey between tradition and innovation, a tangible dream that captures the vibrant and magical essence of Sicily.

This is my style.`,
      signature: "Gabriella Romeo"
    },
    fr: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo est née à Catane, berceau des mythes et de la lumière méditerranéenne, où le soleil embrasse la mer et où l'histoire se mêle à la magie. Chaque création est une pièce unique, réalisée à la main avec amour et dévouement, une fusion enchanteresse d'art et de cœur.

La marque célèbre une féminité rare, authentique et puissante, capable d'illuminer celle qui la porte avec une élégance intemporelle. GR Gabriella Romeo, c'est bien plus que de la mode : c'est un voyage poétique entre tradition et innovation, un rêve tangible qui capture l'essence vibrante et magique de la Sicile.

C'est mon style.`,
      signature: "Gabriella Romeo"
    },
    es: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo nació en Catania, cuna de mitos y luz mediterránea, donde el sol besa el mar y la historia se entrelaza con la magia. Cada creación es una pieza única, hecha a mano con amor y dedicación, una fusión encantadora de arte y corazón.

La marca celebra una feminidad rara, auténtica y poderosa, capaz de iluminar a quien la lleva con una elegancia atemporal. GR Gabriella Romeo es mucho más que moda: es un viaje poético entre tradición e innovación, un sueño tangible que captura la esencia vibrante y mágica de Sicilia.

Este es mi estilo.`,
      signature: "Gabriella Romeo"
    },
    de: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo wurde in Catania geboren, Wiege von Mythen und mediterranem Licht, wo die Sonne das Meer küsst und sich Geschichte mit Magie vermischt. Jede Kreation ist ein Unikat, von Hand gefertigt mit Liebe und Hingabe — eine zauberhafte Verschmelzung von Kunst und Herz.

Die Marke feiert eine seltene, authentische und kraftvolle Weiblichkeit, die ihre Trägerin mit zeitloser Eleganz erstrahlen lässt. GRI Gabriella Romeo ist mehr als Mode: eine poetische Reise zwischen Tradition und Innovation, ein greifbarer Traum, der die lebendige, magische Essenz Siziliens einfängt.

Das ist mein Stil.`,
      signature: "Gabriella Romeo"
    },
    ar: {
      title: "GR Gabriella Romeo",
      text: `وُلدت علامة Gabriella Romeo في كاتانيا، مهد الأساطير والنور المتوسطي، حيث تقبّل الشمس البحر وتتشابك فيهما الحكاية بالسحر. كلّ تصميم هو قطعة فريدة مصنوعة يدويًا بحب واهتمام، ومزيج ساحر بين الفن والقلب.

تحتفي العلامة بأنوثة نادرة وأصيلة وقوية، تضيء من ترتديها بأناقة خالدة. GR Gabriella Romeo هي أكثر من مجرّد موضة؛ إنها رحلة شعرية بين التقاليد والابتكار، حلم ملموس يلتقط جوهر صقلية النابض والساحر.

هذا هو أسلوبي.`,
      signature: "Gabriella Romeo"
    },
    zh: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo 诞生于卡塔尼亚，这是一个充满神话与地中海阳光的地方，阳光亲吻着大海，历史与魔法交织在一起。每件作品都是独一无二的手工制作，融合了爱与奉献，是艺术与心灵的迷人结合。

这个品牌颂扬一种罕见、真实而强大的女性气质，使佩戴者散发出永恒的优雅。GR Gabriella Romeo 远不止于时尚：它是一场诗意的旅程，融合传统与创新，是一个捕捉西西里岛生动魔力的可触梦想。

这就是我的风格。`,
      signature: "Gabriella Romeo"
    },
    ja: {
      title: "GR Gabriella Romeo",
      text: `Gabriella Romeo は、神話と地中海の光に満ちたカターニアで生まれました。太陽が海を照らし、歴史が魔法と交差する地です。すべての作品は、愛と献身を込めて手作業で作られたユニークな一点物であり、芸術と心の魅惑的な融合です。

ブランドは、まれで本物、そして力強い女性らしさを称賛し、それをまとう人を時を超えた優雅さで輝かせます。GR Gabriella Romeo はファッションを超えた存在。伝統と革新の間を旅する詩的な物語であり、西シチリアの活気ある魔法の本質を捉えた、触れられる夢です。

これが私のスタイルです。`,
      signature: "Gabriella Romeo"
    }
  };

  const currentText = testi[lang] || testi.it;

  return (
    <div style={{
      backgroundImage: 'url("/data/images/carretti.png")',
      backgroundSize: 'cover',
      backgroundPosition: 'center',
      minHeight: '100vh',
      padding: '2rem',
      color: 'white',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      textAlign: 'center',
      fontFamily: 'Michroma, sans-serif',
      position: 'relative',
    }}>
      {/* Semi-transparent overlay for better readability */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.4)',
        zIndex: 1,
      }} />
      
      <div
        style={{
          maxWidth: '800px',
          padding: '3rem 2rem',
          whiteSpace: 'pre-wrap',
          zIndex: 2,
          position: 'relative',
        }}
      >
        <h1 style={{ 
          fontSize: '2.5rem', 
          marginBottom: '1.5rem',
          fontWeight: 700,
          letterSpacing: '1px',
          textShadow: '0 2px 10px rgba(0,0,0,0.5)'
        }}>
          {currentText.title}
        </h1>
        
        <p style={{ 
          fontSize: '1.4rem', 
          marginBottom: '3rem',
          lineHeight: '1.8',
          fontWeight: 300,
          letterSpacing: '0.5px',
          textShadow: '0 2px 10px rgba(0,0,0,0.5)'
        }}>
          {currentText.text}
        </p>
        
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          marginTop: '2rem'
        }}>
          <div style={{
            fontFamily: '"Dancing Script", cursive',
            fontSize: '2.8rem',
            color: 'white',
            textShadow: '0 2px 8px rgba(0,0,0,0.7)',
            position: 'relative',
            padding: '0 20px'
          }}>
            {currentText.signature}
          </div>
        </div>
        
        {/* Language selector */}
        <div style={{
          position: 'absolute',
          top: '20px',
          right: '20px',
          display: 'flex',
          gap: '10px',
          zIndex: 3
        }}>
          {Object.keys(testi).map(langCode => (
            <button 
              key={langCode}
              onClick={() => setLang(langCode)}
              style={{
                background: lang === langCode ? 'rgba(255,255,255,0.3)' : 'transparent',
                border: '1px solid white',
                color: 'white',
                padding: '5px 10px',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {langCode.toUpperCase()}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy5.js -----
'use client';

import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

export default function BrandPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';

  const testi = {
    it: `Gabriella Romeo nasce a Catania, culla di miti e luce mediterranea, dove il sole bacia il mare e la storia si intreccia con la magia. Ogni creazione è un pezzo unico, realizzato a mano con amore e dedizione, un’incantevole fusione di arte e cuore.

Il brand celebra una femminilità rara, autentica e potente, capace di illuminare chi la indossa con eleganza senza tempo. GR Gabriella Romeo è molto più di moda: è un viaggio poetico tra tradizione e innovazione, un sogno tangibile che cattura l’essenza vibrante e magica della Sicilia.

Questo è il mio stile.`,
    en: `Gabriella Romeo was born in Catania, cradle of myths and Mediterranean light, where the sun kisses the sea and history intertwines with magic. Each creation is a unique piece, handmade with love and dedication — a magical fusion of art and heart.

The brand celebrates a rare, authentic and powerful femininity, capable of illuminating the wearer with timeless elegance. GR Gabriella Romeo is more than fashion: it is a poetic journey between tradition and innovation, a tangible dream that captures the vibrant and magical essence of Sicily.

This is my style.`,
    fr: `Gabriella Romeo est née à Catane, berceau des mythes et de la lumière méditerranéenne, où le soleil embrasse la mer et où l’histoire se mêle à la magie. Chaque création est une pièce unique, réalisée à la main avec amour et dévouement, une fusion enchanteresse d’art et de cœur.

La marque célèbre une féminité rare, authentique et puissante, capable d’illuminer celle qui la porte avec une élégance intemporelle. GR Gabriella Romeo, c’est bien plus que de la mode : c’est un voyage poétique entre tradition et innovation, un rêve tangible qui capture l’essence vibrante et magique de la Sicile.

C’est mon style.`,
    es: `Gabriella Romeo nació en Catania, cuna de mitos y luz mediterránea, donde el sol besa el mar y la historia se entrelaza con la magia. Cada creación es una pieza única, hecha a mano con amor y dedicación, una fusión encantadora de arte y corazón.

La marca celebra una feminidad rara, auténtica y poderosa, capaz de iluminar a quien la lleva con una elegancia atemporal. GR Gabriella Romeo es mucho más que moda: es un viaje poético entre tradición e innovación, un sueño tangible que captura la esencia vibrante y mágica de Sicilia.

Este es mi estilo.`,
    de: `Gabriella Romeo wurde in Catania geboren, Wiege von Mythen und mediterranem Licht, wo die Sonne das Meer küsst und sich Geschichte mit Magie vermischt. Jede Kreation ist ein Unikat, von Hand gefertigt mit Liebe und Hingabe — eine zauberhafte Verschmelzung von Kunst und Herz.

Die Marke feiert eine seltene, authentische und kraftvolle Weiblichkeit, die ihre Trägerin mit zeitloser Eleganz erstrahlen lässt. GR Gabriella Romeo ist mehr als Mode: eine poetische Reise zwischen Tradition und Innovation, ein greifbarer Traum, der die lebendige, magische Essenz Siziliens einfängt.

Das ist mein Stil.`,
    ar: `وُلدت علامة Gabriella Romeo في كاتانيا، مهد الأساطير والنور المتوسطي، حيث تقبّل الشمس البحر وتتشابك فيهما الحكاية بالسحر. كلّ تصميم هو قطعة فريدة مصنوعة يدويًا بحب واهتمام، ومزيج ساحر بين الفن والقلب.

تحتفي العلامة بأنوثة نادرة وأصيلة وقوية، تضيء من ترتديها بأناقة خالدة. GR Gabriella Romeo هي أكثر من مجرّد موضة؛ إنها رحلة شعرية بين التقاليد والابتكار، حلم ملموس يلتقط جوهر صقلية النابض والساحر.

هذا هو أسلوبي.`,
    zh: `Gabriella Romeo 诞生于卡塔尼亚，这是一个充满神话与地中海阳光的地方，阳光亲吻着大海，历史与魔法交织在一起。每件作品都是独一无二的手工制作，融合了爱与奉献，是艺术与心灵的迷人结合。

这个品牌颂扬一种罕见、真实而强大的女性气质，使佩戴者散发出永恒的优雅。GR Gabriella Romeo 远不止于时尚：它是一场诗意的旅程，融合传统与创新，是一个捕捉西西里岛生动魔力的可触梦想。

这就是我的风格。`,
    ja: `Gabriella Romeo は、神話と地中海の光に満ちたカターニアで生まれました。太陽が海を照らし、歴史が魔法と交差する地です。すべての作品は、愛と献身を込めて手作業で作られたユニークな一点物であり、芸術と心の魅惑的な融合です。

ブランドは、まれで本物、そして力強い女性らしさを称賛し、それをまとう人を時を超えた優雅さで輝かせます。GR Gabriella Romeo はファッションを超えた存在。伝統と革新の間を旅する詩的な物語であり、西シチリアの活気ある魔法の本質を捉えた、触れられる夢です。

これが私のスタイルです。`
  };

  return (
    <main
      style={{
        backgroundImage: 'url("/data/images/carretti.png")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '2rem',
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        fontFamily: 'Michroma, sans-serif',
        position: 'relative',
      }}
    >
      {/* Semi-transparent overlay for better readability */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.2))',
        zIndex: 1,
      }} />
      
      <div
        style={{
          maxWidth: '800px',
          padding: '3rem 2rem',
          whiteSpace: 'pre-wrap',
          zIndex: 2,
          position: 'relative',
        }}
      >
        <p style={{ 
          fontSize: '1.4rem', 
          marginBottom: '3rem',
          lineHeight: '1.8',
          fontWeight: 300,
          letterSpacing: '0.5px',
          textShadow: '0 2px 10px rgba(0,0,0,0.5)'
        }}>
          {testi[lang] || testi.it}
        </p>
        
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          marginTop: '2rem',
          filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
        }}>
          <Image
            src="/data/images/firma-gabriella.png"
            alt="Firma Gabriella Romeo"
            width={280}
            height={120}
            style={{ 
              // This will make the black background transparent and signature white
              mixBlendMode: 'lighten'
            }}
          />
        </div>
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page.js -----
'use client';

import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

export default function BrandPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';

  const testi = {
    it: `Gabriella Romeo nasce a Catania, culla di miti e luce mediterranea, dove il sole bacia il mare e la storia si intreccia con la magia. Ogni creazione è un pezzo unico, realizzato a mano con amore e dedizione, un’incantevole fusione di arte e cuore.

Il brand celebra una femminilità rara, autentica e potente, capace di illuminare chi la indossa con eleganza senza tempo. GR Gabriella Romeo è molto più di moda: è un viaggio poetico tra tradizione e innovazione, un sogno tangibile che cattura l’essenza vibrante e magica della Sicilia.

Questo è il mio stile.`,
    en: `Gabriella Romeo was born in Catania, cradle of myths and Mediterranean light, where the sun kisses the sea and history intertwines with magic. Each creation is a unique piece, handmade with love and dedication — a magical fusion of art and heart.

The brand celebrates a rare, authentic and powerful femininity, capable of illuminating the wearer with timeless elegance. GR Gabriella Romeo is more than fashion: it is a poetic journey between tradition and innovation, a tangible dream that captures the vibrant and magical essence of Sicily.

This is my style.`,
    fr: `Gabriella Romeo est née à Catane, berceau des mythes et de la lumière méditerranéenne, où le soleil embrasse la mer et où l’histoire se mêle à la magie. Chaque création est une pièce unique, réalisée à la main avec amour et dévouement, une fusion enchanteresse d’art et de cœur.

La marque célèbre une féminité rare, authentique et puissante, capable d’illuminer celle qui la porte avec une élégance intemporelle. GR Gabriella Romeo, c’est bien plus que de la mode : c’est un voyage poétique entre tradition et innovation, un rêve tangible qui capture l’essence vibrante et magique de la Sicile.

C’est mon style.`,
    es: `Gabriella Romeo nació en Catania, cuna de mitos y luz mediterránea, donde el sol besa el mar y la historia se entrelaza con la magia. Cada creación es una pieza única, hecha a mano con amor y dedicación, una fusión encantadora de arte y corazón.

La marca celebra una feminidad rara, auténtica y poderosa, capaz de iluminar a quien la lleva con una elegancia atemporal. GR Gabriella Romeo es mucho más que moda: es un viaje poético entre tradición e innovación, un sueño tangible que captura la esencia vibrante y mágica de Sicilia.

Este es mi estilo.`,
    de: `Gabriella Romeo wurde in Catania geboren, Wiege von Mythen und mediterranem Licht, wo die Sonne das Meer küsst und sich Geschichte mit Magie vermischt. Jede Kreation ist ein Unikat, von Hand gefertigt mit Liebe und Hingabe — eine zauberhafte Verschmelzung von Kunst und Herz.

Die Marke feiert eine seltene, authentische und kraftvolle Weiblichkeit, die ihre Trägerin mit zeitloser Eleganz erstrahlen lässt. GR Gabriella Romeo ist mehr als Mode: eine poetische Reise zwischen Tradition und Innovation, ein greifbarer Traum, der die lebendige, magische Essenz Siziliens einfängt.

Das ist mein Stil.`,
    ar: `وُلدت علامة Gabriella Romeo في كاتانيا، مهد الأساطير والنور المتوسطي، حيث تقبّل الشمس البحر وتتشابك فيهما الحكاية بالسحر. كلّ تصميم هو قطعة فريدة مصنوعة يدويًا بحب واهتمام، ومزيج ساحر بين الفن والقلب.

تحتفي العلامة بأنوثة نادرة وأصيلة وقوية، تضيء من ترتديها بأناقة خالدة. GR Gabriella Romeo هي أكثر من مجرّد موضة؛ إنها رحلة شعرية بين التقاليد والابتكار، حلم ملموس يلتقط جوهر صقلية النابض والساحر.

هذا هو أسلوبي.`,
    zh: `Gabriella Romeo 诞生于卡塔尼亚，这是一个充满神话与地中海阳光的地方，阳光亲吻着大海，历史与魔法交织在一起。每件作品都是独一无二的手工制作，融合了爱与奉献，是艺术与心灵的迷人结合。

这个品牌颂扬一种罕见、真实而强大的女性气质，使佩戴者散发出永恒的优雅。GR Gabriella Romeo 远不止于时尚：它是一场诗意的旅程，融合传统与创新，是一个捕捉西西里岛生动魔力的可触梦想。

这就是我的风格。`,
    ja: `Gabriella Romeo は、神話と地中海の光に満ちたカターニアで生まれました。太陽が海を照らし、歴史が魔法と交差する地です。すべての作品は、愛と献身を込めて手作業で作られたユニークな一点物であり、芸術と心の魅惑的な融合です。

ブランドは、まれで本物、そして力強い女性らしさを称賛し、それをまとう人を時を超えた優雅さで輝かせます。GR Gabriella Romeo はファッションを超えた存在。伝統と革新の間を旅する詩的な物語であり、西シチリアの活気ある魔法の本質を捉えた、触れられる夢です。

これが私のスタイルです。`
  };

  return (
    <main
      style={{
        backgroundImage: 'url("/data/images/carretti.png")',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
        padding: '2rem',
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        fontFamily: 'Michroma, sans-serif',
        position: 'relative',
      }}
    >
      {/* Semi-transparent overlay for better readability */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.2))',
        zIndex: 1,
      }} />
      
      <div
        style={{
          maxWidth: '800px',
          padding: '3rem 2rem',
          whiteSpace: 'pre-wrap',
          zIndex: 2,
          position: 'relative',
        }}
      >
        <p style={{ 
          fontSize: '1.4rem', 
          marginBottom: '0.5rem', // Reduced bottom margin
          lineHeight: '1.8',
          fontWeight: 300,
          letterSpacing: '0.5px',
          textShadow: '0 2px 10px rgba(0,0,0,0.5)'
        }}>
          {testi[lang] || testi.it}
        </p>
        
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          marginTop: '0.5rem', // Reduced top margin
          filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
        }}>
          <Image
            src="/data/images/firma-gabriella.png"
            alt="Firma Gabriella Romeo"
            width={280}
            height={120}
            style={{ 
              mixBlendMode: 'lighten' // Makes black background transparent
            }}
          />
        </div>
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy12.js -----
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [utente, setUtente] = useState(null);
  const [carrello, setCarrello] = useState([]);

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);

  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [cap, setCap] = useState('');
  const [paese, setPaese] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');

  const testi = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto è necessario registrarsi o fare il login.',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi'
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase, please register or log in.',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove'
    }
  }[lang];
  useEffect(() => {
    const checkLogin = async () => {
      const { data: sessionData } = await supabase.auth.getSession();
      if (sessionData?.session?.user) {
        setUtente(sessionData.session.user);

        const { data: profilo } = await supabase
          .from('clienti')
          .select('*')
          .eq('email', sessionData.session.user.email)
          .single();

        if (profilo) {
          setNome(profilo.nome || '');
          setCognome(profilo.cognome || '');
          setIndirizzo(profilo.indirizzo || '');
          setCitta(profilo.citta || '');
          setCap(profilo.codice_postale || '');
          setPaese(profilo.paese || '');
          setEmail(profilo.email || '');
          setTelefono1(profilo.telefono1 || '');
          setTelefono2(profilo.telefono2 || '');
        }
      }
    };

    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));

    checkLogin();
  }, []);

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      router.push(`/checkout?lang=${lang}`);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);

    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      setUtente(sessionData.session.user);
      tracciaAccesso(email);
      registraCliente(email);
      setIsRegistrazione(false);
      setErrore('');
      router.push(`/checkout?lang=${lang}`);
    }
  };

  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({ provider: 'google' });
    if (!error) setTimeout(() => router.push(`/checkout?lang=${lang}`), 1000);
  };

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({ provider: 'apple' });
    if (!error) setTimeout(() => router.push(`/checkout?lang=${lang}`), 1000);
  };

  const totale = carrello.reduce((sum, p) => sum + (parseFloat(p.prezzo || 0) * (p.quantita || 1)), 0).toFixed(1);
  const handleSubmit = () => {
    if (!nome || !cognome || !indirizzo || !citta || !cap || !paese || !email) {
      alert(`${testi.nome}, ${testi.cognome}, ${testi.indirizzo}, ${testi.citta}, ${testi.cap}, ${testi.paese}, ${testi.email} ${lang === 'it' ? 'sono obbligatori.' : 'are required.'}`);
      return;
    }
    const datiCliente = { nome, cognome, indirizzo, citta, codice_postale: cap, paese, email, telefono1, telefono2 };
    localStorage.setItem('cliente', JSON.stringify(datiCliente));
    router.push(`/pagamento?lang=${lang}`);
  };

  return (
    <main style={{ padding: '1rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {!utente ? (
        <div style={{ maxWidth: '500px', margin: '0 auto', textAlign: 'center' }}>
          <p>{testi.loginNecessario}</p>
          <input placeholder={testi.email} value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
          <input type="password" placeholder={testi.password} value={password} onChange={e => setPassword(e.target.value)} style={inputStyle} />
          {isRegistrazione && (
            <>
              <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />
              <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
              <input placeholder={testi.citta} value={citta} onChange={e => setCitta(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
              <input placeholder={testi.paese} value={paese} onChange={e => setPaese(e.target.value)} style={inputStyle} />
            </>
          )}
          <button onClick={isRegistrazione ? registraUtente : loginEmail} style={buttonStyle}>
            {isRegistrazione ? testi.registrati : testi.login}
          </button>
          <button onClick={() => setIsRegistrazione(!isRegistrazione)} style={toggleStyle}>
            {isRegistrazione ? testi.login : testi.crea}
          </button>

          <div onClick={loginGoogle} style={socialStyle}>
            <img src="/icons/google.svg" alt="Google" style={{ width: '20px' }} />
            <span style={{ marginLeft: '8px' }}>LOGIN CON GOOGLE</span>
          </div>

          <div onClick={loginApple} style={socialStyle}>
            <img src="/icons/apple.svg" alt="Apple" style={{ width: '20px' }} />
            <span style={{ marginLeft: '8px' }}>LOGIN CON APPLE</span>
          </div>

          {errore && <p style={{ color: 'red' }}>{errore}</p>}
        </div>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => {
                  const nuovo = [...carrello];
                  nuovo.splice(i, 1);
                  setCarrello(nuovo);
                  localStorage.setItem('carrello', JSON.stringify(nuovo));
                }} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.citta} value={citta} onChange={e => setCitta(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.paese} value={paese} onChange={e => setPaese(e.target.value)} style={inputStyle} />
            <input placeholder={testi.email} value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem' }}>
              {testi.totale} {'\u20AC'}{totale}
            </p>

            <button onClick={handleSubmit} style={pagaStyle}>{testi.paga}</button>
            <button onClick={() => router.back()} style={indietroStyle}>{testi.back}</button>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  width: '100%',
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold',
  marginBottom: '0.5rem'
};

const toggleStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px',
  marginBottom: '1rem'
};

const socialStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: 'white',
  border: '1px solid black',
  borderRadius: '5px',
  marginBottom: '0.5rem',
  cursor: 'pointer',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  gap: '0.5rem',
  fontWeight: 'bold',
  fontSize: '0.9rem'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  marginBottom: '1rem'
};

const indietroStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#444',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1rem',
  marginTop: '1rem'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy13.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setIndirizzo(profilo.indirizzo || '');
        setCitta(profilo.citta || '');
        setCap(profilo.codice_postale || '');
        setPaese(profilo.paese || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };
  
  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };
  const testi = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto è necessario registrarsi o fare il login.',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi'
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase, please register or log in.',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove'
    }
  }[lang];

  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{(testi?.titolo ?? testi?.it?.titolo ?? 'Riepilogo Ordine')}</h1>

      {!utente ? (
        <div style={{ maxWidth: '500px', margin: '0 auto', textAlign: 'center' }}>
          <p>{testi.loginNecessario}</p>
          <input placeholder={testi.email} value={email} onChange={(e) => setEmail(e.target.value)} style={inputStyle} />
          <input type="password" placeholder={testi.password} value={password} onChange={(e) => setPassword(e.target.value)} style={inputStyle} />
          {isRegistrazione && (
            <>
              <input placeholder={testi.nome} value={nome} onChange={(e) => setNome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cognome} value={cognome} onChange={(e) => setCognome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono1} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono2} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} style={inputStyle} />
              <input placeholder={testi.indirizzo} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} style={inputStyle} />
              <input placeholder={testi.citta} value={citta} onChange={(e) => setCitta(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cap} value={cap} onChange={(e) => setCap(e.target.value)} style={inputStyle} />
              <input placeholder={testi.paese} value={paese} onChange={(e) => setPaese(e.target.value)} style={inputStyle} />
            </>
          )}
          <button
            onClick={isRegistrazione ? registraUtente : loginEmail}
            style={buttonStyle}
          >
            {isRegistrazione ? testi.registrati : testi.login}
          </button>
          <button onClick={() => setIsRegistrazione(!isRegistrazione)} style={toggleStyle}>
            {isRegistrazione ? testi.login : testi.crea}
          </button>
          <button
            onClick={loginGoogle}
            className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase text-black"
          >  
            <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
            {lang === 'it' ? 'Login con Google' : 'Login with Google'}
          </button>

          <button
            onClick={loginApple}
            className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase text-black"
          >
            <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
            {lang === 'it' ? 'Login con Apple' : 'Login with Apple'}
          </button>

          {errore && <p style={{ color: 'red' }}>{errore}</p>}
        </div>
      ) : (
        <>
          {carrello.length === 0 ? (
            <>
              <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
              <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
                <button onClick={() => router.back()} style={backButtonStyle}>
                  {testi.back}
                </button>
              </div>
            </>
          ) : (
            <>
              <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
                {carrello.map((p, i) => (
                  <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                    {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                    <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                      {testi.rimuovi}
                    </button>
                  </li>
                ))}
              </ul>

              <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
                <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
                <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
                <input placeholder={testi.citta} value={citta} onChange={e => setCitta(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
                <input placeholder={testi.paese} value={paese} onChange={e => setPaese(e.target.value)} style={inputStyle} />
                <input placeholder={testi.email} value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

                <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
                  {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
                </p>

                <button onClick={() => router.push(`/pagamento?lang=${lang}`)} style={pagaStyle}>
                  {testi.paga}
                </button>

                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                  <button onClick={() => router.back()} style={backButtonStyle}>
                    {testi.back}
                  </button>
                </div>
              </div>
            </>
          )}
        </>
      )}
    </main>
  );
}

// STILI FINALI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  width: '100%',
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold',
  marginBottom: '0.5rem'
};

const toggleStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px',
  marginBottom: '1rem'
};

const socialStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: 'white',
  border: '1px solid black',
  borderRadius: '5px',
  marginBottom: '0.5rem',
  cursor: 'pointer',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  gap: '0.5rem',
  fontWeight: 'bold'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  marginBottom: '1rem'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy14.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0]; // Per gestire varianti linguistiche

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };
  
  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const translations = {
    selectCountry: {
      it: 'Seleziona paese',
      en: 'Select country',
      fr: 'Sélectionnez un pays',
      de: 'Land auswählen',
      es: 'Seleccionar país',
      zh: '选择国家',
      ar: 'حدد الدولة',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona città',
      en: 'Select city',
      fr: 'Sélectionnez une ville',
      de: 'Stadt auswählen',
      es: 'Seleccionar ciudad',
      zh: '选择城市',
      ar: 'حدد المدينة',
      ja: '都市を選択'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      zh: '其他',
      ar: 'آخر',
      ja: 'その他'
    },
    enterCity: {
      it: 'Inserisci città',
      en: 'Enter city',
      fr: 'Entrez une ville',
      de: 'Stadt eingeben',
      es: 'Ingrese ciudad',
      zh: '输入城市',
      ar: 'أدخل المدينة',
      ja: '都市を入力'
    }
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto è necessario registrarsi o fare il login.',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi'
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase, please register or log in.',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove'
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, veuillez vous inscrire ou vous connecter.',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer'
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte registrieren Sie sich oder melden Sie sich an, um den Kauf abzuschließen.',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'Email',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen'
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, regístrate o inicia sesión.',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      back: 'Volver',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar'
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '您的购物车为空。',
      loginNecessario: '请注册或登录以完成购买。',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 移除'
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'يرجى التسجيل أو تسجيل الدخول لإتمام الشراء.',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'سجل',
      paga: 'ادفع الآن',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ حذف'
    },
    ja: {
      titolo: '注文の概要',
      vuoto: 'カートは空です。',
      loginNecessario: '購入を完了するには、登録またはログインしてください。',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除'
    }
  };

  const testi = testiTutti[lang] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {!utente ? (
        <div style={{ maxWidth: '500px', margin: '0 auto', textAlign: 'center' }}>
          <p>{testi.loginNecessario}</p>
          <input placeholder={testi.email} value={email} onChange={(e) => setEmail(e.target.value)} style={inputStyle} />
          <input type="password" placeholder={testi.password} value={password} onChange={(e) => setPassword(e.target.value)} style={inputStyle} />
          {isRegistrazione && (
            <>
              <input placeholder={testi.nome} value={nome} onChange={(e) => setNome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cognome} value={cognome} onChange={(e) => setCognome(e.target.value)} style={inputStyle} />
              
              <select
                value={paese}
                onChange={(e) => setPaese(e.target.value)}
                style={{ ...inputStyle, color: 'black' }}
              >
                <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
                {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                  <option key={nomePaese} value={nomePaese}>
                    {nomePaese}
                  </option>
                ))}
              </select>

              {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                <>
                  <select
                    value={cittaSelezionata}
                    onChange={(e) => {
                      const value = e.target.value;
                      setCittaSelezionata(value);
                      if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                      else setCitta('');
                    }}
                    style={{ ...inputStyle, color: 'black' }}
                  >
                    <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                    {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                      <option key={city} value={city}>{city}</option>
                    ))}
                    <option value={translations.other[langPulito] || 'Other'}>
                      {translations.other[langPulito] || 'Other'}
                    </option>
                  </select>
                  {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                    <input
                      placeholder={translations.enterCity[langPulito] || 'Enter city'}
                      value={citta}
                      onChange={(e) => setCitta(e.target.value)}
                      style={inputStyle}
                    />
                  )}
                </>
              ) : (
                <input
                  placeholder={translations.enterCity[langPulito] || 'Enter city'}
                  value={citta}
                  onChange={(e) => setCitta(e.target.value)}
                  style={inputStyle}
                />
              )}

              <input placeholder={testi.indirizzo} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cap} value={cap} onChange={(e) => setCap(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono1} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono2} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} style={inputStyle} />
            </>
          )}
          <button
            onClick={isRegistrazione ? registraUtente : loginEmail}
            style={buttonStyle}
          >
            {isRegistrazione ? testi.registrati : testi.login}
          </button>
          <button onClick={() => setIsRegistrazione(!isRegistrazione)} style={toggleStyle}>
            {isRegistrazione ? testi.login : testi.crea}
          </button>
          <button
            onClick={loginGoogle}
            style={socialStyle}
          >  
            <img src="/icons/google.svg" style={{ width: '20px', height: '20px' }} alt="Google" />
            {lang === 'it' ? 'Login con Google' : 'Login with Google'}
          </button>

          <button
            onClick={loginApple}
            style={socialStyle}
          >
            <img src="/icons/apple.svg" style={{ width: '20px', height: '20px' }} alt="Apple" />
            {lang === 'it' ? 'Login con Apple' : 'Login with Apple'}
          </button>

          {errore && <p style={{ color: 'red' }}>{errore}</p>}
        </div>
      ) : (
        <>
          {carrello.length === 0 ? (
            <>
              <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
              <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
                <button onClick={() => router.back()} style={backButtonStyle}>
                  {testi.back}
                </button>
              </div>
            </>
          ) : (
            <>
              <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
                {carrello.map((p, i) => (
                  <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                    {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                    <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                      {testi.rimuovi}
                    </button>
                  </li>
                ))}
              </ul>

              <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
                <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
                
                <select
                  value={paese}
                  onChange={(e) => setPaese(e.target.value)}
                  style={{ ...inputStyle, color: 'black' }}
                >
                  <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
                  {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                    <option key={nomePaese} value={nomePaese}>
                      {nomePaese}
                    </option>
                  ))}
                </select>

                {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                  <>
                    <select
                      value={cittaSelezionata}
                      onChange={(e) => {
                        const value = e.target.value;
                        setCittaSelezionata(value);
                        if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                        else setCitta('');
                      }}
                      style={{ ...inputStyle, color: 'black' }}
                    >
                      <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                      {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                        <option key={city} value={city}>{city}</option>
                      ))}
                      <option value={translations.other[langPulito] || 'Other'}>
                        {translations.other[langPulito] || 'Other'}
                      </option>
                    </select>
                    {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                      <input
                        placeholder={translations.enterCity[langPulito] || 'Enter city'}
                        value={citta}
                        onChange={(e) => setCitta(e.target.value)}
                        style={inputStyle}
                      />
                    )}
                  </>
                ) : (
                  <input
                    placeholder={translations.enterCity[langPulito] || 'Enter city'}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    style={inputStyle}
                  />
                )}

                <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
                <input placeholder={testi.email} value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

                <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
                  {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
                </p>

                <button onClick={() => router.push(`/pagamento?lang=${lang}`)} style={pagaStyle}>
                  {testi.paga}
                </button>

                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                  <button onClick={() => router.back()} style={backButtonStyle}>
                    {testi.back}
                  </button>
                </div>
              </div>
            </>
          )}
        </>
      )}
    </main>
  );
}

// STILI FINALI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  width: '100%',
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold',
  marginBottom: '0.5rem'
};

const toggleStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px',
  marginBottom: '1rem'
};

const socialStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: 'white',
  border: '1px solid black',
  borderRadius: '5px',
  marginBottom: '0.5rem',
  cursor: 'pointer',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  gap: '0.5rem',
  fontWeight: 'bold'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  marginBottom: '1rem'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy15.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0]; // Per gestire varianti linguistiche

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };
  
  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const translations = {
    selectCountry: {
      it: 'Seleziona paese',
      en: 'Select country',
      fr: 'Sélectionnez un pays',
      de: 'Land auswählen',
      es: 'Seleccionar país',
      zh: '选择国家',
      ar: 'حدد الدولة',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona città',
      en: 'Select city',
      fr: 'Sélectionnez une ville',
      de: 'Stadt auswählen',
      es: 'Seleccionar ciudad',
      zh: '选择城市',
      ar: 'حدد المدينة',
      ja: '都市を選択'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      zh: '其他',
      ar: 'آخر',
      ja: 'その他'
    },
    enterCity: {
      it: 'Inserisci città',
      en: 'Enter city',
      fr: 'Entrez une ville',
      de: 'Stadt eingeben',
      es: 'Ingrese ciudad',
      zh: '输入城市',
      ar: 'أدخل المدينة',
      ja: '都市を入力'
    }
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto è necessario registrarsi o fare il login.',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase, please register or log in.',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, veuillez vous inscrire ou vous connecter.',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte registrieren Sie sich oder melden Sie sich an, um den Kauf abzuschließen.',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'Email',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Anmelden mit Google',
      apple: 'Anmelden mit Apple',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, regístrate o inicia sesión.',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      back: 'Volver',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión Google',
      apple: 'Iniciar sesión Apple',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '您的购物车为空。',
      loginNecessario: '请注册或登录以完成购买。',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 移除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'يرجى التسجيل أو تسجيل الدخول لإتمام الشراء.',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'سجل',
      paga: 'ادفع الآن',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ حذف',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
    },
    ja: {
      titolo: '注文の概要',
      vuoto: 'カートは空です。',
      loginNecessario: '購入を完了するには、登録またはログインしてください。',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
    },
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {!utente ? (
        <div style={{ maxWidth: '500px', margin: '0 auto', textAlign: 'center' }}>
          <p>{testi.loginNecessario}</p>
          <input placeholder={testi.email} value={email} onChange={(e) => setEmail(e.target.value)} style={inputStyle} />
          <input type="password" placeholder={testi.password} value={password} onChange={(e) => setPassword(e.target.value)} style={inputStyle} />
          {isRegistrazione && (
            <>
              <input placeholder={testi.nome} value={nome} onChange={(e) => setNome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cognome} value={cognome} onChange={(e) => setCognome(e.target.value)} style={inputStyle} />
              
              <select
                value={paese}
                onChange={(e) => setPaese(e.target.value)}
                style={{ ...inputStyle, color: 'black' }}
              >
                <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
                {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                  <option key={nomePaese} value={nomePaese}>
                    {nomePaese}
                  </option>
                ))}
              </select>

              {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                <>
                  <select
                    value={cittaSelezionata}
                    onChange={(e) => {
                      const value = e.target.value;
                      setCittaSelezionata(value);
                      if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                      else setCitta('');
                    }}
                    style={{ ...inputStyle, color: 'black' }}
                  >
                    <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                    {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                      <option key={city} value={city}>{city}</option>
                    ))}
                    <option value={translations.other[langPulito] || 'Other'}>
                      {translations.other[langPulito] || 'Other'}
                    </option>
                  </select>
                  {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                    <input
                      placeholder={translations.enterCity[langPulito] || 'Enter city'}
                      value={citta}
                      onChange={(e) => setCitta(e.target.value)}
                      style={inputStyle}
                    />
                  )}
                </>
              ) : (
                <input
                  placeholder={translations.enterCity[langPulito] || 'Enter city'}
                  value={citta}
                  onChange={(e) => setCitta(e.target.value)}
                  style={inputStyle}
                />
              )}

              <input placeholder={testi.indirizzo} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cap} value={cap} onChange={(e) => setCap(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono1} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono2} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} style={inputStyle} />
            </>
          )}
          <button
            onClick={isRegistrazione ? registraUtente : loginEmail}
            style={buttonStyle}
          >
            {isRegistrazione ? testi.registrati : testi.login}
          </button>
          <button onClick={() => setIsRegistrazione(!isRegistrazione)} style={toggleStyle}>
            {isRegistrazione ? testi.login : testi.crea}
          </button>
<button
  onClick={loginGoogle}
  style={socialStyle}
>  
  <img src="/icons/google.svg" style={{ width: '20px', height: '20px' }} alt="Google" />
  {testi?.google ?? 'Login'}
</button>

<button
  onClick={loginApple}
  style={socialStyle}
>
  <img src="/icons/apple.svg" style={{ width: '20px', height: '20px' }} alt="Apple" />
  {testi?.apple ?? 'Login'}
</button>

          {errore && <p style={{ color: 'red' }}>{errore}</p>}
        </div>
      ) : (
        <>
          {carrello.length === 0 ? (
            <>
              <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
              <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
                <button onClick={() => router.back()} style={backButtonStyle}>
                  {testi.back}
                </button>
              </div>
            </>
          ) : (
            <>
              <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
                {carrello.map((p, i) => (
                  <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                    {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                    <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                      {testi.rimuovi}
                    </button>
                  </li>
                ))}
              </ul>

              <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
                <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
                
                <select
                  value={paese}
                  onChange={(e) => setPaese(e.target.value)}
                  style={{ ...inputStyle, color: 'black' }}
                >
                  <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
                  {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                    <option key={nomePaese} value={nomePaese}>
                      {nomePaese}
                    </option>
                  ))}
                </select>

                {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                  <>
                    <select
                      value={cittaSelezionata}
                      onChange={(e) => {
                        const value = e.target.value;
                        setCittaSelezionata(value);
                        if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                        else setCitta('');
                      }}
                      style={{ ...inputStyle, color: 'black' }}
                    >
                      <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                      {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                        <option key={city} value={city}>{city}</option>
                      ))}
                      <option value={translations.other[langPulito] || 'Other'}>
                        {translations.other[langPulito] || 'Other'}
                      </option>
                    </select>
                    {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                      <input
                        placeholder={translations.enterCity[langPulito] || 'Enter city'}
                        value={citta}
                        onChange={(e) => setCitta(e.target.value)}
                        style={inputStyle}
                      />
                    )}
                  </>
                ) : (
                  <input
                    placeholder={translations.enterCity[langPulito] || 'Enter city'}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    style={inputStyle}
                  />
                )}

                <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
                <input placeholder={testi.email} value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

                <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
                  {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
                </p>

                <button onClick={() => router.push(`/pagamento?lang=${lang}`)} style={pagaStyle}>
                  {testi.paga}
                </button>

                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                  <button onClick={() => router.back()} style={backButtonStyle}>
                    {testi.back}
                  </button>
                </div>
              </div>
            </>
          )}
        </>
      )}
    </main>
  );
}

// STILI FINALI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  width: '100%',
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold',
  marginBottom: '0.5rem'
};

const toggleStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px',
  marginBottom: '1rem'
};

const socialStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: 'white',
  border: '1px solid black',
  borderRadius: '5px',
  marginBottom: '0.5rem',
  cursor: 'pointer',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  gap: '0.5rem',
  fontWeight: 'bold'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  marginBottom: '1rem'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy16.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0];

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (!error) tracciaAccesso(email);
  };
  
  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const translations = {
    selectCountry: {
      it: 'Seleziona paese',
      en: 'Select country',
      fr: 'Sélectionnez un pays',
      de: 'Land auswählen',
      es: 'Seleccionar país',
      zh: '选择国家',
      ar: 'حدد الدولة',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona città',
      en: 'Select city',
      fr: 'Sélectionnez une ville',
      de: 'Stadt auswählen',
      es: 'Seleccionar ciudad',
      zh: '选择城市',
      ar: 'حدد المدينة',
      ja: '都市を選択'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      zh: '其他',
      ar: 'آخر',
      ja: 'その他'
    },
    enterCity: {
      it: 'Inserisci città',
      en: 'Enter city',
      fr: 'Entrez une ville',
      de: 'Stadt eingeben',
      es: 'Ingrese ciudad',
      zh: '输入城市',
      ar: 'أدخل المدينة',
      ja: '都市を入力'
    }
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto è necessario registrarsi o fare il login.',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase, please register or log in.',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, veuillez vous inscrire ou vous connecter.',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte registrieren Sie sich oder melden Sie sich an, um den Kauf abzuschließen.',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'Email',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Anmelden mit Google',
      apple: 'Anmelden mit Apple',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, regístrate o inicia sesión.',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      back: 'Volver',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión Google',
      apple: 'Iniciar sesión Apple',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '您的购物车为空。',
      loginNecessario: '请注册或登录以完成购买。',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 移除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'يرجى التسجيل أو تسجيل الدخول لإتمام الشراء.',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'سجل',
      paga: 'ادفع الآن',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ حذف',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
    },
    ja: {
      titolo: '注文の概要',
      vuoto: 'カートは空です。',
      loginNecessario: '購入を完了するには、登録またはログインしてください。',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
    },
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {!utente ? (
        <div style={{ maxWidth: '500px', margin: '0 auto', textAlign: 'center' }}>
          <p>{testi.loginNecessario}</p>
          <input placeholder={testi.email} value={email} onChange={(e) => setEmail(e.target.value)} style={inputStyle} />
          <input type="password" placeholder={testi.password} value={password} onChange={(e) => setPassword(e.target.value)} style={inputStyle} />
          {isRegistrazione && (
            <>
              <input placeholder={testi.nome} value={nome} onChange={(e) => setNome(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cognome} value={cognome} onChange={(e) => setCognome(e.target.value)} style={inputStyle} />
              
              <select
                value={paese}
                onChange={(e) => setPaese(e.target.value)}
                style={{ ...inputStyle, color: 'black' }}
              >
                <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
                {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                  <option key={nomePaese} value={nomePaese}>
                    {nomePaese}
                  </option>
                ))}
              </select>

              {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                <>
                  <select
                    value={cittaSelezionata}
                    onChange={(e) => {
                      const value = e.target.value;
                      setCittaSelezionata(value);
                      if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                      else setCitta('');
                    }}
                    style={{ ...inputStyle, color: 'black' }}
                  >
                    <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                    {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                      <option key={city} value={city}>{city}</option>
                    ))}
                    <option value={translations.other[langPulito] || 'Other'}>
                      {translations.other[langPulito] || 'Other'}
                    </option>
                  </select>
                  {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                    <input
                      placeholder={translations.enterCity[langPulito] || 'Enter city'}
                      value={citta}
                      onChange={(e) => setCitta(e.target.value)}
                      style={inputStyle}
                    />
                  )}
                </>
              ) : (
                <input
                  placeholder={translations.enterCity[langPulito] || 'Enter city'}
                  value={citta}
                  onChange={(e) => setCitta(e.target.value)}
                  style={inputStyle}
                />
              )}

              <input placeholder={testi.indirizzo} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} style={inputStyle} />
              <input placeholder={testi.cap} value={cap} onChange={(e) => setCap(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono1} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} style={inputStyle} />
              <input placeholder={testi.telefono2} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} style={inputStyle} />
            </>
          )}
          <button
            onClick={isRegistrazione ? registraUtente : loginEmail}
            style={buttonStyle}
          >
            {isRegistrazione ? testi.registrati : testi.login}
          </button>
          <button onClick={() => setIsRegistrazione(!isRegistrazione)} style={toggleStyle}>
            {isRegistrazione ? testi.login : testi.crea}
          </button>

          <div style={{ margin: '1rem 0', display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
            <button 
              onClick={loginGoogle} 
              style={{ 
                ...socialStyle,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '0.5rem'
              }}
            >
              <img src="/icons/google.svg" style={{ width: '20px', height: '20px' }} alt="Google" />
              <span>{testi.google}</span>
            </button>

            <button 
              onClick={loginApple} 
              style={{ 
                ...socialStyle,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '0.5rem'
              }}
            >
              <img src="/icons/apple.svg" style={{ width: '20px', height: '20px' }} alt="Apple" />
              <span>{testi.apple}</span>
            </button>
          </div>

          {errore && <p style={{ color: 'red' }}>{errore}</p>}
        </div>
      ) : (
        <>
          {carrello.length === 0 ? (
            <>
              <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
              <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
                <button onClick={() => router.back()} style={backButtonStyle}>
                  {testi.back}
                </button>
              </div>
            </>
          ) : (
            <>
              <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
                {carrello.map((p, i) => (
                  <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                    {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                    <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                      {testi.rimuovi}
                    </button>
                  </li>
                ))}
              </ul>

              <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
                <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
                
                <select
                  value={paese}
                  onChange={(e) => setPaese(e.target.value)}
                  style={{ ...inputStyle, color: 'black' }}
                >
                  <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
                  {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                    <option key={nomePaese} value={nomePaese}>
                      {nomePaese}
                    </option>
                  ))}
                </select>

                {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                  <>
                    <select
                      value={cittaSelezionata}
                      onChange={(e) => {
                        const value = e.target.value;
                        setCittaSelezionata(value);
                        if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                        else setCitta('');
                      }}
                      style={{ ...inputStyle, color: 'black' }}
                    >
                      <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                      {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                        <option key={city} value={city}>{city}</option>
                      ))}
                      <option value={translations.other[langPulito] || 'Other'}>
                        {translations.other[langPulito] || 'Other'}
                      </option>
                    </select>
                    {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                      <input
                        placeholder={translations.enterCity[langPulito] || 'Enter city'}
                        value={citta}
                        onChange={(e) => setCitta(e.target.value)}
                        style={inputStyle}
                      />
                    )}
                  </>
                ) : (
                  <input
                    placeholder={translations.enterCity[langPulito] || 'Enter city'}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    style={inputStyle}
                  />
                )}

                <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
                <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
                <input placeholder={testi.email} value={email} onChange={e => setEmail(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
                <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

                <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
                  {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
                </p>

                <button onClick={() => router.push(`/pagamento?lang=${lang}`)} style={pagaStyle}>
                  {testi.paga}
                </button>

                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
                  <button onClick={() => router.back()} style={backButtonStyle}>
                    {testi.back}
                  </button>
                </div>
              </div>
            </>
          )}
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  width: '100%',
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold',
  marginBottom: '0.5rem'
};

const toggleStyle = {
  width: '100%',
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px',
  marginBottom: '1rem'
};

const socialStyle = {
  width: '100%',
  padding: '0.75rem',
  backgroundColor: 'white',
  color: 'black',
  border: '1px solid #ddd',
  borderRadius: '5px',
  cursor: 'pointer',
  fontWeight: 'bold',
  fontSize: '0.9rem'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  marginBottom: '1rem'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy17.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0];

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const handleCheckoutDiretto = async () => {
    // Validazione campi
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }
    
    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      // 1. Crea/aggiorna cliente
      const { data: cliente, error } = await supabase
        .from('clienti')
        .upsert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true
        }, { onConflict: 'email' })
        .select()
        .single();

      if (error) throw error;

      // 2. Salva dati per pagamento
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      // 3. Reindirizza a pagamento
      router.push(`/pagamento?lang=${lang}`);
      
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore(testi.inserisciEmailPassword);
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const translations = {
    selectCountry: {
      it: 'Seleziona paese',
      en: 'Select country',
      fr: 'Sélectionnez un pays',
      de: 'Land auswählen',
      es: 'Seleccionar país',
      zh: '选择国家',
      ar: 'حدد الدولة',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona città',
      en: 'Select city',
      fr: 'Sélectionnez une ville',
      de: 'Stadt auswählen',
      es: 'Seleccionar ciudad',
      zh: '选择城市',
      ar: 'حدد المدينة',
      ja: '都市を選択'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      zh: '其他',
      ar: 'آخر',
      ja: 'その他'
    },
    enterCity: {
      it: 'Inserisci città',
      en: 'Enter city',
      fr: 'Entrez une ville',
      de: 'Stadt eingeben',
      es: 'Ingrese ciudad',
      zh: '输入城市',
      ar: 'أدخل المدينة',
      ja: '都市を入力'
    }
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: '
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: '
    }
    // ... altre lingue (mantenere la stessa struttura)
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>
            
            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input 
                  placeholder={testi.email} 
                  value={email} 
                  onChange={(e) => setEmail(e.target.value)} 
                  style={inputStyle} 
                />
                {isRegistrazione && (
                  <input 
                    type="password" 
                    placeholder={testi.password} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    style={inputStyle} 
                  />
                )}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                  >
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button 
                    onClick={() => setIsRegistrazione(!isRegistrazione)} 
                    style={toggleStyle}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            
            <select
              value={paese}
              onChange={(e) => setPaese(e.target.value)}
              style={{ ...inputStyle, color: 'black' }}
            >
              <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
              {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                <option key={nomePaese} value={nomePaese}>
                  {nomePaese}
                </option>
              ))}
            </select>

            {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
              <>
                <select
                  value={cittaSelezionata}
                  onChange={(e) => {
                    const value = e.target.value;
                    setCittaSelezionata(value);
                    if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                    else setCitta('');
                  }}
                  style={{ ...inputStyle, color: 'black' }}
                >
                  <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                  {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                    <option key={city} value={city}>{city}</option>
                  ))}
                  <option value={translations.other[langPulito] || 'Other'}>
                    {translations.other[langPulito] || 'Other'}
                  </option>
                </select>
                {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                  <input
                    placeholder={translations.enterCity[langPulito] || 'Enter city'}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    style={inputStyle}
                  />
                )}
              </>
            ) : (
              <input
                placeholder={translations.enterCity[langPulito] || 'Enter city'}
                value={citta}
                onChange={(e) => setCitta(e.target.value)}
                style={inputStyle}
              />
            )}

            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button 
              onClick={utente ? () => router.push(`/pagamento?lang=${lang}`) : handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            {errore && <p style={{ color: 'red', textAlign: 'center', marginTop: '1rem' }}>{errore}</p>}

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy18.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0];

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const handleCheckoutDiretto = async () => {
    // Validazione campi
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }
    
    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      // 1. Crea/aggiorna cliente
      const { data: cliente, error } = await supabase
        .from('clienti')
        .upsert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true
        }, { onConflict: 'email' })
        .select()
        .single();

      if (error) throw error;

      // 2. Salva dati per pagamento
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      // 3. Reindirizza a pagamento
      router.push(`/pagamento?lang=${lang}`);
      
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore(testi.inserisciEmailPassword);
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const translations = {
    selectCountry: {
      it: 'Seleziona paese',
      en: 'Select country',
      fr: 'Sélectionnez un pays',
      de: 'Land auswählen',
      es: 'Seleccionar país',
      zh: '选择国家',
      ar: 'حدد الدولة',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona città',
      en: 'Select city',
      fr: 'Sélectionnez une ville',
      de: 'Stadt auswählen',
      es: 'Seleccionar ciudad',
      zh: '选择城市',
      ar: 'حدد المدينة',
      ja: '都市を選択'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      zh: '其他',
      ar: 'آخر',
      ja: 'その他'
    },
    enterCity: {
      it: 'Inserisci città',
      en: 'Enter city',
      fr: 'Entrez une ville',
      de: 'Stadt eingeben',
      es: 'Ingrese ciudad',
      zh: '输入城市',
      ar: 'أدخل المدينة',
      ja: '都市を入力'
    }
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: '
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: '
    }
    // ... altre lingue (mantenere la stessa struttura)
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>
            
            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input 
                  placeholder={testi.email} 
                  value={email} 
                  onChange={(e) => setEmail(e.target.value)} 
                  style={inputStyle} 
                />
                {isRegistrazione && (
                  <input 
                    type="password" 
                    placeholder={testi.password} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    style={inputStyle} 
                  />
                )}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                  >
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button 
                    onClick={() => setIsRegistrazione(!isRegistrazione)} 
                    style={toggleStyle}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            
            <select
              value={paese}
              onChange={(e) => setPaese(e.target.value)}
              style={{ ...inputStyle, color: 'black' }}
            >
              <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
              {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                <option key={nomePaese} value={nomePaese}>
                  {nomePaese}
                </option>
              ))}
            </select>

            {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
              <>
                <select
                  value={cittaSelezionata}
                  onChange={(e) => {
                    const value = e.target.value;
                    setCittaSelezionata(value);
                    if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                    else setCitta('');
                  }}
                  style={{ ...inputStyle, color: 'black' }}
                >
                  <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                  {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                    <option key={city} value={city}>{city}</option>
                  ))}
                  <option value={translations.other[langPulito] || 'Other'}>
                    {translations.other[langPulito] || 'Other'}
                  </option>
                </select>
                {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                  <input
                    placeholder={translations.enterCity[langPulito] || 'Enter city'}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    style={inputStyle}
                  />
                )}
              </>
            ) : (
              <input
                placeholder={translations.enterCity[langPulito] || 'Enter city'}
                value={citta}
                onChange={(e) => setCitta(e.target.value)}
                style={inputStyle}
              />
            )}

            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button 
              onClick={utente ? () => router.push(`/pagamento?lang=${lang}`) : handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            {errore && <p style={{ color: 'red', textAlign: 'center', marginTop: '1rem' }}>{errore}</p>}

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy19.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0];

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const handleCheckoutDiretto = async () => {
    // Validazione campi
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }
    
    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      // 1. Crea/aggiorna cliente
      const { data: cliente, error } = await supabase
        .from('clienti')
        .upsert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true
        }, { onConflict: 'email' })
        .select()
        .single();

      if (error) throw error;

      // 2. Salva dati per pagamento
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      // 3. Reindirizza a pagamento
      router.push(`/pagamento?lang=${lang}`);
      
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore(testi.inserisciEmailPassword);
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const translations = {
    selectCountry: {
      it: 'Seleziona paese',
      en: 'Select country',
      fr: 'Sélectionnez un pays',
      de: 'Land auswählen',
      es: 'Seleccionar país',
      zh: '选择国家',
      ar: 'حدد الدولة',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona città',
      en: 'Select city',
      fr: 'Sélectionnez une ville',
      de: 'Stadt auswählen',
      es: 'Seleccionar ciudad',
      zh: '选择城市',
      ar: 'حدد المدينة',
      ja: '都市を選択'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      zh: '其他',
      ar: 'آخر',
      ja: 'その他'
    },
    enterCity: {
      it: 'Inserisci città',
      en: 'Enter city',
      fr: 'Entrez une ville',
      de: 'Stadt eingeben',
      es: 'Ingrese ciudad',
      zh: '输入城市',
      ar: 'أدخل المدينة',
      ja: '都市を入力'
    }
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: '
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: '
    }
    // ... altre lingue (mantenere la stessa struttura)
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>
            
            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input 
                  placeholder={testi.email} 
                  value={email} 
                  onChange={(e) => setEmail(e.target.value)} 
                  style={inputStyle} 
                />
                {isRegistrazione && (
                  <input 
                    type="password" 
                    placeholder={testi.password} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    style={inputStyle} 
                  />
                )}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                  >
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button 
                    onClick={() => setIsRegistrazione(!isRegistrazione)} 
                    style={toggleStyle}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            
            <select
              value={paese}
              onChange={(e) => setPaese(e.target.value)}
              style={{ ...inputStyle, color: 'black' }}
            >
              <option value="">{translations.selectCountry[langPulito] || 'Select country'}</option>
              {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                <option key={nomePaese} value={nomePaese}>
                  {nomePaese}
                </option>
              ))}
            </select>

            {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
              <>
                <select
                  value={cittaSelezionata}
                  onChange={(e) => {
                    const value = e.target.value;
                    setCittaSelezionata(value);
                    if (value !== (translations.other[langPulito] || 'Other')) setCitta(value);
                    else setCitta('');
                  }}
                  style={{ ...inputStyle, color: 'black' }}
                >
                  <option value="">{translations.selectCity[langPulito] || 'Select city'}</option>
                  {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                    <option key={city} value={city}>{city}</option>
                  ))}
                  <option value={translations.other[langPulito] || 'Other'}>
                    {translations.other[langPulito] || 'Other'}
                  </option>
                </select>
                {cittaSelezionata === (translations.other[langPulito] || 'Other') && (
                  <input
                    placeholder={translations.enterCity[langPulito] || 'Enter city'}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    style={inputStyle}
                  />
                )}
              </>
            ) : (
              <input
                placeholder={translations.enterCity[langPulito] || 'Enter city'}
                value={citta}
                onChange={(e) => setCitta(e.target.value)}
                style={inputStyle}
              />
            )}

            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button 
              onClick={utente ? () => router.push(`/pagamento?lang=${lang}`) : handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            {errore && <p style={{ color: 'red', textAlign: 'center', marginTop: '1rem' }}>{errore}</p>}

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy20.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const langPulito = lang.split('-')[0];

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };
  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore(testi.inserisciEmailPassword);
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato'
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered'
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;
  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input 
                  placeholder={testi.email} 
                  value={email} 
                  onChange={(e) => setEmail(e.target.value)} 
                  style={inputStyle} 
                />
                {isRegistrazione && (
                  <input 
                    type="password" 
                    placeholder={testi.password} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    style={inputStyle} 
                  />
                )}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                  >
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button 
                    onClick={() => setIsRegistrazione(!isRegistrazione)} 
                    style={toggleStyle}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>

                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore.includes('already registered') ? testi.utenteEsistente : errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button 
              onClick={utente ? () => router.push(`/pagamento?lang=${lang}`) : handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy21.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase.from('clienti').select('*').eq('email', session.session.user.email).single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };
  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(testi.loginFallito || error.message);
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore(testi.inserisciEmailPassword);
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(testi.registrazioneFallita || error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };
  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: "Per completare l'acquisto inserisci i tuoi dati:",
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato',
      loginFallito: 'Login fallito',
      registrazioneFallita: 'Registrazione fallita',
      inserisciEmailPassword: 'Inserisci email e password'
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Le panier est vide.',
      loginNecessario: 'Pour finaliser l\'achat, veuillez entrer vos informations :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'enregistrer',
      pagaOra: 'Procéder au paiement',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      compilaCampi: 'Veuillez remplir tous les champs obligatoires',
      erroreEmail: 'Veuillez saisir une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      loginFallito: 'Échec de la connexion',
      registrazioneFallita: 'Échec de l’enregistrement',
      inserisciEmailPassword: 'Saisir email et mot de passe'
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete the purchase, enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered',
      loginFallito: 'Login failed',
      registrazioneFallita: 'Registration failed',
      inserisciEmailPassword: 'Enter email and password'
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>
          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input placeholder={testi.email} value={email} onChange={(e) => setEmail(e.target.value)} style={inputStyle} />
                {isRegistrazione && (
                  <input type="password" placeholder={testi.password} value={password} onChange={(e) => setPassword(e.target.value)} style={inputStyle} />
                )}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button onClick={isRegistrazione ? registraUtente : loginEmail} style={buttonStyle}>
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button onClick={() => setIsRegistrazione(!isRegistrazione)} style={toggleStyle}>
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>
                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button 
              onClick={utente ? () => router.push(`/pagamento?lang=${lang}`) : handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy22.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);
  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) {
  if (error.message === 'Invalid login credentials') {
    setErrore(testi.credenzialiErrate || error.message);
  } else {
    setErrore(error.message);
  }
}
    else {
      await fetchUtente();
      tracciaAccesso(email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore(testi.inserisciEmailPassword);
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);
    await registraCliente(email);
    await fetchUtente();
    tracciaAccesso(email);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };
  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, entrez vos informations :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      pagaOra: 'Procéder au paiement',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte geben Sie Ihre Daten ein, um den Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      pagaOra: 'Zur Zahlung',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Mit Google anmelden',
      apple: 'Mit Apple anmelden',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, introduce tus datos:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      pagaOra: 'Proceder al pago',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión con Google',
      apple: 'Iniciar sesión con Apple',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'لإتمام الشراء، أدخل بياناتك:',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'تسجيل',
      paga: 'ادفع الآن',
      pagaOra: 'المتابعة للدفع',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ إزالة',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
      compilaCampi: 'يرجى ملء جميع الحقول المطلوبة',
      erroreEmail: 'يرجى إدخال بريد إلكتروني صالح',
      erroreCheckout: 'خطأ أثناء الدفع: ',
      utenteEsistente: 'المستخدم مسجل مسبقًا',
      inserisciEmailPassword: 'أدخل البريد وكلمة المرور',
      credenzialiErrate: 'بيانات تسجيل الدخول غير صالحة',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '购物车为空。',
      loginNecessario: '请填写您的信息以完成购买：',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即支付',
      pagaOra: '前往付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 删除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
      compilaCampi: '请填写所有必填字段',
      erroreEmail: '请输入有效的电子邮件地址',
      erroreCheckout: '结账错误：',
      utenteEsistente: '用户已注册',
      inserisciEmailPassword: '输入邮箱和密码',
      credenzialiErrate: '无效的登录凭据',
    },
    ja: {
      titolo: '注文概要',
      vuoto: 'カートが空です。',
      loginNecessario: '購入を完了するには情報を入力してください：',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      pagaOra: '支払いへ進む',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
      compilaCampi: '必須項目をすべて入力してください',
      erroreEmail: '有効なメールアドレスを入力してください',
      erroreCheckout: 'チェックアウトエラー：',
      utenteEsistente: 'すでに登録されています',
      inserisciEmailPassword: 'メールとパスワードを入力してください',
      credenzialiErrate: '無効なログイン認証情報',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input
                  placeholder={testi.email}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={inputStyle}
                />
                {isRegistrazione && (
                  <input
                    type="password"
                    placeholder={testi.password}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    style={inputStyle}
                  />
                )}
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                  >
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button
                    onClick={() => setIsRegistrazione(!isRegistrazione)}
                    style={toggleStyle}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>

                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore.includes('already registered') ? testi.utenteEsistente : errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button
              onClick={utente ? () => router.push(`/pagamento?lang=${lang}`) : handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy23.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);
  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const loginEmail = async () => {
    sessionStorage.setItem('loginFromCheckout', 'true');
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) {
  if (error.message === 'Invalid login credentials') {
    setErrore(testi.credenzialiErrate || error.message);
  } else {
    setErrore(error.message);
  }
}
else {
  await fetchUtente();
  tracciaAccesso(email);

  const dati = localStorage.getItem('carrello');
  const carrelloSalvato = dati ? JSON.parse(dati) : [];

  localStorage.setItem('checkout_dati', JSON.stringify({
    cliente_id: email,
    carrello: carrelloSalvato,
    totale: totaleFinale,
    email
  }));

  router.push(`/pagamento?lang=${lang}`);
}
  };

const registraUtente = async () => {
  if (!email || !password) return setErrore(testi.inserisciEmailPassword);

  const { data: existing } = await supabase
    .from('clienti')
    .select('id')
    .eq('email', email)
    .single();

  if (existing) {
    setErrore(testi.utenteEsistente);
    setIsRegistrazione(false); // Torna alla modalità login
    return;
  }

  const { error } = await supabase.auth.signUp({ email, password });
  if (error) return setErrore(error.message);

  await registraCliente(email);
  await fetchUtente();
  tracciaAccesso(email);
};

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };
  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, entrez vos informations :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      pagaOra: 'Procéder au paiement',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte geben Sie Ihre Daten ein, um den Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      pagaOra: 'Zur Zahlung',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Mit Google anmelden',
      apple: 'Mit Apple anmelden',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, introduce tus datos:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      pagaOra: 'Proceder al pago',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión con Google',
      apple: 'Iniciar sesión con Apple',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'لإتمام الشراء، أدخل بياناتك:',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'تسجيل',
      paga: 'ادفع الآن',
      pagaOra: 'المتابعة للدفع',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ إزالة',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
      compilaCampi: 'يرجى ملء جميع الحقول المطلوبة',
      erroreEmail: 'يرجى إدخال بريد إلكتروني صالح',
      erroreCheckout: 'خطأ أثناء الدفع: ',
      utenteEsistente: 'المستخدم مسجل مسبقًا',
      inserisciEmailPassword: 'أدخل البريد وكلمة المرور',
      credenzialiErrate: 'بيانات تسجيل الدخول غير صالحة',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '购物车为空。',
      loginNecessario: '请填写您的信息以完成购买：',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即支付',
      pagaOra: '前往付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 删除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
      compilaCampi: '请填写所有必填字段',
      erroreEmail: '请输入有效的电子邮件地址',
      erroreCheckout: '结账错误：',
      utenteEsistente: '用户已注册',
      inserisciEmailPassword: '输入邮箱和密码',
      credenzialiErrate: '无效的登录凭据',
    },
    ja: {
      titolo: '注文概要',
      vuoto: 'カートが空です。',
      loginNecessario: '購入を完了するには情報を入力してください：',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      pagaOra: '支払いへ進む',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
      compilaCampi: '必須項目をすべて入力してください',
      erroreEmail: '有効なメールアドレスを入力してください',
      erroreCheckout: 'チェックアウトエラー：',
      utenteEsistente: 'すでに登録されています',
      inserisciEmailPassword: 'メールとパスワードを入力してください',
      credenzialiErrate: '無効なログイン認証情報',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input
                  placeholder={testi.email}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={inputStyle}
                />
              <input
                type="password"
                placeholder={testi.password}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                style={inputStyle}
              />  
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                  >
                    {isRegistrazione ? testi.registrati : testi.login}
                  </button>
                  <button
                    onClick={() => setIsRegistrazione(!isRegistrazione)}
                    style={toggleStyle}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>

                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore.includes('already registered') ? testi.utenteEsistente : errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button
              onClick={handleCheckoutDiretto}
              style={pagaStyle}
            >
              {testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy24.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [isRedirecting, setIsRedirecting] = useState(false);

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const loginEmail = async () => {
    setIsRedirecting(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    
    if (error) {
      setIsRedirecting(false);
      if (error.message === 'Invalid login credentials') {
        setErrore(testi.credenzialiErrate || error.message);
      } else {
        setErrore(error.message);
      }
      return;
    }
    
    // Aggiorna lo stato utente senza reindirizzamento
    await fetchUtente();
    
    // Salva i dati per il pagamento
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
    
    // Reindirizza direttamente alla pagina di pagamento
    router.push(`/pagamento?lang=${lang}`);
  };

  const registraUtente = async () => {
    setIsRedirecting(true);
    if (!email || !password) {
      setIsRedirecting(false);
      return setErrore(testi.inserisciEmailPassword);
    }

    const { data: existing } = await supabase
      .from('clienti')
      .select('id')
      .eq('email', email)
      .single();

    if (existing) {
      setIsRedirecting(false);
      setErrore(testi.utenteEsistente);
      setIsRegistrazione(false);
      return;
    }

    const { error } = await supabase.auth.signUp({ email, password });
    if (error) {
      setIsRedirecting(false);
      return setErrore(error.message);
    }

    await registraCliente(email);
    await fetchUtente();
    
    // Salva i dati per il pagamento
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
    
    // Reindirizza direttamente alla pagina di pagamento
    router.push(`/pagamento?lang=${lang}`);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, entrez vos informations :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      pagaOra: 'Procéder au paiement',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte geben Sie Ihre Daten ein, um den Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      pagaOra: 'Zur Zahlung',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Mit Google anmelden',
      apple: 'Mit Apple anmelden',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, introduce tus datos:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      pagaOra: 'Proceder al pago',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión con Google',
      apple: 'Iniciar sesión con Apple',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'لإتمام الشراء، أدخل بياناتك:',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'تسجيل',
      paga: 'ادفع الآن',
      pagaOra: 'المتابعة للدفع',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ إزالة',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
      compilaCampi: 'يرجى ملء جميع الحقول المطلوبة',
      erroreEmail: 'يرجى إدخال بريد إلكتروني صالح',
      erroreCheckout: 'خطأ أثناء الدفع: ',
      utenteEsistente: 'المستخدم مسجل مسبقًا',
      inserisciEmailPassword: 'أدخل البريد وكلمة المرور',
      credenzialiErrate: 'بيانات تسجيل الدخول غير صالحة',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '购物车为空。',
      loginNecessario: '请填写您的信息以完成购买：',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即支付',
      pagaOra: '前往付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 删除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
      compilaCampi: '请填写所有必填字段',
      erroreEmail: '请输入有效的电子邮件地址',
      erroreCheckout: '结账错误：',
      utenteEsistente: '用户已注册',
      inserisciEmailPassword: '输入邮箱和密码',
      credenzialiErrate: '无效的登录凭据',
    },
    ja: {
      titolo: '注文概要',
      vuoto: 'カートが空です。',
      loginNecessario: '購入を完了するには情報を入力してください：',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      pagaOra: '支払いへ進む',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
      compilaCampi: '必須項目をすべて入力してください',
      erroreEmail: '有効なメールアドレスを入力してください',
      erroreCheckout: 'チェックアウトエラー：',
      utenteEsistente: 'すでに登録されています',
      inserisciEmailPassword: 'メールとパスワードを入力してください',
      credenzialiErrate: '無効なログイン認証情報',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input
                  placeholder={testi.email}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={inputStyle}
                />
                <input
                  type="password"
                  placeholder={testi.password}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  style={inputStyle}
                />  
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                    disabled={isRedirecting}
                  >
                    {isRedirecting ? testi.pagaOra : (isRegistrazione ? testi.registrati : testi.login)}
                  </button>
                  <button
                    onClick={() => setIsRegistrazione(!isRegistrazione)}
                    style={toggleStyle}
                    disabled={isRedirecting}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>

                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore.includes('already registered') ? testi.utenteEsistente : errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button
              onClick={() => {
                if (utente) {
                  router.push(`/pagamento?lang=${lang}`);
                } else {
                  handleCheckoutDiretto();
                }
              }}
              style={pagaStyle}
              disabled={isRedirecting}
            >
              {isRedirecting ? testi.pagaOra + '...' : testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle} disabled={isRedirecting}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy25.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [isRedirecting, setIsRedirecting] = useState(false);

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}&from_checkout=true`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const salvaDatiCheckout = () => {
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
  };

  const loginEmail = async () => {
    setIsRedirecting(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    
    if (error) {
      setIsRedirecting(false);
      if (error.message === 'Invalid login credentials') {
        setErrore(testi.credenzialiErrate || error.message);
      } else {
        setErrore(error.message);
      }
      return;
    }
    
    salvaDatiCheckout();
    sessionStorage.setItem('checkout_redirect', 'true');
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const registraUtente = async () => {
    setIsRedirecting(true);
    if (!email || !password) {
      setIsRedirecting(false);
      return setErrore(testi.inserisciEmailPassword);
    }

    const { data: existing } = await supabase
      .from('clienti')
      .select('id')
      .eq('email', email)
      .single();

    if (existing) {
      setIsRedirecting(false);
      setErrore(testi.utenteEsistente);
      setIsRegistrazione(false);
      return;
    }

    const { error } = await supabase.auth.signUp({ email, password });
    if (error) {
      setIsRedirecting(false);
      return setErrore(error.message);
    }

    await registraCliente(email);
    salvaDatiCheckout();
    sessionStorage.setItem('checkout_redirect', 'true');
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, entrez vos informations :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      pagaOra: 'Procéder au paiement',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte geben Sie Ihre Daten ein, um den Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      pagaOra: 'Zur Zahlung',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Mit Google anmelden',
      apple: 'Mit Apple anmelden',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, introduce tus datos:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      pagaOra: 'Proceder al pago',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión con Google',
      apple: 'Iniciar sesión con Apple',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'لإتمام الشراء، أدخل بياناتك:',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'تسجيل',
      paga: 'ادفع الآن',
      pagaOra: 'المتابعة للدفع',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ إزالة',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
      compilaCampi: 'يرجى ملء جميع الحقول المطلوبة',
      erroreEmail: 'يرجى إدخال بريد إلكتروني صالح',
      erroreCheckout: 'خطأ أثناء الدفع: ',
      utenteEsistente: 'المستخدم مسجل مسبقًا',
      inserisciEmailPassword: 'أدخل البريد وكلمة المرور',
      credenzialiErrate: 'بيانات تسجيل الدخول غير صالحة',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '购物车为空。',
      loginNecessario: '请填写您的信息以完成购买：',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即支付',
      pagaOra: '前往付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 删除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
      compilaCampi: '请填写所有必填字段',
      erroreEmail: '请输入有效的电子邮件地址',
      erroreCheckout: '结账错误：',
      utenteEsistente: '用户已注册',
      inserisciEmailPassword: '输入邮箱和密码',
      credenzialiErrate: '无效的登录凭据',
    },
    ja: {
      titolo: '注文概要',
      vuoto: 'カートが空です。',
      loginNecessario: '購入を完了するには情報を入力してください：',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      pagaOra: '支払いへ進む',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
      compilaCampi: '必須項目をすべて入力してください',
      erroreEmail: '有効なメールアドレスを入力してください',
      erroreCheckout: 'チェックアウトエラー：',
      utenteEsistente: 'すでに登録されています',
      inserisciEmailPassword: 'メールとパスワードを入力してください',
      credenzialiErrate: '無効なログイン認証情報',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input
                  placeholder={testi.email}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={inputStyle}
                />
                <input
                  type="password"
                  placeholder={testi.password}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  style={inputStyle}
                />  
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                    disabled={isRedirecting}
                  >
                    {isRedirecting ? testi.pagaOra : (isRegistrazione ? testi.registrati : testi.login)}
                  </button>
                  <button
                    onClick={() => setIsRegistrazione(!isRegistrazione)}
                    style={toggleStyle}
                    disabled={isRedirecting}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>

                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore.includes('already registered') ? testi.utenteEsistente : errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button
              onClick={() => {
                if (utente) {
                  router.push(`/pagamento?lang=${lang}`);
                } else {
                  handleCheckoutDiretto();
                }
              }}
              style={pagaStyle}
              disabled={isRedirecting}
            >
              {isRedirecting ? testi.pagaOra + '...' : testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle} disabled={isRedirecting}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy26.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import paesi from '../lib/paesi';
import { citta as cittaData } from '../lib/citta';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [isRedirecting, setIsRedirecting] = useState(false);

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();
      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckoutDiretto = async () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      return setErrore(testi.compilaCampi);
    }

    if (!validaEmail(email)) {
      return setErrore(testi.erroreEmail);
    }

    try {
      const { data: cliente, error } = await supabase
        .from('clienti')
        .insert({
          email,
          nome,
          cognome,
          telefono1,
          telefono2,
          indirizzo,
          citta,
          paese,
          codice_postale: cap,
          is_guest: true,
          created_at: new Date().toISOString(),
          ordini: []
        })
        .select()
        .single();

      if (error && error.code === '23505') {
        return setErrore(testi.utenteEsistente);
      }
      if (error) throw error;

      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: cliente.id,
        carrello,
        totale: totaleFinale,
        email
      }));

      router.push(`/pagamento?lang=${lang}&from_checkout=true`);
    } catch (err) {
      setErrore(testi.erroreCheckout + err.message);
    }
  };

  const salvaDatiCheckout = () => {
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
  };

  const loginEmail = async () => {
    setIsRedirecting(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    
    if (error) {
      setIsRedirecting(false);
      if (error.message === 'Invalid login credentials') {
        setErrore(testi.credenzialiErrate || error.message);
      } else {
        setErrore(error.message);
      }
      return;
    }
    
    salvaDatiCheckout();
    sessionStorage.setItem('checkout_redirect', 'true');
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const registraUtente = async () => {
    setIsRedirecting(true);
    if (!email || !password) {
      setIsRedirecting(false);
      return setErrore(testi.inserisciEmailPassword);
    }

    const { data: existing } = await supabase
      .from('clienti')
      .select('id')
      .eq('email', email)
      .single();

    if (existing) {
      setIsRedirecting(false);
      setErrore(testi.utenteEsistente);
      setIsRegistrazione(false);
      return;
    }

    const { error } = await supabase.auth.signUp({ email, password });
    if (error) {
      setIsRedirecting(false);
      return setErrore(error.message);
    }

    await registraCliente(email);
    salvaDatiCheckout();
    sessionStorage.setItem('checkout_redirect', 'true');
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      loginNecessario: 'Per completare l\'acquisto inserisci i tuoi dati:',
      login: 'Login',
      crea: 'Crea Account',
      registrati: 'Registrati',
      paga: 'Paga ora',
      pagaOra: 'Procedi al pagamento',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: '❌ Rimuovi',
      google: 'Login con Google',
      apple: 'Login con Apple',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      loginNecessario: 'To complete your purchase please enter your details:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      paga: 'Pay Now',
      pagaOra: 'Proceed to payment',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: '❌ Remove',
      google: 'Login with Google',
      apple: 'Login with Apple',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      loginNecessario: 'Pour finaliser votre achat, entrez vos informations :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      paga: 'Payer maintenant',
      pagaOra: 'Procéder au paiement',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: '❌ Supprimer',
      google: 'Connexion avec Google',
      apple: 'Connexion avec Apple',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      loginNecessario: 'Bitte geben Sie Ihre Daten ein, um den Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      paga: 'Jetzt bezahlen',
      pagaOra: 'Zur Zahlung',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: '❌ Entfernen',
      google: 'Mit Google anmelden',
      apple: 'Mit Apple anmelden',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      loginNecessario: 'Para completar la compra, introduce tus datos:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      paga: 'Pagar ahora',
      pagaOra: 'Proceder al pago',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: '❌ Eliminar',
      google: 'Iniciar sesión con Google',
      apple: 'Iniciar sesión con Apple',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    },
    ar: {
      titolo: 'ملخص الطلب',
      vuoto: 'سلة التسوق فارغة.',
      loginNecessario: 'لإتمام الشراء، أدخل بياناتك:',
      login: 'تسجيل الدخول',
      crea: 'إنشاء حساب',
      registrati: 'تسجيل',
      paga: 'ادفع الآن',
      pagaOra: 'المتابعة للدفع',
      back: 'رجوع',
      nome: 'الاسم الأول',
      cognome: 'اسم العائلة',
      indirizzo: 'العنوان',
      citta: 'المدينة',
      cap: 'الرمز البريدي',
      paese: 'البلد',
      email: 'البريد الإلكتروني',
      password: 'كلمة المرور',
      telefono1: 'الهاتف 1',
      telefono2: 'الهاتف 2',
      totale: 'الإجمالي:',
      rimuovi: '❌ إزالة',
      google: 'تسجيل الدخول باستخدام Google',
      apple: 'تسجيل الدخول باستخدام Apple',
      compilaCampi: 'يرجى ملء جميع الحقول المطلوبة',
      erroreEmail: 'يرجى إدخال بريد إلكتروني صالح',
      erroreCheckout: 'خطأ أثناء الدفع: ',
      utenteEsistente: 'المستخدم مسجل مسبقًا',
      inserisciEmailPassword: 'أدخل البريد وكلمة المرور',
      credenzialiErrate: 'بيانات تسجيل الدخول غير صالحة',
    },
    zh: {
      titolo: '订单摘要',
      vuoto: '购物车为空。',
      loginNecessario: '请填写您的信息以完成购买：',
      login: '登录',
      crea: '创建账户',
      registrati: '注册',
      paga: '立即支付',
      pagaOra: '前往付款',
      back: '返回',
      nome: '名字',
      cognome: '姓氏',
      indirizzo: '地址',
      citta: '城市',
      cap: '邮政编码',
      paese: '国家',
      email: '电子邮件',
      password: '密码',
      telefono1: '电话 1',
      telefono2: '电话 2',
      totale: '总计：',
      rimuovi: '❌ 删除',
      google: '使用 Google 登录',
      apple: '使用 Apple 登录',
      compilaCampi: '请填写所有必填字段',
      erroreEmail: '请输入有效的电子邮件地址',
      erroreCheckout: '结账错误：',
      utenteEsistente: '用户已注册',
      inserisciEmailPassword: '输入邮箱和密码',
      credenzialiErrate: '无效的登录凭据',
    },
    ja: {
      titolo: '注文概要',
      vuoto: 'カートが空です。',
      loginNecessario: '購入を完了するには情報を入力してください：',
      login: 'ログイン',
      crea: 'アカウント作成',
      registrati: '登録する',
      paga: '今すぐ支払う',
      pagaOra: '支払いへ進む',
      back: '戻る',
      nome: '名',
      cognome: '姓',
      indirizzo: '住所',
      citta: '市区町村',
      cap: '郵便番号',
      paese: '国',
      email: 'メールアドレス',
      password: 'パスワード',
      telefono1: '電話 1',
      telefono2: '電話 2',
      totale: '合計：',
      rimuovi: '❌ 削除',
      google: 'Googleでログイン',
      apple: 'Appleでログイン',
      compilaCampi: '必須項目をすべて入力してください',
      erroreEmail: '有効なメールアドレスを入力してください',
      erroreCheckout: 'チェックアウトエラー：',
      utenteEsistente: 'すでに登録されています',
      inserisciEmailPassword: 'メールとパスワードを入力してください',
      credenzialiErrate: '無効なログイン認証情報',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;

  return (
    <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', minHeight: '100vh' }}>
      <h1 style={{ textAlign: 'center' }}>{testi.titolo}</h1>

      {carrello.length === 0 ? (
        <>
          <p style={{ textAlign: 'center' }}>{testi.vuoto}</p>
          <div style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>
            <button onClick={() => router.back()} style={backButtonStyle}>
              {testi.back}
            </button>
          </div>
        </>
      ) : (
        <>
          <ul style={{ listStyle: 'none', padding: 0, textAlign: 'center' }}>
            {carrello.map((p, i) => (
              <li key={i} style={{ marginBottom: '0.5rem', fontFamily: 'Arial, sans-serif' }}>
                {p.quantita || 1}× {p.nome} — {'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}
                <button onClick={() => rimuoviDalCarrello(i)} style={{ marginLeft: '1rem', color: 'red' }}>
                  {testi.rimuovi}
                </button>
              </li>
            ))}
          </ul>

          <div style={{ maxWidth: '500px', margin: '2rem auto' }}>
            <h2 style={{ textAlign: 'center' }}>{testi.loginNecessario}</h2>

            {!utente && (
              <div style={{ marginBottom: '1rem' }}>
                <input
                  placeholder={testi.email}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={inputStyle}
                />
                <input
                  type="password"
                  placeholder={testi.password}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  style={inputStyle}
                />  
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  <button
                    onClick={isRegistrazione ? registraUtente : loginEmail}
                    style={buttonStyle}
                    disabled={isRedirecting}
                  >
                    {isRedirecting ? testi.pagaOra : (isRegistrazione ? testi.registrati : testi.login)}
                  </button>
                  <button
                    onClick={() => setIsRegistrazione(!isRegistrazione)}
                    style={toggleStyle}
                    disabled={isRedirecting}
                  >
                    {isRegistrazione ? testi.login : testi.crea}
                  </button>
                </div>

                {errore && (
                  <p style={{ color: 'red', textAlign: 'center', marginTop: '0.5rem' }}>
                    {errore.includes('already registered') ? testi.utenteEsistente : errore}
                  </p>
                )}
              </div>
            )}

            <input placeholder={testi.nome} value={nome} onChange={e => setNome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cognome} value={cognome} onChange={e => setCognome(e.target.value)} style={inputStyle} />
            <input placeholder={testi.indirizzo} value={indirizzo} onChange={e => setIndirizzo(e.target.value)} style={inputStyle} />
            <input placeholder={testi.cap} value={cap} onChange={e => setCap(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono1} value={telefono1} onChange={e => setTelefono1(e.target.value)} style={inputStyle} />
            <input placeholder={testi.telefono2} value={telefono2} onChange={e => setTelefono2(e.target.value)} style={inputStyle} />

            <p style={{ textAlign: 'center', fontWeight: 'bold', fontSize: '1.2rem', marginTop: '1rem', fontFamily: 'Arial, sans-serif' }}>
              {testi.totale} {'\u20AC'}{totaleFinale.toFixed(1)}
            </p>

            <button
              onClick={() => {
                if (utente) {
                  router.push(`/pagamento?lang=${lang}`);
                } else {
                  handleCheckoutDiretto();
                }
              }}
              style={pagaStyle}
              disabled={isRedirecting}
            >
              {isRedirecting ? testi.pagaOra + '...' : testi.pagaOra}
            </button>

            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '1rem' }}>
              <button onClick={() => router.back()} style={backButtonStyle} disabled={isRedirecting}>
                {testi.back}
              </button>
            </div>
          </div>
        </>
      )}
    </main>
  );
}

// STILI
const inputStyle = {
  width: '100%',
  marginBottom: '1rem',
  padding: '0.5rem',
  color: 'black'
};

const buttonStyle = {
  flex: 1,
  padding: '0.75rem',
  backgroundColor: 'green',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontWeight: 'bold'
};

const toggleStyle = {
  flex: 1,
  padding: '0.5rem',
  backgroundColor: '#ccc',
  color: 'black',
  border: 'none',
  borderRadius: '5px'
};

const pagaStyle = {
  width: '100%',
  padding: '1rem',
  backgroundColor: '#0070f3',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '1.2rem',
  fontWeight: 'bold',
  cursor: 'pointer'
};

const backButtonStyle = {
  padding: '0.5rem 1rem',
  backgroundColor: '#666',
  color: 'white',
  border: 'none',
  borderRadius: '5px',
  fontSize: '0.9rem'
};
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy27.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [isRedirecting, setIsRedirecting] = useState(false);
  const [step, setStep] = useState(1); // 1: login/register, 2: profile

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();

      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
        
        // Skip to profile step if profile is incomplete
        if (!verificaProfiloCompleto(profilo)) {
          setStep(2);
        }
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const verificaProfiloCompleto = (profilo) => {
    return (
      profilo.nome &&
      profilo.cognome &&
      profilo.email &&
      profilo.indirizzo &&
      profilo.citta &&
      profilo.paese &&
      profilo.codice_postale &&
      profilo.telefono1
    );
  };

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  
  const salvaDatiCheckout = () => {
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: utente ? utente.id : email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
  };

  const registraCliente = async () => {
    const { error } = await supabase.from('clienti').upsert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString()
    });

    if (error) {
      setErrore(testi.erroreCheckout + error.message);
      return false;
    }
    return true;
  };

  const loginEmail = async () => {
    setIsRedirecting(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });

    if (error) {
      setIsRedirecting(false);
      setErrore(error.message === 'Invalid login credentials' 
        ? testi.credenzialiErrate
        : error.message
      );
      return false;
    }

    await fetchUtente();
    setIsRedirecting(false);
    setStep(2);
    return true;
  };

  const registraUtente = async () => {
    setIsRedirecting(true);

    // Validate email and password
    if (!email || !password) {
      setErrore(testi.inserisciEmailPassword);
      setIsRedirecting(false);
      return;
    }

    if (!validaEmail(email)) {
      setErrore(testi.erroreEmail);
      setIsRedirecting(false);
      return;
    }

    // Create auth account
    const { error: signupError } = await supabase.auth.signUp({ 
      email, 
      password,
      options: {
        data: {
          nome,
          cognome
        }
      }
    });
    
    if (signupError) {
      setErrore(signupError.message);
      setIsRedirecting(false);
      return;
    }

    // Create/update customer profile
    const registrato = await registraCliente();
    if (!registrato) {
      setIsRedirecting(false);
      return;
    }

    // Login after registration
    const loggato = await loginEmail();
    if (loggato) {
      setStep(2);
    }
  };

  const verificaCampiObbligatori = () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      setErrore(testi.compilaCampi);
      return false;
    }

    if (!validaEmail(email)) {
      setErrore(testi.erroreEmail);
      return false;
    }

    return true;
  };

  const aggiornaProfilo = async () => {
    if (!verificaCampiObbligatori()) return false;
    
    setIsRedirecting(true);
    try {
      // Update profile in Supabase
      await registraCliente();
      
      // For new users, fetch user data
      if (!utente) {
        await fetchUtente();
      }
      
      setIsRedirecting(false);
      return true;
    } catch (error) {
      setErrore(testi.erroreAggiornamento + error.message);
      setIsRedirecting(false);
      return false;
    }
  };

  const handleProcediPagamento = async () => {
    // Ensure profile is complete
    const profiloValido = await aggiornaProfilo();
    if (!profiloValido) return;
    
    salvaDatiCheckout();
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };
  
  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      accesso: 'Accedi o Registrati',
      dettagli: 'I Tuoi Dettagli',
      loginNecessario: 'Per completare l\'acquisto:',
      login: 'Accedi',
      crea: 'Crea Account',
      registrati: 'Registrati',
      pagaOra: 'Procedi al pagamento',
      continua: 'Continua',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1*',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: 'Rimuovi',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      erroreAggiornamento: 'Errore aggiornamento profilo: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      accesso: 'Login or Register',
      dettagli: 'Your Details',
      loginNecessario: 'To complete your purchase:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      pagaOra: 'Proceed to payment',
      continua: 'Continue',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1*',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: 'Remove',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      erroreAggiornamento: 'Profile update error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      accesso: 'Connexion ou Inscription',
      dettagli: 'Vos Détails',
      loginNecessario: 'Pour finaliser votre achat :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      pagaOra: 'Procéder au paiement',
      continua: 'Continuer',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1*',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: 'Supprimer',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      erroreAggiornamento: 'Erreur mise à jour profil : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      accesso: 'Anmelden oder Registrieren',
      dettagli: 'Ihre Daten',
      loginNecessario: 'Um Ihren Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      pagaOra: 'Zur Zahlung',
      continua: 'Weiter',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1*',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: 'Entfernen',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      erroreAggiornamento: 'Profilaktualisierungsfehler: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      accesso: 'Iniciar sesión o Registrarse',
      dettagli: 'Tus Detalles',
      loginNecessario: 'Para completar su compra:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      pagaOra: 'Proceder al pago',
      continua: 'Continuar',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1*',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: 'Eliminar',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      erroreAggiornamento: 'Error actualización perfil: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;
  
  return (
    <div className="checkout-container">
      <div className="card">
        <h1 className="title">{testi.titolo}</h1>
        
        {/* Cart Summary */}
        {carrello.length === 0 ? (
          <p className="empty-cart">{testi.vuoto}</p>
        ) : (
          <div className="cart-summary">
            <ul className="cart-items">
              {carrello.map((p, i) => (
                <li key={i} className="cart-item">
                  <div className="item-info">
                    <span className="quantity">{p.quantita || 1}x</span>
                    <span className="name">{p.nome}</span>
                    <span className="price">{'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}</span>
                  </div>
                  <button 
                    onClick={() => rimuoviDalCarrello(i)} 
                    className="remove-button"
                  >
                    {testi.rimuovi}
                  </button>
                </li>
              ))}
            </ul>
            <div className="total-section">
              <span>{testi.totale}</span>
              <span className="total-price">{'\u20AC'}{totaleFinale.toFixed(1)}</span>
            </div>
          </div>
        )}
        
        {/* Progress Steps */}
        <div className="progress-steps">
          <div className={`step ${step >= 1 ? 'active' : ''}`}>
            <div className="step-number">1</div>
            <div className="step-label">{testi.accesso}</div>
          </div>
          <div className="step-divider"></div>
          <div className={`step ${step >= 2 ? 'active' : ''}`}>
            <div className="step-number">2</div>
            <div className="step-label">{testi.dettagli}</div>
          </div>
        </div>
        
        {/* Step 1: Login/Register */}
        {step === 1 && (
          <div className="step-container">
            <h2 className="step-title">{testi.accesso}</h2>
            
            <div className="form-group">
              <input
                type="email"
                placeholder={testi.email}
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="input-field"
              />
              <input
                type="password"
                placeholder={testi.password}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="input-field"
              />
            </div>
            
            <div className="button-group">
              <button
                onClick={isRegistrazione ? registraUtente : loginEmail}
                disabled={isRedirecting}
                className="primary-button"
              >
                {isRedirecting ? testi.continua : (isRegistrazione ? testi.registrati : testi.login)}
              </button>
              <button
                onClick={() => setIsRegistrazione(!isRegistrazione)}
                disabled={isRedirecting}
                className="secondary-button"
              >
                {isRegistrazione ? testi.login : testi.crea}
              </button>
            </div>
          </div>
        )}
        
        {/* Step 2: Profile Details */}
        {step === 2 && (
          <div className="step-container">
            <h2 className="step-title">{testi.dettagli}</h2>
            
            <div className="form-grid">
              <input 
                placeholder={testi.nome} 
                value={nome} 
                onChange={e => setNome(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.cognome} 
                value={cognome} 
                onChange={e => setCognome(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.email} 
                value={email} 
                onChange={e => setEmail(e.target.value)} 
                className="input-field"
                disabled={!!utente}
              />
              <input 
                placeholder={testi.indirizzo} 
                value={indirizzo} 
                onChange={e => setIndirizzo(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.citta} 
                value={citta} 
                onChange={e => setCitta(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.cap} 
                value={cap} 
                onChange={e => setCap(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.paese} 
                value={paese} 
                onChange={e => setPaese(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.telefono1} 
                value={telefono1} 
                onChange={e => setTelefono1(e.target.value)} 
                className="input-field"
                required 
              />
              <input 
                placeholder={testi.telefono2} 
                value={telefono2} 
                onChange={e => setTelefono2(e.target.value)} 
                className="input-field"
              />
            </div>
            
            <button 
              onClick={handleProcediPagamento} 
              disabled={isRedirecting}
              className="payment-button"
            >
              {isRedirecting ? `${testi.pagaOra}...` : testi.pagaOra}
            </button>
          </div>
        )}
        
        {errore && (
          <div className="error-message">
            {errore}
          </div>
        )}
        
        {step > 1 && (
          <button 
            onClick={() => setStep(1)} 
            className="back-button"
          >
            {testi.back}
          </button>
        )}
      </div>
      
      <style jsx>{`
        .checkout-container {
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 100vh;
          background-color: #121212;
          padding: 20px;
          color: white;
        }
        
        .card {
          width: 100%;
          max-width: 500px;
          background: #1e1e1e;
          border-radius: 16px;
          padding: 30px;
          box-shadow: 0 8px 30px rgba(0, 0, 0, 0.5);
        }
        
        .title {
          text-align: center;
          margin-bottom: 24px;
          font-size: 1.8rem;
          color: #fff;
        }
        
        .empty-cart {
          text-align: center;
          color: #aaa;
          margin: 20px 0;
        }
        
        .cart-summary {
          margin-bottom: 30px;
          border-bottom: 1px solid #333;
          padding-bottom: 20px;
        }
        
        .cart-items {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        
        .cart-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 12px 0;
          border-bottom: 1px solid #333;
        }
        
        .item-info {
          display: flex;
          gap: 10px;
          align-items: center;
        }
        
        .quantity {
          font-weight: bold;
        }
        
        .name {
          flex: 1;
        }
        
        .price {
          font-weight: bold;
          color: #fff;
        }
        
        .remove-button {
          background: none;
          border: none;
          color: #ff5252;
          cursor: pointer;
          font-size: 0.9rem;
          padding: 5px 10px;
          border-radius: 4px;
          transition: background 0.2s;
        }
        
        .remove-button:hover {
          background: rgba(255, 82, 82, 0.1);
        }
        
        .total-section {
          display: flex;
          justify-content: space-between;
          margin-top: 15px;
          font-size: 1.2rem;
          font-weight: bold;
          padding-top: 15px;
        }
        
        .total-price {
          color: #fff;
        }
        
        .progress-steps {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin: 30px 0;
        }
        
        .step {
          display: flex;
          flex-direction: column;
          align-items: center;
          flex: 1;
        }
        
        .step-number {
          width: 36px;
          height: 36px;
          border-radius: 50%;
          background: #333;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-bottom: 8px;
        }
        
        .step.active .step-number {
          background: #0070f3;
          color: white;
        }
        
        .step-label {
          font-size: 0.85rem;
          text-align: center;
          color: #aaa;
        }
        
        .step.active .step-label {
          color: #fff;
        }
        
        .step-divider {
          flex: 1;
          height: 2px;
          background: #333;
          margin: 0 10px;
        }
        
        .step-container {
          margin-top: 20px;
        }
        
        .step-title {
          margin-bottom: 20px;
          font-size: 1.4rem;
          color: #fff;
        }
        
        .form-group {
          display: grid;
          gap: 15px;
          margin-bottom: 20px;
        }
        
        .form-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-bottom: 20px;
        }
        
        .input-field {
          width: 100%;
          padding: 14px;
          border-radius: 8px;
          border: 1px solid #333;
          background: #2a2a2a;
          color: white;
          font-size: 1rem;
        }
        
        .input-field:disabled {
          background: #333;
          color: #888;
        }
        
        .input-field::placeholder {
          color: #888;
        }
        
        .button-group {
          display: flex;
          gap: 12px;
          margin-bottom: 20px;
        }
        
        .primary-button {
          flex: 1;
          padding: 14px;
          border-radius: 8px;
          border: none;
          background: #0070f3;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
        }
        
        .primary-button:hover {
          background: #0060d0;
        }
        
        .primary-button:disabled {
          background: #0050b0;
          cursor: not-allowed;
        }
        
        .secondary-button {
          flex: 1;
          padding: 14px;
          border-radius: 8px;
          border: 1px solid #444;
          background: transparent;
          color: #ddd;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
        }
        
        .secondary-button:hover {
          background: #2a2a2a;
        }
        
        .secondary-button:disabled {
          opacity: 0.6;
          cursor: not-allowed;
        }
        
        .payment-button {
          width: 100%;
          padding: 16px;
          border-radius: 8px;
          border: none;
          background: #00c853;
          color: white;
          font-weight: bold;
          font-size: 1.1rem;
          cursor: pointer;
          transition: background 0.2s;
          margin-top: 10px;
        }
        
        .payment-button:hover {
          background: #00b84a;
        }
        
        .payment-button:disabled {
          background: #009e40;
          cursor: not-allowed;
        }
        
        .back-button {
          width: 100%;
          padding: 14px;
          border-radius: 8px;
          border: none;
          background: #444;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
          margin-top: 20px;
        }
        
        .back-button:hover {
          background: #333;
        }
        
        .error-message {
          padding: 15px;
          border-radius: 8px;
          background: rgba(255, 82, 82, 0.15);
          color: #ff5252;
          margin-top: 20px;
          text-align: center;
        }
        
        @media (min-width: 768px) {
          .form-grid {
            grid-template-columns: 1fr 1fr;
          }
          
          .card {
            padding: 40px;
          }
        }
      `}</style>
    </div>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy28.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [isRedirecting, setIsRedirecting] = useState(false);
  const [step, setStep] = useState(1); // 1: login/register, 2: profile
  const [profiloCompleto, setProfiloCompleto] = useState(false);

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();

      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
        
        const completo = verificaProfiloCompleto(profilo);
        setProfiloCompleto(completo);
        
        // Skip to profile step if profile is incomplete
        if (!completo) {
          setStep(2);
        } else {
          // For users with complete profile, go directly to payment
          setStep(2);
        }
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const verificaProfiloCompleto = (profilo) => {
    return (
      profilo.nome &&
      profilo.cognome &&
      profilo.email &&
      profilo.indirizzo &&
      profilo.citta &&
      profilo.paese &&
      profilo.codice_postale &&
      profilo.telefono1
    );
  };

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  
  const salvaDatiCheckout = () => {
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: utente ? utente.id : email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
  };

  const registraCliente = async () => {
    const { error } = await supabase.from('clienti').upsert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      codice_postale: cap,
      created_at: new Date().toISOString()
    });

    if (error) {
      setErrore(testi.erroreCheckout + error.message);
      return false;
    }
    return true;
  };

  const loginEmail = async () => {
    setIsRedirecting(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });

    if (error) {
      setIsRedirecting(false);
      setErrore(error.message === 'Invalid login credentials' 
        ? testi.credenzialiErrate
        : error.message
      );
      return false;
    }

    await fetchUtente();
    setIsRedirecting(false);
    setStep(2);
    return true;
  };

  const registraUtente = async () => {
    setIsRedirecting(true);

    // Validate email and password
    if (!email || !password) {
      setErrore(testi.inserisciEmailPassword);
      setIsRedirecting(false);
      return;
    }

    if (!validaEmail(email)) {
      setErrore(testi.erroreEmail);
      setIsRedirecting(false);
      return;
    }

    // Create auth account
    const { error: signupError } = await supabase.auth.signUp({ 
      email, 
      password,
      options: {
        data: {
          nome,
          cognome
        }
      }
    });
    
    if (signupError) {
      setErrore(signupError.message);
      setIsRedirecting(false);
      return;
    }

    // Create/update customer profile
    const registrato = await registraCliente();
    if (!registrato) {
      setIsRedirecting(false);
      return;
    }

    // Login after registration
    const loggato = await loginEmail();
    if (loggato) {
      setStep(2);
    }
  };

  const verificaCampiObbligatori = () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      setErrore(testi.compilaCampi);
      return false;
    }

    if (!validaEmail(email)) {
      setErrore(testi.erroreEmail);
      return false;
    }

    return true;
  };

  const aggiornaProfilo = async () => {
    if (!verificaCampiObbligatori()) return false;
    
    setIsRedirecting(true);
    try {
      // Update profile in Supabase
      await registraCliente();
      
      // For new users, fetch user data
      if (!utente) {
        await fetchUtente();
      }
      
      setIsRedirecting(false);
      return true;
    } catch (error) {
      setErrore(testi.erroreAggiornamento + error.message);
      setIsRedirecting(false);
      return false;
    }
  };

  const handleProcediPagamento = async () => {
    // Ensure profile is complete
    const profiloValido = await aggiornaProfilo();
    if (!profiloValido) return;
    
    salvaDatiCheckout();
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };
  
  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      accesso: 'Accedi o Registrati',
      dettagli: 'I Tuoi Dettagli',
      recensione: 'Verifica i Tuoi Dati',
      loginNecessario: 'Per completare l\'acquisto:',
      login: 'Accedi',
      crea: 'Crea Account',
      registrati: 'Registrati',
      pagaOra: 'Procedi al pagamento',
      continua: 'Continua',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1*',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: 'Rimuovi',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout: ',
      erroreAggiornamento: 'Errore aggiornamento profilo: ',
      utenteEsistente: 'Utente già registrato',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      accesso: 'Login or Register',
      dettagli: 'Your Details',
      recensione: 'Review Your Information',
      loginNecessario: 'To complete your purchase:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      pagaOra: 'Proceed to payment',
      continua: 'Continue',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1*',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: 'Remove',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error: ',
      erroreAggiornamento: 'Profile update error: ',
      utenteEsistente: 'User already registered',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      accesso: 'Connexion ou Inscription',
      dettagli: 'Vos Détails',
      recensione: 'Vérifiez Vos Informations',
      loginNecessario: 'Pour finaliser votre achat :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      pagaOra: 'Procéder au paiement',
      continua: 'Continuer',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1*',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: 'Supprimer',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement : ',
      erroreAggiornamento: 'Erreur mise à jour profil : ',
      utenteEsistente: 'Utilisateur déjà enregistré',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      accesso: 'Anmelden oder Registrieren',
      dettagli: 'Ihre Daten',
      recensione: 'Überprüfen Sie Ihre Daten',
      loginNecessario: 'Um Ihren Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      pagaOra: 'Zur Zahlung',
      continua: 'Weiter',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1*',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: 'Entfernen',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout: ',
      erroreAggiornamento: 'Profilaktualisierungsfehler: ',
      utenteEsistente: 'Benutzer bereits registriert',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      accesso: 'Iniciar sesión o Registrarse',
      dettagli: 'Tus Detalles',
      recensione: 'Verifique Sus Datos',
      loginNecessario: 'Para completar su compra:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      pagaOra: 'Proceder al pago',
      continua: 'Continuar',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1*',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: 'Eliminar',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago: ',
      erroreAggiornamento: 'Error actualización perfil: ',
      utenteEsistente: 'Usuario ya registrado',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;
  
  return (
    <div className="checkout-container">
      <div className="card">
        <h1 className="title">{testi.titolo}</h1>
        
        {/* Cart Summary */}
        {carrello.length === 0 ? (
          <p className="empty-cart">{testi.vuoto}</p>
        ) : (
          <div className="cart-summary">
            <ul className="cart-items">
              {carrello.map((p, i) => (
                <li key={i} className="cart-item">
                  <div className="item-info">
                    <span className="quantity">{p.quantita || 1}x</span>
                    <span className="name">{p.nome}</span>
                    <span className="price">{'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}</span>
                  </div>
                  <button 
                    onClick={() => rimuoviDalCarrello(i)} 
                    className="remove-button"
                  >
                    {testi.rimuovi}
                  </button>
                </li>
              ))}
            </ul>
            <div className="total-section">
              <span>{testi.totale}</span>
              <span className="total-price">{'\u20AC'}{totaleFinale.toFixed(1)}</span>
            </div>
          </div>
        )}
        
        {/* Progress Steps */}
        <div className="progress-steps">
          <div className={`step ${step >= 1 ? 'active' : ''}`}>
            <div className="step-number">1</div>
            <div className="step-label">{testi.accesso}</div>
          </div>
          <div className="step-divider"></div>
          <div className={`step ${step >= 2 ? 'active' : ''}`}>
            <div className="step-number">2</div>
            <div className="step-label">{profiloCompleto ? testi.recensione : testi.dettagli}</div>
          </div>
        </div>
        
        {/* Step 1: Login/Register */}
        {step === 1 && (
          <div className="step-container">
            <h2 className="step-title">{testi.accesso}</h2>
            
            <div className="form-group">
              <input
                type="email"
                placeholder={testi.email}
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="input-field"
              />
              <input
                type="password"
                placeholder={testi.password}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="input-field"
              />
            </div>
            
            <div className="button-group">
              <button
                onClick={isRegistrazione ? registraUtente : loginEmail}
                disabled={isRedirecting}
                className="primary-button"
              >
                {isRedirecting ? testi.continua : (isRegistrazione ? testi.registrati : testi.login)}
              </button>
              <button
                onClick={() => setIsRegistrazione(!isRegistrazione)}
                disabled={isRedirecting}
                className="secondary-button"
              >
                {isRegistrazione ? testi.login : testi.crea}
              </button>
            </div>
          </div>
        )}
        
        {/* Step 2: Profile Details */}
        {step === 2 && (
          <div className="step-container">
            <h2 className="step-title">{profiloCompleto ? testi.recensione : testi.dettagli}</h2>
            
            <div className="form-grid">
              <input 
                placeholder={testi.nome} 
                value={nome} 
                onChange={e => setNome(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.cognome} 
                value={cognome} 
                onChange={e => setCognome(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.email} 
                value={email} 
                onChange={e => setEmail(e.target.value)} 
                className="input-field"
                disabled={!!utente}
              />
              <input 
                placeholder={testi.indirizzo} 
                value={indirizzo} 
                onChange={e => setIndirizzo(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.citta} 
                value={citta} 
                onChange={e => setCitta(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.cap} 
                value={cap} 
                onChange={e => setCap(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.paese} 
                value={paese} 
                onChange={e => setPaese(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.telefono1} 
                value={telefono1} 
                onChange={e => setTelefono1(e.target.value)} 
                className="input-field"
                required 
              />
              <input 
                placeholder={testi.telefono2} 
                value={telefono2} 
                onChange={e => setTelefono2(e.target.value)} 
                className="input-field"
              />
            </div>
            
            <button 
              onClick={handleProcediPagamento} 
              disabled={isRedirecting}
              className="payment-button"
            >
              {isRedirecting ? `${testi.pagaOra}...` : testi.pagaOra}
            </button>
          </div>
        )}
        
        {errore && (
          <div className="error-message">
            {errore}
          </div>
        )}
        
        {step > 1 && (
          <button 
            onClick={() => setStep(1)} 
            className="back-button"
          >
            {testi.back}
          </button>
        )}
      </div>
      
      <style jsx global>{`
        /* Force Euro symbol to display correctly */
        .price, .total-price {
          font-family: Arial, sans-serif !important;
        }
      `}</style>
      
      <style jsx>{`
        .checkout-container {
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 100vh;
          background-color: #121212;
          padding: 20px;
          color: white;
        }
        
        .card {
          width: 100%;
          max-width: 500px;
          background: #1e1e1e;
          border-radius: 16px;
          padding: 30px;
          box-shadow: 0 8px 30px rgba(0, 0, 0, 0.5);
        }
        
        .title {
          text-align: center;
          margin-bottom: 24px;
          font-size: 1.8rem;
          color: #fff;
        }
        
        .empty-cart {
          text-align: center;
          color: #aaa;
          margin: 20px 0;
        }
        
        .cart-summary {
          margin-bottom: 30px;
          border-bottom: 1px solid #333;
          padding-bottom: 20px;
        }
        
        .cart-items {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        
        .cart-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 12px 0;
          border-bottom: 1px solid #333;
        }
        
        .item-info {
          display: flex;
          gap: 10px;
          align-items: center;
          flex: 1;
        }
        
        .quantity {
          font-weight: bold;
        }
        
        .name {
          flex: 1;
        }
        
        .price {
          font-weight: bold;
          color: #fff;
          min-width: 60px;
          text-align: right;
        }
        
        .remove-button {
          background: none;
          border: none;
          color: #ff5252;
          cursor: pointer;
          font-size: 0.9rem;
          padding: 5px 10px;
          border-radius: 4px;
          transition: background 0.2s;
          margin-left: 10px;
        }
        
        .remove-button:hover {
          background: rgba(255, 82, 82, 0.1);
        }
        
        .total-section {
          display: flex;
          justify-content: space-between;
          margin-top: 15px;
          font-size: 1.2rem;
          font-weight: bold;
          padding-top: 15px;
        }
        
        .total-price {
          color: #fff;
          font-family: Arial, sans-serif;
        }
        
        .progress-steps {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin: 30px 0;
        }
        
        .step {
          display: flex;
          flex-direction: column;
          align-items: center;
          flex: 1;
        }
        
        .step-number {
          width: 36px;
          height: 36px;
          border-radius: 50%;
          background: #333;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-bottom: 8px;
        }
        
        .step.active .step-number {
          background: #0070f3;
          color: white;
        }
        
        .step-label {
          font-size: 0.85rem;
          text-align: center;
          color: #aaa;
        }
        
        .step.active .step-label {
          color: #fff;
        }
        
        .step-divider {
          flex: 1;
          height: 2px;
          background: #333;
          margin: 0 10px;
        }
        
        .step-container {
          margin-top: 20px;
        }
        
        .step-title {
          margin-bottom: 20px;
          font-size: 1.4rem;
          color: #fff;
        }
        
        .form-group {
          display: grid;
          gap: 15px;
          margin-bottom: 20px;
        }
        
        .form-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-bottom: 20px;
        }
        
        .input-field {
          width: 100%;
          padding: 14px;
          border-radius: 8px;
          border: 1px solid #333;
          background: #2a2a2a;
          color: white;
          font-size: 1rem;
        }
        
        .input-field:disabled {
          background: #333;
          color: #888;
        }
        
        .input-field::placeholder {
          color: #888;
        }
        
        .button-group {
          display: flex;
          gap: 12px;
          margin-bottom: 20px;
        }
        
        .primary-button {
          flex: 1;
          padding: 14px;
          border-radius: 8px;
          border: none;
          background: #0070f3;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
        }
        
        .primary-button:hover {
          background: #0060d0;
        }
        
        .primary-button:disabled {
          background: #0050b0;
          cursor: not-allowed;
        }
        
        .secondary-button {
          flex: 1;
          padding: 14px;
          border-radius: 8px;
          border: 1px solid #444;
          background: transparent;
          color: #ddd;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
        }
        
        .secondary-button:hover {
          background: #2a2a2a;
        }
        
        .secondary-button:disabled {
          opacity: 0.6;
          cursor: not-allowed;
        }
        
        .payment-button {
          width: 100%;
          padding: 16px;
          border-radius: 8px;
          border: none;
          background: #00c853;
          color: white;
          font-weight: bold;
          font-size: 1.1rem;
          cursor: pointer;
          transition: background 0.2s;
          margin-top: 10px;
        }
        
        .payment-button:hover {
          background: #00b84a;
        }
        
        .payment-button:disabled {
          background: #009e40;
          cursor: not-allowed;
        }
        
        .back-button {
          width: 100%;
          padding: 14px;
          border-radius: 8px;
          border: none;
          background: #444;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
          margin-top: 20px;
        }
        
        .back-button:hover {
          background: #333;
        }
        
        .error-message {
          padding: 15px;
          border-radius: 8px;
          background: rgba(255, 82, 82, 0.15);
          color: #ff5252;
          margin-top: 20px;
          text-align: center;
        }
        
        @media (min-width: 768px) {
          .form-grid {
            grid-template-columns: 1fr 1fr;
          }
          
          .card {
            padding: 40px;
          }
        }
      `}</style>
    </div>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page.js -----
'use client';

import { useEffect, useState, useRef } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function CheckoutPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const langPulito = lang.split('-')[0];
  const router = useRouter();
  const [carrello, setCarrello] = useState([]);
  const [utente, setUtente] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cap, setCap] = useState('');
  const [errore, setErrore] = useState('');
  const [showError, setShowError] = useState(false);
  const [isRegistrazione, setIsRegistrazione] = useState(false);
  const [isRedirecting, setIsRedirecting] = useState(false);
  const [step, setStep] = useState(1);
  const [profiloCompleto, setProfiloCompleto] = useState(false);
  const errorTimer = useRef(null);

  // Clear error timer on unmount
  useEffect(() => {
    return () => {
      if (errorTimer.current) clearTimeout(errorTimer.current);
    };
  }, []);

  const displayError = (message) => {
    setErrore(message);
    setShowError(true);
    
    if (errorTimer.current) clearTimeout(errorTimer.current);
    errorTimer.current = setTimeout(() => {
      setShowError(false);
    }, 5000);
    
    console.error('Checkout Error:', message);
  };

  const fetchUtente = async () => {
    const { data: session } = await supabase.auth.getSession();
    if (session.session?.user) {
      setUtente(session.session.user);
      const { data: profilo } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', session.session.user.email)
        .single();

      if (profilo) {
        setNome(profilo.nome || '');
        setCognome(profilo.cognome || '');
        setPaese(profilo.paese || '');
        setCitta(profilo.citta || '');
        setIndirizzo(profilo.indirizzo || '');
        setCap(profilo.codice_postale || '');
        setEmail(profilo.email || '');
        setTelefono1(profilo.telefono1 || '');
        setTelefono2(profilo.telefono2 || '');
        
        const completo = verificaProfiloCompleto(profilo);
        setProfiloCompleto(completo);
        
        if (!completo) {
          setStep(2);
        } else {
          setStep(2);
        }
      }
    }
  };

  useEffect(() => {
    fetchUtente();
    const dati = localStorage.getItem('carrello');
    if (dati) setCarrello(JSON.parse(dati));
  }, []);

  const verificaProfiloCompleto = (profilo) => {
    return (
      profilo.nome &&
      profilo.cognome &&
      profilo.email &&
      profilo.indirizzo &&
      profilo.citta &&
      profilo.paese &&
      profilo.codice_postale &&
      profilo.telefono1
    );
  };

  const validaEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  
  const salvaDatiCheckout = () => {
    const datiCarrello = localStorage.getItem('carrello');
    if (datiCarrello) {
      localStorage.setItem('checkout_dati', JSON.stringify({
        cliente_id: utente ? utente.id : email,
        carrello: JSON.parse(datiCarrello),
        totale: totaleFinale,
        email
      }));
    }
  };

  const registraCliente = async () => {
    try {
      const { error } = await supabase
        .from('clienti')
        .upsert(
          {
            email,
            nome,
            cognome,
            telefono1,
            telefono2,
            indirizzo,
            citta,
            paese,
            codice_postale: cap
          },
          { onConflict: 'email' }
        );

      if (error) {
        if (error.code === '23505') {
          // Duplicate email error
          displayError(testi.utenteEsistente);
        } else {
          displayError(`${testi.erroreCheckout}: ${error.message}`);
        }
        return false;
      }
      return true;
    } catch (error) {
      displayError(`${testi.erroreCheckout}: ${error.message}`);
      return false;
    }
  };

  const loginEmail = async () => {
    setIsRedirecting(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });

    if (error) {
      setIsRedirecting(false);
      displayError(error.message === 'Invalid login credentials' 
        ? testi.credenzialiErrate
        : error.message
      );
      return false;
    }

    await fetchUtente();
    setIsRedirecting(false);
    setStep(2);
    return true;
  };

  const registraUtente = async () => {
    setIsRedirecting(true);

    if (!email || !password) {
      displayError(testi.inserisciEmailPassword);
      setIsRedirecting(false);
      return;
    }

    if (!validaEmail(email)) {
      displayError(testi.erroreEmail);
      setIsRedirecting(false);
      return;
    }

    try {
      // Check if email already exists
      const { data: existing, error: checkError } = await supabase
        .from('clienti')
        .select('id')
        .eq('email', email)
        .maybeSingle();

      if (checkError) throw checkError;
      
      if (existing) {
        displayError(testi.utenteEsistente);
        setIsRedirecting(false);
        return;
      }

      // Create auth account
      const { error: signupError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });
      
      if (signupError) throw signupError;

      // Create customer profile
      const registrato = await registraCliente();
      if (!registrato) {
        setIsRedirecting(false);
        return;
      }

      // Login after registration
      const loggato = await loginEmail();
      if (loggato) {
        setStep(2);
      }
    } catch (error) {
      displayError(error.message || testi.erroreGenerico);
      setIsRedirecting(false);
    }
  };

  const verificaCampiObbligatori = () => {
    if (!nome || !cognome || !email || !indirizzo || !citta || !cap || !paese || !telefono1) {
      displayError(testi.compilaCampi);
      return false;
    }

    if (!validaEmail(email)) {
      displayError(testi.erroreEmail);
      return false;
    }

    return true;
  };

  const aggiornaProfilo = async () => {
    if (!verificaCampiObbligatori()) return false;
    
    setIsRedirecting(true);
    try {
      // Check if email is being changed to an existing one (for logged-in users)
      if (utente && email !== utente.email) {
        const { data: existing, error: checkError } = await supabase
          .from('clienti')
          .select('id')
          .eq('email', email)
          .maybeSingle();

        if (checkError) throw checkError;
        
        if (existing) {
          displayError(testi.utenteEsistente);
          setIsRedirecting(false);
          return false;
        }
      }

      // Update profile in Supabase
      const success = await registraCliente();
      if (!success) {
        setIsRedirecting(false);
        return false;
      }
      
      // For new users, fetch user data
      if (!utente) {
        await fetchUtente();
      }
      
      setIsRedirecting(false);
      return true;
    } catch (error) {
      displayError(testi.erroreAggiornamento + (error.message || ''));
      setIsRedirecting(false);
      return false;
    }
  };

  const handleProcediPagamento = async () => {
    const profiloValido = await aggiornaProfilo();
    if (!profiloValido) return;
    
    salvaDatiCheckout();
    router.push(`/pagamento?lang=${lang}&from_checkout=true`);
  };

  const rimuoviDalCarrello = (indice) => {
    const nuovo = [...carrello];
    nuovo.splice(indice, 1);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };
  
  const testiTutti = {
    it: {
      titolo: 'Riepilogo Ordine',
      vuoto: 'Il carrello è vuoto.',
      accesso: 'Accedi o Registrati',
      dettagli: 'I Tuoi Dettagli',
      recensione: 'Verifica i Tuoi Dati',
      loginNecessario: 'Per completare l\'acquisto:',
      login: 'Accedi',
      crea: 'Crea Account',
      registrati: 'Registrati',
      pagaOra: 'Procedi al pagamento',
      continua: 'Continua',
      back: 'Indietro',
      nome: 'Nome',
      cognome: 'Cognome',
      indirizzo: 'Indirizzo',
      citta: 'Città',
      cap: 'Codice postale',
      paese: 'Paese',
      email: 'Email',
      password: 'Password',
      telefono1: 'Telefono 1*',
      telefono2: 'Telefono 2',
      totale: 'Totale:',
      rimuovi: 'Rimuovi',
      compilaCampi: 'Compila tutti i campi obbligatori',
      erroreEmail: 'Inserisci un indirizzo email valido',
      erroreCheckout: 'Errore durante il checkout',
      erroreAggiornamento: 'Errore aggiornamento profilo',
      erroreGenerico: 'Si è verificato un errore imprevisto',
      utenteEsistente: 'Email già registrata. Usa un\'altra email o effettua il login',
      inserisciEmailPassword: 'Inserisci email e password',
      credenzialiErrate: 'Credenziali di accesso non valide',
    },
    en: {
      titolo: 'Order Summary',
      vuoto: 'Your cart is empty.',
      accesso: 'Login or Register',
      dettagli: 'Your Details',
      recensione: 'Review Your Information',
      loginNecessario: 'To complete your purchase:',
      login: 'Login',
      crea: 'Create Account',
      registrati: 'Register',
      pagaOra: 'Proceed to payment',
      continua: 'Continue',
      back: 'Back',
      nome: 'First Name',
      cognome: 'Last Name',
      indirizzo: 'Address',
      citta: 'City',
      cap: 'Postal Code',
      paese: 'Country',
      email: 'Email',
      password: 'Password',
      telefono1: 'Phone 1*',
      telefono2: 'Phone 2',
      totale: 'Total:',
      rimuovi: 'Remove',
      compilaCampi: 'Please fill all required fields',
      erroreEmail: 'Please enter a valid email address',
      erroreCheckout: 'Checkout error',
      erroreAggiornamento: 'Profile update error',
      erroreGenerico: 'An unexpected error occurred',
      utenteEsistente: 'Email already registered. Use another email or login',
      inserisciEmailPassword: 'Enter email and password',
      credenzialiErrate: 'Invalid login credentials',
    },
    fr: {
      titolo: 'Récapitulatif de la commande',
      vuoto: 'Votre panier est vide.',
      accesso: 'Connexion ou Inscription',
      dettagli: 'Vos Détails',
      recensione: 'Vérifiez Vos Informations',
      loginNecessario: 'Pour finaliser votre achat :',
      login: 'Connexion',
      crea: 'Créer un compte',
      registrati: 'S\'inscrire',
      pagaOra: 'Procéder au paiement',
      continua: 'Continuer',
      back: 'Retour',
      nome: 'Prénom',
      cognome: 'Nom',
      indirizzo: 'Adresse',
      citta: 'Ville',
      cap: 'Code postal',
      paese: 'Pays',
      email: 'Email',
      password: 'Mot de passe',
      telefono1: 'Téléphone 1*',
      telefono2: 'Téléphone 2',
      totale: 'Total :',
      rimuovi: 'Supprimer',
      compilaCampi: 'Veuillez remplir tous les champs requis',
      erroreEmail: 'Veuillez entrer une adresse email valide',
      erroreCheckout: 'Erreur lors du paiement',
      erroreAggiornamento: 'Erreur mise à jour profil',
      erroreGenerico: 'Une erreur inattendue s\'est produite',
      utenteEsistente: 'Email déjà enregistrée. Utilisez une autre email ou connectez-vous',
      inserisciEmailPassword: 'Entrez email et mot de passe',
      credenzialiErrate: 'Identifiants de connexion invalides',
    },
    de: {
      titolo: 'Bestellübersicht',
      vuoto: 'Ihr Warenkorb ist leer.',
      accesso: 'Anmelden oder Registrieren',
      dettagli: 'Ihre Daten',
      recensione: 'Überprüfen Sie Ihre Daten',
      loginNecessario: 'Um Ihren Kauf abzuschließen:',
      login: 'Anmelden',
      crea: 'Konto erstellen',
      registrati: 'Registrieren',
      pagaOra: 'Zur Zahlung',
      continua: 'Weiter',
      back: 'Zurück',
      nome: 'Vorname',
      cognome: 'Nachname',
      indirizzo: 'Adresse',
      citta: 'Stadt',
      cap: 'Postleitzahl',
      paese: 'Land',
      email: 'E-Mail',
      password: 'Passwort',
      telefono1: 'Telefon 1*',
      telefono2: 'Telefon 2',
      totale: 'Gesamt:',
      rimuovi: 'Entfernen',
      compilaCampi: 'Bitte füllen Sie alle Pflichtfelder aus',
      erroreEmail: 'Bitte geben Sie eine gültige E-Mail-Adresse ein',
      erroreCheckout: 'Fehler beim Checkout',
      erroreAggiornamento: 'Profilaktualisierungsfehler',
      erroreGenerico: 'Ein unerwarteter Fehler ist aufgetreten',
      utenteEsistente: 'E-Mail bereits registriert. Verwenden Sie eine andere E-Mail oder melden Sie sich an',
      inserisciEmailPassword: 'E-Mail und Passwort eingeben',
      credenzialiErrate: 'Ungültige Anmeldedaten',
    },
    es: {
      titolo: 'Resumen del pedido',
      vuoto: 'Tu carrito está vacío.',
      accesso: 'Iniciar sesión o Registrarse',
      dettagli: 'Tus Detalles',
      recensione: 'Verifique Sus Datos',
      loginNecessario: 'Para completar su compra:',
      login: 'Iniciar sesión',
      crea: 'Crear cuenta',
      registrati: 'Registrarse',
      pagaOra: 'Proceder al pago',
      continua: 'Continuar',
      back: 'Atrás',
      nome: 'Nombre',
      cognome: 'Apellido',
      indirizzo: 'Dirección',
      citta: 'Ciudad',
      cap: 'Código postal',
      paese: 'País',
      email: 'Correo electrónico',
      password: 'Contraseña',
      telefono1: 'Teléfono 1*',
      telefono2: 'Teléfono 2',
      totale: 'Total:',
      rimuovi: 'Eliminar',
      compilaCampi: 'Completa todos los campos obligatorios',
      erroreEmail: 'Introduce un correo electrónico válido',
      erroreCheckout: 'Error en el pago',
      erroreAggiornamento: 'Error actualización perfil',
      erroreGenerico: 'Ocurrió un error inesperado',
      utenteEsistente: 'Correo electrónico ya registrado. Utilice otro correo o inicie sesión',
      inserisciEmailPassword: 'Introduce correo y contraseña',
      credenzialiErrate: 'Credenciales de acceso no válidas',
    }
  };

  const testi = testiTutti[langPulito] || testiTutti.it;
  const totaleProdotti = carrello.reduce((tot, p) => tot + parseFloat(p.prezzo || 0) * (p.quantita || 1), 0);
  const totaleFinale = Math.round(totaleProdotti * 10) / 10;
  
  return (
    <div className="checkout-container">
      <div className="card">
        <h1 className="title">{testi.titolo}</h1>
        
        {/* Cart Summary */}
        {carrello.length === 0 ? (
          <p className="empty-cart">{testi.vuoto}</p>
        ) : (
          <div className="cart-summary">
            <ul className="cart-items">
              {carrello.map((p, i) => (
                <li key={i} className="cart-item">
                  <div className="item-info">
                    <span className="quantity">{p.quantita || 1}x</span>
                    <span className="name">{p.nome}</span>
                    <span className="price">{'\u20AC'}{(Number(p.prezzo || 0) * (p.quantita || 1)).toFixed(1)}</span>
                  </div>
                  <button 
                    onClick={() => rimuoviDalCarrello(i)} 
                    className="remove-button"
                  >
                    {testi.rimuovi}
                  </button>
                </li>
              ))}
            </ul>
            <div className="total-section">
              <span>{testi.totale}</span>
              <span className="total-price">{'\u20AC'}{totaleFinale.toFixed(1)}</span>
            </div>
          </div>
        )}
        
        {/* Progress Steps */}
        <div className="progress-steps">
          <div className={`step ${step >= 1 ? 'active' : ''}`}>
            <div className="step-number">1</div>
            <div className="step-label">{testi.accesso}</div>
          </div>
          <div className="step-divider"></div>
          <div className={`step ${step >= 2 ? 'active' : ''}`}>
            <div className="step-number">2</div>
            <div className="step-label">{profiloCompleto ? testi.recensione : testi.dettagli}</div>
          </div>
        </div>
        
        {/* Persistent Error Message */}
        {showError && (
          <div className="error-message">
            <div className="error-header">
              <strong>{langPulito === 'en' ? 'Error:' : 
                      langPulito === 'fr' ? 'Erreur:' : 
                      langPulito === 'de' ? 'Fehler:' : 
                      langPulito === 'es' ? 'Error:' : 'Errore:'}
              </strong>
              <button 
                className="close-error"
                onClick={() => setShowError(false)}
              >
                ×
              </button>
            </div>
            {errore}
          </div>
        )}
        
        {/* Step 1: Login/Register */}
        {step === 1 && (
          <div className="step-container">
            <h2 className="step-title">{testi.accesso}</h2>
            
            <div className="form-group">
              <input
                type="email"
                placeholder={testi.email}
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="input-field"
              />
              <input
                type="password"
                placeholder={testi.password}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="input-field"
              />
            </div>
            
            <div className="button-group">
              <button
                onClick={isRegistrazione ? registraUtente : loginEmail}
                disabled={isRedirecting}
                className="primary-button"
              >
                {isRedirecting ? testi.continua : (isRegistrazione ? testi.registrati : testi.login)}
              </button>
              <button
                onClick={() => setIsRegistrazione(!isRegistrazione)}
                disabled={isRedirecting}
                className="secondary-button"
              >
                {isRegistrazione ? testi.login : testi.crea}
              </button>
            </div>
          </div>
        )}
        
        {/* Step 2: Profile Details */}
        {step === 2 && (
          <div className="step-container">
            <h2 className="step-title">{profiloCompleto ? testi.recensione : testi.dettagli}</h2>
            
            <div className="form-grid">
              <input 
                placeholder={testi.nome} 
                value={nome} 
                onChange={e => setNome(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.cognome} 
                value={cognome} 
                onChange={e => setCognome(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.email} 
                value={email} 
                onChange={e => setEmail(e.target.value)} 
                className="input-field"
                disabled={!!utente}
              />
              <input 
                placeholder={testi.indirizzo} 
                value={indirizzo} 
                onChange={e => setIndirizzo(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.citta} 
                value={citta} 
                onChange={e => setCitta(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.cap} 
                value={cap} 
                onChange={e => setCap(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.paese} 
                value={paese} 
                onChange={e => setPaese(e.target.value)} 
                className="input-field"
              />
              <input 
                placeholder={testi.telefono1} 
                value={telefono1} 
                onChange={e => setTelefono1(e.target.value)} 
                className="input-field"
                required 
              />
              <input 
                placeholder={testi.telefono2} 
                value={telefono2} 
                onChange={e => setTelefono2(e.target.value)} 
                className="input-field"
              />
            </div>
            
            <button 
              onClick={handleProcediPagamento} 
              disabled={isRedirecting}
              className="payment-button"
            >
              {isRedirecting ? `${testi.pagaOra}...` : testi.pagaOra}
            </button>
          </div>
        )}
        
        {step > 1 && (
          <button 
            onClick={() => setStep(1)} 
            className="back-button"
          >
            {testi.back}
          </button>
        )}
      </div>
      
      <style jsx global>{`
        .price, .total-price {
          font-family: Arial, sans-serif !important;
        }
      `}</style>
      
      <style jsx>{`
        .checkout-container {
          display: flex;
          justify-content: center;
          align-items: center;
          min-height: 100vh;
          background-color: #121212;
          padding: 20px;
          color: white;
        }
        
        .card {
          width: 100%;
          max-width: 500px;
          background: #1e1e1e;
          border-radius: 16px;
          padding: 30px;
          box-shadow: 0 8px 30px rgba(0, 0, 0, 0.5);
        }
        
        .title {
          text-align: center;
          margin-bottom: 24px;
          font-size: 1.8rem;
          color: #fff;
        }
        
        .empty-cart {
          text-align: center;
          color: #aaa;
          margin: 20px 0;
        }
        
        .cart-summary {
          margin-bottom: 30px;
          border-bottom: 1px solid #333;
          padding-bottom: 20px;
        }
        
        .cart-items {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        
        .cart-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 12px 0;
          border-bottom: 1px solid #333;
        }
        
        .item-info {
          display: flex;
          gap: 10px;
          align-items: center;
          flex: 1;
        }
        
        .quantity {
          font-weight: bold;
        }
        
        .name {
          flex: 1;
        }
        
        .price {
          font-weight: bold;
          color: #fff;
          min-width: 60px;
          text-align: right;
        }
        
        .remove-button {
          background: none;
          border: none;
          color: #ff5252;
          cursor: pointer;
          font-size: 0.9rem;
          padding: 5px 10px;
          border-radius: 4px;
          transition: background 0.2s;
          margin-left: 10px;
        }
        
        .remove-button:hover {
          background: rgba(255, 82, 82, 0.1);
        }
        
        .total-section {
          display: flex;
          justify-content: space-between;
          margin-top: 15px;
          font-size: 1.2rem;
          font-weight: bold;
          padding-top: 15px;
        }
        
        .total-price {
          color: #fff;
          font-family: Arial, sans-serif;
        }
        
        .progress-steps {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin: 30px 0;
        }
        
        .step {
          display: flex;
          flex-direction: column;
          align-items: center;
          flex: 1;
        }
        
        .step-number {
          width: 36px;
          height: 36px;
          border-radius: 50%;
          background: #333;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          margin-bottom: 8px;
        }
        
        .step.active .step-number {
          background: #0070f3;
          color: white;
        }
        
        .step-label {
          font-size: 0.85rem;
          text-align: center;
          color: #aaa;
        }
        
        .step.active .step-label {
          color: #fff;
        }
        
        .step-divider {
          flex: 1;
          height: 2px;
          background: #333;
          margin: 0 10px;
        }
        
        .step-container {
          margin-top: 20px;
        }
        
        .step-title {
          margin-bottom: 20px;
          font-size: 1.4rem;
          color: #fff;
        }
        
        .form-group {
          display: grid;
          gap: 15px;
          margin-bottom: 20px;
        }
        
        .form-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 15px;
          margin-bottom: 20px;
        }
        
        .input-field {
          width: 100%;
          padding: 14px;
          border-radius: 8px;
          border: 1px solid #333;
          background: #2a2a2a;
          color: white;
          font-size: 1rem;
        }
        
        .input-field:disabled {
          background: #333;
          color: #888;
        }
        
        .input-field::placeholder {
          color: #888;
        }
        
        .button-group {
          display: flex;
          gap: 12px;
          margin-bottom: 20px;
        }
        
        .primary-button {
          flex: 1;
          padding: 14px;
          border-radius: 8px;
          border: none;
          background: #0070f3;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
        }
        
        .primary-button:hover {
          background: #0060d0;
        }
        
        .primary-button:disabled {
          background: #0050b0;
          cursor: not-allowed;
        }
        
        .secondary-button {
          flex: 1;
          padding: 14px;
          border-radius: 8px;
          border: 1px solid #444;
          background: transparent;
          color: #ddd;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
        }
        
        .secondary-button:hover {
          background: #2a2a2a;
        }
        
        .secondary-button:disabled {
          opacity: 0.6;
          cursor: not-allowed;
        }
        
        .payment-button {
          width: 100%;
          padding: 16px;
          border-radius: 8px;
          border: none;
          background: #00c853;
          color: white;
          font-weight: bold;
          font-size: 1.1rem;
          cursor: pointer;
          transition: background 0.2s;
          margin-top: 10px;
        }
        
        .payment-button:hover {
          background: #00b84a;
        }
        
        .payment-button:disabled {
          background: #009e40;
          cursor: not-allowed;
        }
        
        .back-button {
          width: 100%;
          padding: 14px;
          border-radius: 8px;
          border: none;
          background: #444;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          transition: background 0.2s;
          margin-top: 20px;
        }
        
        .back-button:hover {
          background: #333;
        }
        
        .error-message {
          padding: 15px;
          border-radius: 8px;
          background: rgba(255, 82, 82, 0.15);
          color: #ff5252;
          margin-top: 20px;
          border: 1px solid rgba(255, 82, 82, 0.3);
          position: relative;
        }
        
        .error-header {
          display: flex;
          justify-content: space-between;
          margin-bottom: 5px;
        }
        
        .close-error {
          background: none;
          border: none;
          color: #ff5252;
          font-size: 1.2rem;
          cursor: pointer;
          padding: 0 5px;
        }
        
        @media (min-width: 768px) {
          .form-grid {
            grid-template-columns: 1fr 1fr;
          }
          
          .card {
            padding: 40px;
          }
        }

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/de/page.js -----
'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function GermanPage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000 }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="de" />
      </div>

    </main>
  );
}


----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/en/page.js -----
'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function EnglishPage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      {/* Back to Home Button */}
      <div style={{ 
        position: 'fixed', 
        top: '20px', 
        left: '20px', 
        zIndex: 1000 
      }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      {/* Hero Image */}
      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      {/* Category Buttons */}
      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="en" />
      </div>

    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/es/page.js -----
'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function SpanishPage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000 }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="es" />
      </div>

    </main>
  );
}


----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/eventi/page.js -----
export default function EventiPage() {
    return (
      <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', textAlign: 'center' }}>
        <h1 style={{ fontSize: '2rem' }}>🎉 Eventi</h1>
        <p>Questa è la pagina degli eventi. In sviluppo.</p>
      </main>
    );
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/fr/page.js -----

'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function FrenchPage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000 }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="fr" />
      </div>

    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy 2.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const langParam = (params.get('lang') || '').trim();
  const lang = ['it','en','fr','de','es','zh','ar','ja'].includes(langParam) ? langParam : 'it';
  const router = useRouter();
  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l’ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车',
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => {

    console.log('🌐 Lingua attiva:', lang);
    console.log('🗝️  Chiavi disponibili:', Object.keys(traduzioni));
    console.log('📘 Traduzione corrente:', traduzioni[lang]);
  

  if (!traduzioni[lang]) {
    console.warn(`⚠️ Traduzioni mancanti per la lingua: ${lang}`);
  }
  return traduzioni[lang]?.[key] ?? traduzioni['it'][key] ?? key;
};
  const sottocategorie = {
    anelli: { it: 'anelli', en: 'rings', fr: 'bagues', de: 'ringe', es: 'anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'collane', en: 'necklaces', fr: 'colliers', de: 'ketten', es: 'collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'bracciali', en: 'bracelets', fr: 'bracelets', de: 'armbänder', es: 'pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'orecchini', en: 'earrings', fr: 'boucles d’oreilles', de: 'ohrringe', es: 'pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }

      const carrelloSalvato = localStorage.getItem('carrello');
      if (carrelloSalvato) setCarrello(JSON.parse(carrelloSalvato));
    };
    fetchProdotti();
  }, []);
  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovo = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovo);
    localStorage.setItem('carrello', JSON.stringify(nuovo));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', textAlign: 'center', marginBottom: '2rem' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad?.[lang] ?? trad.it
}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'flex',
        gap: '1rem',
        overflowX: 'auto',
        padding: '1rem'
      }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.65rem',
              textAlign: 'center',
              flex: '0 0 auto',
              width: '160px',
              scrollSnapAlign: 'start',
              position: 'relative'
            }}>
              {prodotto.offerta && (
                <div style={{
                  position: 'absolute',
                  top: '6px',
                  left: '6px',
                  backgroundColor: 'rgba(255, 0, 0, 0.6)',
                  color: 'white',
                  padding: '2px 4px',
                  borderRadius: '3px',
                  fontSize: '0.5rem',
                  transform: 'rotate(-12deg)',
                  fontWeight: 'bold',
                }}>✨ OFFERTA</div>
              )}
              {prodotto.quantita === 0 && (
                <div style={{
                  position: 'absolute',
                  top: '6px',
                  right: '6px',
                  backgroundColor: 'rgba(255, 0, 0, 0.2)',
                  color: 'red',
                  padding: '2px 4px',
                  fontSize: '0.5rem',
                  borderRadius: '3px',
                  transform: 'rotate(-12deg)',
                  fontWeight: 'bold'
                }}>{t('venduto')}</div>
              )}
              <img
                src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
                alt={prodotto.nome}
                style={{ width: '100%', height: 'auto', maxHeight: '80px', objectFit: 'contain', borderRadius: '4px', marginBottom: '0.3rem', cursor: 'pointer' }}
                onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              {prodotto.offerta ? (
                <p style={{ fontFamily: 'Arial' }}>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                    {'\u20AC'} {prezzoNum.toFixed(1)}
                  </span>
                  <span style={{ color: 'red', fontWeight: 'bold' }}>
                    {'\u20AC'} {prezzoScontato.toFixed(1)} (-{scontoNum}%)
                  </span>
                </p>
              ) : (
                <p style={{ fontFamily: 'Arial' }}>
                  {'\u20AC'} {prezzoNum.toFixed(1)}
                </p>
              )}
              <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem' }}>
                <button onClick={() => cambiaQuantita(prodotto.id, -1)} style={{ border: 'none', background: 'none', fontSize: '1rem' }}>–</button>
                <input type="text" value={quantita[prodotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
                <button onClick={() => cambiaQuantita(prodotto.id, 1)} style={{ border: 'none', background: 'none', fontSize: '1rem' }}>+</button>
              </div>
              <button onClick={() => aggiungiAlCarrello(prodotto)} style={{ marginTop: '0.3rem', padding: '0.3rem', fontSize: '0.65rem', backgroundColor: '#333', color: 'white', borderRadius: '4px', border: 'none' }}>
                {t('aggiungi')}
              </button>
            </div>
          );
        })}
      </div>
      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>

          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}
          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}
      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy18.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l’ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车', 
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    anelli: { it: 'anelli', en: 'rings', fr: 'bagues', de: 'ringe', es: 'anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'collane', en: 'necklaces', fr: 'colliers', de: 'ketten', es: 'collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'bracciali', en: 'bracelets', fr: 'bracelets', de: 'armbänder', es: 'pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'orecchini', en: 'earrings', fr: 'boucles d’oreilles', de: 'ohrringe', es: 'pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '1rem',
        width: '100%',
        padding: '0.5rem',
        scrollSnapType: 'x mandatory'
      }}>
        {filtrati.map(prodotto => (
          <div key={prodotto.id} style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '0.65rem',
            textAlign: 'center',
            flex: '0 0 auto',
            width: '160px',
            scrollSnapAlign: 'start',
            position: 'relative'
          }}>
            {prodotto.quantita === 0 && (
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                color: 'red',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-12deg)',
                fontWeight: 'bold'
              }}>
                {t('venduto')}
              </div>
            )}
            <img
              src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
              alt={prodotto.nome}
              style={{
                width: '100%',
                height: 'auto',
                maxHeight: '80px',
                objectFit: 'contain',
                borderRadius: '4px',
                marginBottom: '0.3rem',
                cursor: 'pointer'
              }}
              onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
            />
            <strong>{prodotto.nome}</strong>
            <p>{prodotto.taglia}</p>
            <p>
              {prodotto.prezzo !== undefined && !isNaN(Number(prodotto.prezzo))
                ? new Intl.NumberFormat('it-IT', { style: 'currency', currency: 'EUR' }).format(Number(prodotto.prezzo))
                : ''}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
              <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

              <input
                type="text"
                value={quantita[prodotto.id] || 1}
                readOnly
                style={{
                  width: '1.8rem',
                  textAlign: 'center',
                  background: 'white',
                  color: 'black',
                  fontSize: '0.9rem',
                  border: '1px solid black',
                  borderRadius: '4px',
                  padding: '1px 3px'
                }}
              />

              <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
            </div>

            <button
              onClick={() => aggiungiAlCarrello(prodotto)}
              style={{
                padding: '0.2rem 0.4rem',
                fontSize: '0.6rem',
                backgroundColor: '#333',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        ))}
      </div>

{carrello.length > 0 && (
  <div style={{
    marginTop: '2rem',
    backgroundColor: '#222',
    padding: '1rem',
    borderRadius: '8px',
    width: '100%',
    maxWidth: '400px',
    textAlign: 'left',
    marginLeft: 'auto',
    marginRight: 'auto'
  }}>
    <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
    {Array.from(new Set(carrello.map(p => p.id))).map(id => {
      const prodotto = carrello.find(p => p.id === id);
      const qta = carrello.filter(p => p.id === id).length;
      return (
        <div key={id} style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '0.3rem 0',
          borderBottom: '1px solid #444'
        }}>
          <span>{prodotto.nome} × {qta}</span>
          <button onClick={() => rimuoviDalCarrello(id)}
            style={{
              background: 'red',
              color: 'white',
              border: 'none',
              padding: '0.2rem 0.5rem',
              fontSize: '0.7rem',
              borderRadius: '4px',
              cursor: 'pointer'
            }}>{t('rimuovi')}</button>
        </div>
      );
    })}
    <button
      onClick={() => router.push(`/checkout?lang=${lang}`)}
      style={{
        marginTop: '1rem',
        width: '100%',
        backgroundColor: 'green',
        color: 'white',
        border: 'none',
        padding: '0.5rem',
        borderRadius: '6px',
        fontSize: '1rem',
        cursor: 'pointer'
      }}
    >
      {t('checkout')}
    </button>
  </div>
)}

<div style={{ textAlign: 'center', marginTop: '2rem' }}>
  <button
    onClick={() => router.push(`/?lang=${lang}`)}
    style={{
      marginTop: '1rem',
      backgroundColor: '#444',
      color: 'white',
      padding: '0.6rem 1.2rem',
      border: 'none',
      borderRadius: '8px',
      fontSize: '0.95rem',
      cursor: 'pointer'
    }}
  >
    {t('indietro')}
  </button>
</div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy19.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l’ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车', 
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    anelli: { it: 'anelli', en: 'rings', fr: 'bagues', de: 'ringe', es: 'anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'collane', en: 'necklaces', fr: 'colliers', de: 'ketten', es: 'collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'bracciali', en: 'bracelets', fr: 'bracelets', de: 'armbänder', es: 'pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'orecchini', en: 'earrings', fr: 'boucles d’oreilles', de: 'ohrringe', es: 'pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '1rem',
        width: '100%',
        padding: '0.5rem',
        scrollSnapType: 'x mandatory'
      }}>
        {filtrati.map(prodotto => (
          <div key={prodotto.id} style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '0.65rem',
            textAlign: 'center',
            flex: '0 0 auto',
            width: '160px',
            scrollSnapAlign: 'start',
            position: 'relative'
          }}>
            {prodotto.quantita === 0 && (
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                color: 'red',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-12deg)',
                fontWeight: 'bold'
              }}>
                {t('venduto')}
              </div>
            )}
            <img
              src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
              alt={prodotto.nome}
              style={{
                width: '100%',
                height: 'auto',
                maxHeight: '80px',
                objectFit: 'contain',
                borderRadius: '4px',
                marginBottom: '0.3rem',
                cursor: 'pointer'
              }}
              onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
            />
            <strong>{prodotto.nome}</strong>
            <p>{prodotto.taglia}</p>
            <p style={{ fontFamily: 'Arial, sans-serif' }}>
              {'\u20AC'} {(Math.round(Number(prodotto.prezzo || 0) * 10) / 10).toFixed(1)}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
              <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

              <input
                type="text"
                value={quantita[prodotto.id] || 1}
                readOnly
                style={{
                  width: '1.8rem',
                  textAlign: 'center',
                  background: 'white',
                  color: 'black',
                  fontSize: '0.9rem',
                  border: '1px solid black',
                  borderRadius: '4px',
                  padding: '1px 3px'
                }}
              />

              <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
            </div>

            <button
              onClick={() => aggiungiAlCarrello(prodotto)}
              style={{
                padding: '0.2rem 0.4rem',
                fontSize: '0.6rem',
                backgroundColor: '#333',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        ))}
      </div>

{carrello.length > 0 && (
  <div style={{
    marginTop: '2rem',
    backgroundColor: '#222',
    padding: '1rem',
    borderRadius: '8px',
    width: '100%',
    maxWidth: '400px',
    textAlign: 'left',
    marginLeft: 'auto',
    marginRight: 'auto'
  }}>
    <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
    {Array.from(new Set(carrello.map(p => p.id))).map(id => {
      const prodotto = carrello.find(p => p.id === id);
      const qta = carrello.filter(p => p.id === id).length;
      return (
        <div key={id} style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '0.3rem 0',
          borderBottom: '1px solid #444'
        }}>
          <span>{prodotto.nome} × {qta}</span>
          <button onClick={() => rimuoviDalCarrello(id)}
            style={{
              background: 'red',
              color: 'white',
              border: 'none',
              padding: '0.2rem 0.5rem',
              fontSize: '0.7rem',
              borderRadius: '4px',
              cursor: 'pointer'
            }}>{t('rimuovi')}</button>
        </div>
      );
    })}
    <button
      onClick={() => router.push(`/checkout?lang=${lang}`)}
      style={{
        marginTop: '1rem',
        width: '100%',
        backgroundColor: 'green',
        color: 'white',
        border: 'none',
        padding: '0.5rem',
        borderRadius: '6px',
        fontSize: '1rem',
        cursor: 'pointer'
      }}
    >
      {t('checkout')}
    </button>
  </div>
)}

<div style={{ textAlign: 'center', marginTop: '2rem' }}>
  <button
    onClick={() => router.push(`/?lang=${lang}`)}
    style={{
      marginTop: '1rem',
      backgroundColor: '#444',
      color: 'white',
      padding: '0.6rem 1.2rem',
      border: 'none',
      borderRadius: '8px',
      fontSize: '0.95rem',
      cursor: 'pointer'
    }}
  >
    {t('indietro')}
  </button>
</div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy20.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l’ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车', 
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    anelli: { it: 'anelli', en: 'rings', fr: 'bagues', de: 'ringe', es: 'anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'collane', en: 'necklaces', fr: 'colliers', de: 'ketten', es: 'collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'bracciali', en: 'bracelets', fr: 'bracelets', de: 'armbänder', es: 'pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'orecchini', en: 'earrings', fr: 'boucles d’oreilles', de: 'ohrringe', es: 'pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '1rem',
        width: '100%',
        padding: '0.5rem',
        scrollSnapType: 'x mandatory'
      }}>
        {filtrati.map(prodotto => (
          <div key={prodotto.id} style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '0.65rem',
            textAlign: 'center',
            flex: '0 0 auto',
            width: '160px',
            scrollSnapAlign: 'start',
            position: 'relative'
          }}>
            {prodotto.quantita === 0 && (
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                color: 'red',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-12deg)',
                fontWeight: 'bold'
              }}>
                {t('venduto')}
              </div>
            )}
            <img
              src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
              alt={prodotto.nome}
              style={{
                width: '100%',
                height: 'auto',
                maxHeight: '80px',
                objectFit: 'contain',
                borderRadius: '4px',
                marginBottom: '0.3rem',
                cursor: 'pointer'
              }}
              onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
            />
            <strong>{prodotto.nome}</strong>
            <p>{prodotto.taglia}</p>
            <p style={{ fontFamily: 'Arial, sans-serif' }}>
              {'\u20AC'} {(Math.round(Number(prodotto.prezzo || 0) * 10) / 10).toFixed(1)}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
              <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

              <input
                type="text"
                value={quantita[prodotto.id] || 1}
                readOnly
                style={{
                  width: '1.8rem',
                  textAlign: 'center',
                  background: 'white',
                  color: 'black',
                  fontSize: '0.9rem',
                  border: '1px solid black',
                  borderRadius: '4px',
                  padding: '1px 3px'
                }}
              />

              <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
            </div>

            <button
              onClick={() => aggiungiAlCarrello(prodotto)}
              style={{
                padding: '0.2rem 0.4rem',
                fontSize: '0.6rem',
                backgroundColor: '#333',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        ))}
      </div>

{carrello.length > 0 && (
  <div style={{
    marginTop: '2rem',
    backgroundColor: '#222',
    padding: '1rem',
    borderRadius: '8px',
    width: '100%',
    maxWidth: '400px',
    textAlign: 'left',
    marginLeft: 'auto',
    marginRight: 'auto'
  }}>
    <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
    {Array.from(new Set(carrello.map(p => p.id))).map(id => {
      const prodotto = carrello.find(p => p.id === id);
      const qta = carrello.filter(p => p.id === id).length;
      return (
        <div key={id} style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '0.3rem 0',
          borderBottom: '1px solid #444'
        }}>
          <span>{prodotto.nome} × {qta}</span>
          <button onClick={() => rimuoviDalCarrello(id)}
            style={{
              background: 'red',
              color: 'white',
              border: 'none',
              padding: '0.2rem 0.5rem',
              fontSize: '0.7rem',
              borderRadius: '4px',
              cursor: 'pointer'
            }}>{t('rimuovi')}</button>
        </div>
      );
    })}
    <button
      onClick={() => router.push(`/checkout?lang=${lang}`)}
      style={{
        marginTop: '1rem',
        width: '100%',
        backgroundColor: 'green',
        color: 'white',
        border: 'none',
        padding: '0.5rem',
        borderRadius: '6px',
        fontSize: '1rem',
        cursor: 'pointer'
      }}
    >
      {t('checkout')}
    </button>
  </div>
)}

<div style={{ textAlign: 'center', marginTop: '2rem' }}>
  <button
    onClick={() => router.push(`/?lang=${lang}`)}
    style={{
      marginTop: '1rem',
      backgroundColor: '#444',
      color: 'white',
      padding: '0.6rem 1.2rem',
      border: 'none',
      borderRadius: '8px',
      fontSize: '0.95rem',
      cursor: 'pointer'
    }}
  >
    {t('indietro')}
  </button>
</div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy21.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l’ordine',
      rimuovi: 'Rimuovi',
      carrello: 'Carrello',
      policyTitolo: 'Policy per la produzione'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      carrello: 'Cart',
      policyTitolo: 'Production Policy'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Passer à la caisse',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J’accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      carrello: 'Panier',
      policyTitolo: 'Politique de production'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      carrello: 'Warenkorb',
      policyTitolo: 'Produktionsrichtlinie'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Finalizar compra',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      carrello: 'Carrito',
      policyTitolo: 'Política de producción'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '添加到购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      carrello: '购物车', 
      policyTitolo: '生产政策'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'كل الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'إتمام الشراء',
      indietro: 'رجوع',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      carrello: 'عربة التسوق',
      policyTitolo: 'سياسة الإنتاج'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      carrello: 'カート',
      policyTitolo: '生産ポリシー'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    anelli: { it: 'anelli', en: 'rings', fr: 'bagues', de: 'ringe', es: 'anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'collane', en: 'necklaces', fr: 'colliers', de: 'ketten', es: 'collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'bracciali', en: 'bracelets', fr: 'bracelets', de: 'armbänder', es: 'pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'orecchini', en: 'earrings', fr: 'boucles d’oreilles', de: 'ohrringe', es: 'pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '1.5rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'flex',
        overflowX: 'auto',
        gap: '1rem',
        width: '100%',
        padding: '0.5rem',
        scrollSnapType: 'x mandatory'
      }}>
        {filtrati.map(prodotto => (
          <div key={prodotto.id} style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '0.5rem',
            borderRadius: '6px',
            fontSize: '0.65rem',
            textAlign: 'center',
            flex: '0 0 auto',
            width: '160px',
            scrollSnapAlign: 'start',
            position: 'relative'
          }}>
            {prodotto.quantita === 0 && (
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                color: 'red',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-12deg)',
                fontWeight: 'bold'
              }}>
                {t('venduto')}
              </div>
            )}
            <img
              src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
              alt={prodotto.nome}
              style={{
                width: '100%',
                height: 'auto',
                maxHeight: '80px',
                objectFit: 'contain',
                borderRadius: '4px',
                marginBottom: '0.3rem',
                cursor: 'pointer'
              }}
              onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
            />
            <strong>{prodotto.nome}</strong>
            <p>{prodotto.taglia}</p>
            <p style={{ fontFamily: 'Arial, sans-serif' }}>
              {'\u20AC'} {(Math.round(Number(prodotto.prezzo || 0) * 10) / 10).toFixed(1)}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
              <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

              <input
                type="text"
                value={quantita[prodotto.id] || 1}
                readOnly
                style={{
                  width: '1.8rem',
                  textAlign: 'center',
                  background: 'white',
                  color: 'black',
                  fontSize: '0.9rem',
                  border: '1px solid black',
                  borderRadius: '4px',
                  padding: '1px 3px'
                }}
              />

              <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
            </div>

            <button
              onClick={() => aggiungiAlCarrello(prodotto)}
              style={{
                padding: '0.2rem 0.4rem',
                fontSize: '0.6rem',
                backgroundColor: '#333',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        ))}
      </div>

{carrello.length > 0 && (
  <div style={{
    marginTop: '2rem',
    backgroundColor: '#222',
    padding: '1rem',
    borderRadius: '8px',
    width: '100%',
    maxWidth: '400px',
    textAlign: 'left',
    marginLeft: 'auto',
    marginRight: 'auto'
  }}>
    <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
    {Array.from(new Set(carrello.map(p => p.id))).map(id => {
      const prodotto = carrello.find(p => p.id === id);
      const qta = carrello.filter(p => p.id === id).length;
      return (
        <div key={id} style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '0.3rem 0',
          borderBottom: '1px solid #444'
        }}>
          <span>{prodotto.nome} × {qta}</span>
          <button onClick={() => rimuoviDalCarrello(id)}
            style={{
              background: 'red',
              color: 'white',
              border: 'none',
              padding: '0.2rem 0.5rem',
              fontSize: '0.7rem',
              borderRadius: '4px',
              cursor: 'pointer'
            }}>{t('rimuovi')}</button>
        </div>
      );
    })}
    <button
      onClick={() => router.push(`/checkout?lang=${lang}`)}
      style={{
        marginTop: '1rem',
        width: '100%',
        backgroundColor: 'green',
        color: 'white',
        border: 'none',
        padding: '0.5rem',
        borderRadius: '6px',
        fontSize: '1rem',
        cursor: 'pointer'
      }}
    >
      {t('checkout')}
    </button>
  </div>
)}

<div style={{ textAlign: 'center', marginTop: '2rem' }}>
  <button
    onClick={() => router.push(`/?lang=${lang}`)}
    style={{
      marginTop: '1rem',
      backgroundColor: '#444',
      color: 'white',
      padding: '0.6rem 1.2rem',
      border: 'none',
      borderRadius: '8px',
      fontSize: '0.95rem',
      cursor: 'pointer'
    }}
  >
    {t('indietro')}
  </button>
</div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy22.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ShoppingCart } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l\'ordine',
      rimuovi: 'Rimuovi',
      policyTitolo: 'Policy per la produzione',
      carrello: 'Carrello'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      policyTitolo: 'Production Policy',
      carrello: 'Cart'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Paiement',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J\'accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      policyTitolo: 'Politique de production',
      carrello: 'Panier'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      policyTitolo: 'Produktionsrichtlinie',
      carrello: 'Warenkorb'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Pagar',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      policyTitolo: 'Política de producción',
      carrello: 'Carrito'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'جميع الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'الدفع',
      indietro: 'عودة',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      policyTitolo: 'سياسة الإنتاج',
      carrello: 'سلة التسوق'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '加入购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      policyTitolo: '生产政策',
      carrello: '购物车'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      policyTitolo: '生産ポリシー',
      carrello: 'カート'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    anelli: { it: 'Anelli', en: 'Rings', fr: 'Bagues', de: 'Ringe', es: 'Anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'Collane', en: 'Necklaces', fr: 'Colliers', de: 'Ketten', es: 'Collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'Bracciali', en: 'Bracelets', fr: 'Bracelets', de: 'Armbänder', es: 'Pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'Orecchini', en: 'Earrings', fr: 'Boucles d\'oreilles', de: 'Ohrringe', es: 'Pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };

  useEffect(() => {
    const carrelloSalvato = JSON.parse(localStorage.getItem('carrello') || '[]');
    setCarrello(carrelloSalvato);

    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1; });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem 1rem', maxWidth: '100vw', overflowX: 'hidden', margin: '0 auto', position: 'relative' }}>
      {carrello.length > 0 && (
        <div
          onClick={() => router.push(`/checkout?lang=${lang}`)}
          style={{
            position: 'fixed',
            top: '0.5rem',
            left: '0.5rem',
            background: 'none',
            color: 'white',
            padding: '0.4rem 0.6rem',
            fontSize: '0.75rem',
            fontFamily: 'Michroma, sans-serif',
            zIndex: 10000,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '0.4rem',
            border: 'none',
            outline: 'none',
            boxShadow: 'none',
            WebkitBoxShadow: 'none',
            MozBoxShadow: 'none',
            borderRadius: 0
          }}
        >
          <ShoppingCart size={16} strokeWidth={1.5} color="white" />
          <span style={{ lineHeight: 1 }}>Check-out</span>
        </div>
      )}

      <h1 style={{
        fontSize: 'clamp(1.5rem, 5vw, 2rem)',
        textAlign: 'center',
        marginBottom: '2rem',
        wordBreak: 'break-word',
        overflowWrap: 'break-word'
      }}>
        {t('titolo')}
      </h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1.5rem'
      }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 100) / 100;
          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.75rem',
              textAlign: 'center'
            }}>
              <img
                src={baseUrl + prodotto.immagine}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: '200px',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(prodotto.immagine);
                }}
              />
              <div style={{ 
                padding: '0.5rem 0',
                minHeight: '60px'
              }}>
                <strong style={{ 
                  display: 'block',
                  fontWeight: 'bold',
                  fontSize: '0.9rem',
                  marginBottom: '0.3rem'
                }}>{prodotto.nome}</strong>
                <p style={{ 
                  fontSize: '0.8rem',
                  color: '#555',
                  marginBottom: '0.3rem'
                }}>{prodotto.taglia}</p>
                <p style={{ fontFamily: 'Arial' }}>
                  {prodotto.offerta ? (
                    <>
                      <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                        {'\u20AC'} {prezzoNum.toFixed(2)}
                      </span>
                      <span style={{ color: 'red', fontWeight: 'bold' }}>
                        {'\u20AC'} {prezzoScontato.toFixed(2)} (-{scontoNum}%)
                      </span>
                    </>
                  ) : (
                    <>{'\u20AC'} {prezzoNum.toFixed(2)}</>
                  )}
                </p>
              </div>
            </div>
          );
        })}
      </div>

      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{ width: '100%', height: 'auto', borderRadius: '6px', marginBottom: '1rem' }}
            />

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>
            
            <p style={{ fontWeight: 'bold', fontSize: '1rem', margin: '1rem 0' }}>
              {popupProdotto.offerta ? (
                <>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '8px' }}>
                    {'\u20AC'} {Number(popupProdotto.prezzo).toFixed(2)}
                  </span>
                  <span style={{ color: 'red' }}>
                    {'\u20AC'} {(Number(popupProdotto.prezzo) * (1 - (Number(popupProdotto.sconto || 0) / 100))).toFixed(2)}
                    {popupProdotto.sconto > 0 && (
                      <span style={{ fontSize: '0.9rem', marginLeft: '4px' }}>
                        (-{popupProdotto.sconto}%)
                      </span>
                    )}
                  </span>
                </>
              ) : (
                <>{'\u20AC'} {Number(popupProdotto.prezzo).toFixed(2)}</>
              )}
            </p>

            <div
              style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}
              onClick={(e) => e.stopPropagation()}
            >
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input type="text" value={quantita[popupProdotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={(e) => {
                e.stopPropagation();
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ShoppingCart } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';

export default function GioielliPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  // ✅ funzione per mostrare € correttamente (come in inventario)
  const formatEuro = (val) => {
    const value = Number(val || 0);
    return `€ ${value.toFixed(2)}`;
  };

  // ... (il resto del codice rimane invariato)
  const traduzioni = {
    it: {
      titolo: 'GALLERIA GIOIELLI',
      sottotutte: 'Tutte le sottocategorie',
      aggiungi: 'Aggiungi al carrello',
      checkout: 'Check-out',
      indietro: 'Indietro',
      venduto: 'venduto',
      erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.',
      visualizzaPolicy: 'Visualizza Policy',
      accetta: 'Sono d\'accordo con la policy per la produzione',
      continua: 'Continua con l\'ordine',
      rimuovi: 'Rimuovi',
      policyTitolo: 'Policy per la produzione',
      carrello: 'Carrello'
    },
    en: {
      titolo: 'JEWELRY GALLERY',
      sottotutte: 'All subcategories',
      aggiungi: 'Add to cart',
      checkout: 'Checkout',
      indietro: 'Back',
      venduto: 'sold',
      erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.',
      visualizzaPolicy: 'View Policy',
      accetta: 'I agree with the production policy',
      continua: 'Continue with order',
      rimuovi: 'Remove',
      policyTitolo: 'Production Policy',
      carrello: 'Cart'
    },
    fr: {
      titolo: 'GALERIE DE BIJOUX',
      sottotutte: 'Toutes les sous-catégories',
      aggiungi: 'Ajouter au panier',
      checkout: 'Paiement',
      indietro: 'Retour',
      venduto: 'vendu',
      erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.',
      visualizzaPolicy: 'Voir la politique',
      accetta: 'J\'accepte la politique de production',
      continua: 'Continuer la commande',
      rimuovi: 'Supprimer',
      policyTitolo: 'Politique de production',
      carrello: 'Panier'
    },
    de: {
      titolo: 'SCHMUCKGALERIE',
      sottotutte: 'Alle Unterkategorien',
      aggiungi: 'In den Warenkorb',
      checkout: 'Zur Kasse',
      indietro: 'Zurück',
      venduto: 'ausverkauft',
      erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.',
      visualizzaPolicy: 'Richtlinie anzeigen',
      accetta: 'Ich stimme der Produktionsrichtlinie zu',
      continua: 'Bestellung fortsetzen',
      rimuovi: 'Entfernen',
      policyTitolo: 'Produktionsrichtlinie',
      carrello: 'Warenkorb'
    },
    es: {
      titolo: 'GALERÍA DE JOYAS',
      sottotutte: 'Todas las subcategorías',
      aggiungi: 'Agregar al carrito',
      checkout: 'Pagar',
      indietro: 'Atrás',
      venduto: 'vendido',
      erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.',
      visualizzaPolicy: 'Ver política',
      accetta: 'Acepto la política de producción',
      continua: 'Continuar pedido',
      rimuovi: 'Eliminar',
      policyTitolo: 'Política de producción',
      carrello: 'Carrito'
    },
    ar: {
      titolo: 'معرض المجوهرات',
      sottotutte: 'جميع الفئات الفرعية',
      aggiungi: 'أضف إلى السلة',
      checkout: 'الدفع',
      indietro: 'عودة',
      venduto: 'تم البيع',
      erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.',
      visualizzaPolicy: 'عرض السياسة',
      accetta: 'أوافق على سياسة الإنتاج',
      continua: 'متابعة الطلب',
      rimuovi: 'إزالة',
      policyTitolo: 'سياسة الإنتاج',
      carrello: 'سلة التسوق'
    },
    zh: {
      titolo: '珠宝画廊',
      sottotutte: '所有子类别',
      aggiungi: '加入购物车',
      checkout: '结账',
      indietro: '返回',
      venduto: '售罄',
      erroreQuantita: '请求数量超出库存！请查看我们的生产政策。',
      visualizzaPolicy: '查看政策',
      accetta: '我同意生产政策',
      continua: '继续下单',
      rimuovi: '移除',
      policyTitolo: '生产政策',
      carrello: '购物车'
    },
    ja: {
      titolo: 'ジュエリーギャラリー',
      sottotutte: 'すべてのサブカテゴリ',
      aggiungi: 'カートに追加',
      checkout: 'チェックアウト',
      indietro: '戻る',
      venduto: '売切れ',
      erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。',
      visualizzaPolicy: 'ポリシーを見る',
      accetta: '生産ポリシーに同意します',
      continua: '注文を続ける',
      rimuovi: '削除',
      policyTitolo: '生産ポリシー',
      carrello: 'カート'
    }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;
  const sottocategorie = {
    anelli: { it: 'Anelli', en: 'Rings', fr: 'Bagues', de: 'Ringe', es: 'Anillos', zh: '戒指', ar: 'خواتم', ja: 'リング' },
    collane: { it: 'Collane', en: 'Necklaces', fr: 'Colliers', de: 'Ketten', es: 'Collares', zh: '项链', ar: 'قلائد', ja: 'ネックレス' },
    bracciali: { it: 'Bracciali', en: 'Bracelets', fr: 'Bracelets', de: 'Armbänder', es: 'Pulseras', zh: '手镯', ar: 'أساور', ja: 'ブレスレット' },
    orecchini: { it: 'Orecchini', en: 'Earrings', fr: 'Boucles d\'oreilles', de: 'Ohrringe', es: 'Pendientes', zh: '耳环', ar: 'أقراط', ja: 'イヤリング' }
  };
  useEffect(() => {
    const carrelloSalvato = JSON.parse(localStorage.getItem('carrello') || '[]');
    setCarrello(carrelloSalvato);

    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'gioielli')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1; });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';
  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem 1rem', maxWidth: '100vw', overflowX: 'hidden', margin: '0 auto', position: 'relative' }}>
      {carrello.length > 0 && (
        <div
          onClick={() => router.push(`/checkout?lang=${lang}`)}
          style={{
            position: 'fixed',
            top: '0.5rem',
            left: '0.5rem',
            background: 'none',
            color: 'white',
            padding: '0.4rem 0.6rem',
            fontSize: '0.75rem',
            fontFamily: 'Michroma, sans-serif',
            zIndex: 10000,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '0.4rem',
            border: 'none',
            outline: 'none',
            boxShadow: 'none',
            WebkitBoxShadow: 'none',
            MozBoxShadow: 'none',
            borderRadius: 0
          }}
        >
          <ShoppingCart size={16} strokeWidth={1.5} color="white" />
          <span style={{ lineHeight: 1 }}>{t('checkout')}</span>
        </div>
      )}

      <h1 style={{
        fontSize: 'clamp(1.5rem, 5vw, 2rem)',
        textAlign: 'center',
        marginBottom: '2rem',
        wordBreak: 'break-word',
        overflowWrap: 'break-word'
      }}>
        {t('titolo')}
      </h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1.5rem'
      }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 100) / 100;
          return (
                <div key={prodotto.id} style={{
                  backgroundColor: 'white',
                  color: 'black',
                  padding: '0.5rem',
                  borderRadius: '6px',
                  fontSize: '0.75rem',
                  textAlign: 'center',
                  display: 'flex',
                  flexDirection: 'column',
                  justifyContent: 'space-between',
                  height: '340px'  // puoi aumentare o ridurre se serve
                }}>
              <img
                src={baseUrl + prodotto.immagine}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: '200px',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(prodotto.immagine);
                }}
              />
              <div style={{ 
                padding: '0.5rem 0',
                minHeight: '60px'
              }}>
                <strong style={{ 
                  display: 'block',
                  fontWeight: 'bold',
                  fontSize: '0.9rem',
                  marginBottom: '0.3rem',
                  minHeight: '2.2em',
                  lineHeight: '1.1em',
                  overflow: 'hidden'
                }}>
                  {prodotto.nome}
                </strong>

                <p style={{ 
                  fontSize: '0.8rem',
                  color: '#555',
                  marginBottom: '0.3rem'
                }}>{prodotto.taglia}</p>
                <p style={{ fontFamily: 'Arial' }}>
                  {prodotto.offerta ? (
                    <>
                      <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                        {formatEuro(prezzoNum)}
                      </span>
                      <span style={{ color: 'red', fontWeight: 'bold' }}>
                        {formatEuro(prezzoScontato)} (-{scontoNum}%)
                      </span>
                    </>
                  ) : (
                    <>{formatEuro(prezzoNum)}</>
                  )}
                </p>
              </div>
            </div>
          );
        })}
      </div>
      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{ width: '100%', height: 'auto', borderRadius: '6px', marginBottom: '1rem' }}
            />

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>

<p style={{ fontWeight: 'bold', fontSize: '1rem', margin: '1rem 0', fontFamily: 'Arial, sans-serif' }}>
  {popupProdotto.offerta ? (
    <>
      <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '8px' }}>
        € {Number(popupProdotto.prezzo).toFixed(2)}
      </span>
      <span style={{ color: 'red' }}>
        € {(Number(popupProdotto.prezzo) * (1 - (popupProdotto.sconto || 0) / 100)).toFixed(2)}
        {popupProdotto.sconto > 0 && (
          <span style={{ fontSize: '0.9rem', marginLeft: '4px' }}>
            (-{popupProdotto.sconto}%)
          </span>
        )}
      </span>
    </>
  ) : (
    <>€ {Number(popupProdotto.prezzo).toFixed(2)}</>
  )}
</p>
            <div
              style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}
              onClick={(e) => e.stopPropagation()}
            >
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input type="text" value={quantita[popupProdotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={(e) => {
                e.stopPropagation();
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/globals.css -----
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

/* Font personalizzato: GRGabriellaFinal - RIMOSSO */

/*
@font-face {
  font-family: 'GRGabriellaFinal';
  src: url('/fonts/GRGabriellaFinal.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
*/

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  /* font-family: 'GRGabriellaFinal', Arial, Helvetica, sans-serif; */ /* ← rimosso */
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/it/page.js -----

'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function ItalianPage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000 }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="it" />
      </div>

    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ja/page.js -----
'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function JapanesePage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000 }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="ja" />
      </div>

    </main>
  );
}


----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/layout.js -----
import './globals.css';
import { Michroma } from 'next/font/google';

const michroma = Michroma({
  weight: ['400'],
  subsets: ['latin'],
  display: 'swap',
});

export const metadata = {
  title: 'G-R Gabriella Romeo',
  description: 'Luxury Fashion and Jewelry',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={michroma.className} style={{ backgroundColor: 'black', minHeight: '100vh', margin: 0 }}>
        {children}
      </body>
    </html>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/authConfig.js -----
export const protectedRoutes = {
    '/carrello': true,
    '/checkout': true,
    '/ordini': true,
    '/lista-desideri': true,
    '/account': true,
    '/pagamento': true
  };
  
  export const semiProtectedRoutes = {
    '/checkout': { requireAuth: true, redirectIfGuest: true },
    '/pagamento': { requireAuth: true, redirectIfGuest: true }
  };
  
  export const SESSION_DURATION = 8 * 60 * 60 * 1000; // 8 ore
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/citta.js -----
// citta.js — Blocco 1: ITALIANO
export const citta = {
    it: {
      Italia: ['Roma', 'Milano', 'Napoli', 'Torino', 'Palermo', 'Genova', 'Bologna', 'Firenze', 'Bari', 'Catania'],
      Francia: ['Parigi', 'Marsiglia', 'Lione', 'Tolosa', 'Nizza', 'Nantes', 'Strasburgo', 'Montpellier', 'Bordeaux', 'Lilla'],
      Germania: ['Berlino', 'Amburgo', 'Monaco', 'Colonia', 'Francoforte', 'Stoccarda', 'Düsseldorf', 'Dortmund', 'Essen', 'Brema'],
      Spagna: ['Madrid', 'Barcellona', 'Valencia', 'Siviglia', 'Zaragoza', 'Malaga', 'Murcia', 'Palma', 'Bilbao', 'Alicante'],
      Inghilterra: ['Londra', 'Birmingham', 'Manchester', 'Leeds', 'Liverpool', 'Sheffield', 'Bristol', 'Newcastle', 'Nottingham', 'Leicester'],
      Giappone: ['Tokyo', 'Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Fukuoka', 'Kyoto', 'Kawasaki', 'Saitama'],
      Cina: ['Pechino', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Tianjin', 'Chengdu', 'Wuhan', 'Hangzhou', 'Nanchino', 'Xiamen'],
      Arabia: ['Riyadh', 'Jeddah', 'La Mecca', 'Medina', 'Dammam', 'Khobar', 'Tabuk', 'Buraydah', 'Khamis Mushait', 'Abha'],
      USA: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose']
    },
    en: {
        Italy: ['Rome', 'Milan', 'Naples', 'Turin', 'Palermo', 'Genoa', 'Bologna', 'Florence', 'Bari', 'Catania'],
        France: ['Paris', 'Marseille', 'Lyon', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille'],
        Germany: ['Berlin', 'Hamburg', 'Munich', 'Cologne', 'Frankfurt', 'Stuttgart', 'Düsseldorf', 'Dortmund', 'Essen', 'Bremen'],
        Spain: ['Madrid', 'Barcelona', 'Valencia', 'Seville', 'Zaragoza', 'Malaga', 'Murcia', 'Palma', 'Bilbao', 'Alicante'],
        England: ['London', 'Birmingham', 'Manchester', 'Leeds', 'Liverpool', 'Sheffield', 'Bristol', 'Newcastle', 'Nottingham', 'Leicester'],
        Japan: ['Tokyo', 'Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Fukuoka', 'Kyoto', 'Kawasaki', 'Saitama'],
        China: ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Tianjin', 'Chengdu', 'Wuhan', 'Hangzhou', 'Nanjing', 'Xiamen'],
        SaudiArabia: ['Riyadh', 'Jeddah', 'Mecca', 'Medina', 'Dammam', 'Khobar', 'Tabuk', 'Buraydah', 'Khamis Mushait', 'Abha'],
        USA: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose']
      },
      fr: {
        Italie: ['Rome', 'Milan', 'Naples', 'Turin', 'Palerme', 'Gênes', 'Bologne', 'Florence', 'Bari', 'Catane'],
        France: ['Paris', 'Marseille', 'Lyon', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille'],
        Allemagne: ['Berlin', 'Hambourg', 'Munich', 'Cologne', 'Francfort', 'Stuttgart', 'Düsseldorf', 'Dortmund', 'Essen', 'Brême'],
        Espagne: ['Madrid', 'Barcelone', 'Valence', 'Séville', 'Saragosse', 'Malaga', 'Murcie', 'Palma', 'Bilbao', 'Alicante'],
        Angleterre: ['Londres', 'Birmingham', 'Manchester', 'Leeds', 'Liverpool', 'Sheffield', 'Bristol', 'Newcastle', 'Nottingham', 'Leicester'],
        Japon: ['Tokyo', 'Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Fukuoka', 'Kyoto', 'Kawasaki', 'Saitama'],
        Chine: ['Pékin', 'Shanghai', 'Canton', 'Shenzhen', 'Tianjin', 'Chengdu', 'Wuhan', 'Hangzhou', 'Nankin', 'Xiamen'],
        Arabie: ['Riyad', 'Djeddah', 'La Mecque', 'Médine', 'Dammam', 'Khobar', 'Tabuk', 'Buraydah', 'Khamis Mushait', 'Abha'],
        ÉtatsUnis: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphie', 'San Antonio', 'San Diego', 'Dallas', 'San Jose']
      },
      de: {
        Italien: ['Rom', 'Mailand', 'Neapel', 'Turin', 'Palermo', 'Genua', 'Bologna', 'Florenz', 'Bari', 'Catania'],
        Frankreich: ['Paris', 'Marseille', 'Lyon', 'Toulouse', 'Nizza', 'Nantes', 'Straßburg', 'Montpellier', 'Bordeaux', 'Lille'],
        Deutschland: ['Berlin', 'Hamburg', 'München', 'Köln', 'Frankfurt', 'Stuttgart', 'Düsseldorf', 'Dortmund', 'Essen', 'Bremen'],
        Spanien: ['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza', 'Málaga', 'Murcia', 'Palma', 'Bilbao', 'Alicante'],
        England: ['London', 'Birmingham', 'Manchester', 'Leeds', 'Liverpool', 'Sheffield', 'Bristol', 'Newcastle', 'Nottingham', 'Leicester'],
        Japan: ['Tokio', 'Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Fukuoka', 'Kyoto', 'Kawasaki', 'Saitama'],
        China: ['Peking', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Tianjin', 'Chengdu', 'Wuhan', 'Hangzhou', 'Nanjing', 'Xiamen'],
        SaudiArabien: ['Riad', 'Dschidda', 'Mekka', 'Medina', 'Dammam', 'Khobar', 'Tabuk', 'Buraydah', 'Khamis Mushait', 'Abha'],
        USA: ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose']
      },
      es: {
        Italia: ['Roma', 'Milán', 'Nápoles', 'Turín', 'Palermo', 'Génova', 'Bolonia', 'Florencia', 'Bari', 'Catania'],
        Francia: ['París', 'Marsella', 'Lyon', 'Toulouse', 'Niza', 'Nantes', 'Estrasburgo', 'Montpellier', 'Burdeos', 'Lille'],
        Alemania: ['Berlín', 'Hamburgo', 'Múnich', 'Colonia', 'Fráncfort', 'Stuttgart', 'Düsseldorf', 'Dortmund', 'Essen', 'Bremen'],
        España: ['Madrid', 'Barcelona', 'Valencia', 'Sevilla', 'Zaragoza', 'Málaga', 'Murcia', 'Palma', 'Bilbao', 'Alicante'],
        Inglaterra: ['Londres', 'Birmingham', 'Manchester', 'Leeds', 'Liverpool', 'Sheffield', 'Bristol', 'Newcastle', 'Nottingham', 'Leicester'],
        Japón: ['Tokio', 'Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Fukuoka', 'Kioto', 'Kawasaki', 'Saitama'],
        China: ['Pekín', 'Shanghái', 'Cantón', 'Shenzhen', 'Tianjin', 'Chengdu', 'Wuhan', 'Hangzhou', 'Nankín', 'Xiamen'],
        Arabia: ['Riad', 'Yeda', 'La Meca', 'Medina', 'Dammam', 'Khobar', 'Tabuk', 'Buraydah', 'Khamis Mushait', 'Abha'],
        EstadosUnidos: ['Nueva York', 'Los Ángeles', 'Chicago', 'Houston', 'Phoenix', 'Filadelfia', 'San Antonio', 'San Diego', 'Dallas', 'San José']
      },
      ar: {
        إيطاليا: ['روما', 'ميلانو', 'نابولي', 'تورينو', 'باليرمو', 'جنوة', 'بولونيا', 'فلورنسا', 'باري', 'كاتانيا'],
        فرنسا: ['باريس', 'مرسيليا', 'ليون', 'تولوز', 'نيس', 'نانت', 'ستراسبورغ', 'مونبلييه', 'بوردو', 'ليل'],
        ألمانيا: ['برلين', 'هامبورغ', 'ميونيخ', 'كولونيا', 'فرانكفورت', 'شتوتغارت', 'دوسلدورف', 'دورتموند', 'إيسن', 'بريمن'],
        إسبانيا: ['مدريد', 'برشلونة', 'فالنسيا', 'إشبيلية', 'سرقسطة', 'مالقة', 'مورسيا', 'بالما', 'بلباو', 'أليكانتي'],
        إنجلترا: ['لندن', 'برمنغهام', 'مانشستر', 'ليدز', 'ليفربول', 'شيفيلد', 'بريستول', 'نيوكاسل', 'نوتنغهام', 'ليستر'],
        اليابان: ['طوكيو', 'يوكوهاما', 'أوساكا', 'ناغويا', 'سابورو', 'كوبي', 'فوكوكا', 'كيوتو', 'كاواساكي', 'سايتاما'],
        الصين: ['بكين', 'شنغهاي', 'قوانغتشو', 'شنتشن', 'تيانجين', 'تشنغدو', 'ووهان', 'هانغتشو', 'نانجينغ', 'شيامن'],
        السعودية: ['الرياض', 'جدة', 'مكة', 'المدينة', 'الدمام', 'الخبر', 'تبوك', 'بريدة', 'خميس مشيط', 'أبها'],
        أمريكا: ['نيويورك', 'لوس أنجلوس', 'شيكاغو', 'هيوستن', 'فينيكس', 'فيلادلفيا', 'سان أنطونيو', 'سان دييغو', 'دالاس', 'سان خوسيه']
      },
      zh: {
        意大利: ['罗马', '米兰', '那不勒斯', '都灵', '巴勒莫', '热那亚', '博洛尼亚', '佛罗伦萨', '巴里', '卡塔尼亚'],
        法国: ['巴黎', '马赛', '里昂', '图卢兹', '尼斯', '南特', '斯特拉斯堡', '蒙彼利埃', '波尔多', '里尔'],
        德国: ['柏林', '汉堡', '慕尼黑', '科隆', '法兰克福', '斯图加特', '杜塞尔多夫', '多特蒙德', '埃森', '不来梅'],
        西班牙: ['马德里', '巴塞罗那', '瓦伦西亚', '塞维利亚', '萨拉戈萨', '马拉加', '穆尔西亚', '帕尔马', '毕尔巴鄂', '阿利坎特'],
        英国: ['伦敦', '伯明翰', '曼彻斯特', '利兹', '利物浦', '谢菲尔德', '布里斯托尔', '纽卡斯尔', '诺丁汉', '莱斯特'],
        日本: ['东京', '横滨', '大阪', '名古屋', '札幌', '神户', '福冈', '京都', '川崎', '埼玉'],
        中国: ['北京', '上海', '广州', '深圳', '天津', '成都', '武汉', '杭州', '南京', '厦门'],
        阿拉伯: ['利雅得', '吉达', '麦加', '麦地那', '达曼', '胡拜尔', '塔布克', '布赖代', '哈米斯穆谢特', '阿卜哈'],
        美国: ['纽约', '洛杉矶', '芝加哥', '休斯顿', '菲尼克斯', '费城', '圣安东尼奥', '圣地亚哥', '达拉斯', '圣何塞']
      },
      ja: {
        イタリア: ['ローマ', 'ミラノ', 'ナポリ', 'トリノ', 'パレルモ', 'ジェノバ', 'ボローニャ', 'フィレンツェ', 'バーリ', 'カターニア'],
        フランス: ['パリ', 'マルセイユ', 'リヨン', 'トゥールーズ', 'ニース', 'ナント', 'ストラスブール', 'モンペリエ', 'ボルドー', 'リール'],
        ドイツ: ['ベルリン', 'ハンブルク', 'ミュンヘン', 'ケルン', 'フランクフルト', 'シュトゥットガルト', 'デュッセルドルフ', 'ドルトムント', 'エッセン', 'ブレーメン'],
        スペイン: ['マドリード', 'バルセロナ', 'バレンシア', 'セビリア', 'サラゴサ', 'マラガ', 'ムルシア', 'パルマ', 'ビルバオ', 'アリカンテ'],
        イングランド: ['ロンドン', 'バーミンガム', 'マンチェスター', 'リーズ', 'リバプール', 'シェフィールド', 'ブリストル', 'ニューカッスル', 'ノッティンガム', 'レスター'],
        日本: ['東京', '横浜', '大阪', '名古屋', '札幌', '神戸', '福岡', '京都', '川崎', 'さいたま'],
        中国: ['北京', '上海', '広州', '深セン', '天津', '成都', '武漢', '杭州', '南京', '厦門'],
        アラブ: ['リヤド', 'ジッダ', 'メッカ', 'メディナ', 'ダンマーム', 'コバール', 'タブーク', 'ブライダ', 'ハミス・ムシャイト', 'アブハ'],
        アメリカ: ['ニューヨーク', 'ロサンゼルス', 'シカゴ', 'ヒューストン', 'フェニックス', 'フィラデルフィア', 'サンアントニオ', 'サンディエゴ', 'ダラス', 'サンノゼ']
      },
    };
                              
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/formatEuro.js -----
// app/lib/formatEuro.js

export const formatEuro = (val) => {
    const value = Number(val || 0);
    return `\u20AC ${value.toFixed(2)}`; // Simbolo euro Unicode garantito
  };
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/paesi.js -----
import countries from 'i18n-iso-countries';

// Registra le lingue in modo da poterle usare
import it from 'i18n-iso-countries/langs/it.json';
import en from 'i18n-iso-countries/langs/en.json';
import fr from 'i18n-iso-countries/langs/fr.json';
import de from 'i18n-iso-countries/langs/de.json';
import es from 'i18n-iso-countries/langs/es.json';
import ar from 'i18n-iso-countries/langs/ar.json';
import zh from 'i18n-iso-countries/langs/zh.json';
import ja from 'i18n-iso-countries/langs/ja.json';

countries.registerLocale(it);
countries.registerLocale(en);
countries.registerLocale(fr);
countries.registerLocale(de);
countries.registerLocale(es);
countries.registerLocale(ar);
countries.registerLocale(zh);
countries.registerLocale(ja);

const supportedLangs = ['it', 'en', 'fr', 'de', 'es', 'ar', 'zh', 'ja'];

const paesi = supportedLangs.reduce((acc, lang) => {
  acc[lang] = Object.values(countries.getNames(lang, { select: 'official' }));
  acc[lang].sort((a, b) => a.localeCompare(b, lang));
  return acc;
}, {});

export default paesi;

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/supabaseClient.js -----
// /app/lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtaWFhdHp4c2ttdXh5enN2eWpuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNzQ5OTcsImV4cCI6MjA2Mzg1MDk5N30.w6NrnprfHIannP7IKX2AucbRDbzB9df1IKgss_4AYJI';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/offerte/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function OffertePage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);

  const traduzioni = {
    it: { titolo: '🟡 OFFERTE', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', rimuovi: 'Rimuovi', carrello: 'Carrello' },
    en: { titolo: '🟡 OFFERS', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', rimuovi: 'Remove', carrello: 'Cart' },
    fr: { titolo: '🟡 OFFRES', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', rimuovi: 'Supprimer', carrello: 'Panier' },
    de: { titolo: '🟡 ANGEBOTE', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', rimuovi: 'Entfernen', carrello: 'Warenkorb' },
    es: { titolo: '🟡 OFERTAS', aggiungi: 'Agregar al carrito', checkout: 'Finalizar compra', indietro: 'Atrás', rimuovi: 'Eliminar', carrello: 'Carrito' },
    zh: { titolo: '🟡 优惠', aggiungi: '添加到购物车', checkout: '结账', indietro: '返回', rimuovi: '移除', carrello: '购物车' },
    ar: { titolo: '🟡 عروض', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'رجوع', rimuovi: 'إزالة', carrello: 'عربة التسوق' },
    ja: { titolo: '🟡 オファー', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', rimuovi: '削除', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key];

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('offerta', true)
        .order('created_at', { ascending: false });

      if (!error && data) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', marginBottom: '2rem', textAlign: 'center' }}>{t('titolo')}</h1>

      <div style={{ display: 'flex', overflowX: 'auto', gap: '1rem', padding: '1rem' }}>
        {prodotti.map(prodotto => {
          const sconto = prodotto.sconto_offerta || 0;
          const prezzoFinale = (prodotto.prezzo * (1 - sconto / 100)).toFixed(2);

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.65rem',
              textAlign: 'center',
              flex: '0 0 auto',
              width: '160px',
              position: 'relative'
            }}>
              <div style={{
                position: 'absolute',
                top: '6px',
                left: '6px',
                backgroundColor: 'gold',
                color: 'black',
                padding: '2px 4px',
                fontSize: '0.5rem',
                borderRadius: '3px',
                transform: 'rotate(-8deg)',
                fontWeight: 'bold'
              }}>
                {t('titolo')}
              </div>
              <img
                src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  maxHeight: '80px',
                  objectFit: 'cover',
                  borderRadius: '4px',
                  marginBottom: '0.3rem',
                  cursor: 'pointer'
                }}
                onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              <p>
                <span style={{ textDecoration: 'line-through', color: 'gray', fontSize: '0.6rem' }}>
                  {'\u20AC'} {Number(prodotto.prezzo).toFixed(2)}
                </span><br />
                <span style={{ color: 'red', fontWeight: 'bold' }}>
                  {'\u20AC'} {prezzoFinale}
                </span>
              </p>

              <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', margin: '0.3rem 0' }}>
                <button onClick={() => cambiaQuantita(prodotto.id, -1)}
                  style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>–</button>

                <input
                  type="text"
                  value={quantita[prodotto.id] || 1}
                  readOnly
                  style={{
                    width: '1.8rem',
                    textAlign: 'center',
                    background: 'white',
                    color: 'black',
                    fontSize: '0.9rem',
                    border: '1px solid black',
                    borderRadius: '4px',
                    padding: '1px 3px'
                  }}
                />

                <button onClick={() => cambiaQuantita(prodotto.id, 1)}
                  style={{ background: 'none', border: 'none', fontSize: '1rem', cursor: 'pointer' }}>+</button>
              </div>

              <button
                onClick={() => aggiungiAlCarrello(prodotto)}
                style={{
                  padding: '0.2rem 0.4rem',
                  fontSize: '0.6rem',
                  backgroundColor: '#333',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                {t('aggiungi')}
              </button>
            </div>
          );
        })}
      </div>

      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          maxWidth: '400px',
          margin: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>
          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}
          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ordine-confermato/page copy1.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';

export default function ConfermaOrdinePage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [nome, setNome] = useState('');
  const [ordineId, setOrdineId] = useState('');
  const [ordine, setOrdine] = useState(null);

  useEffect(() => {
    setNome(localStorage.getItem('nomeCliente') || '');
    const id = localStorage.getItem('ordineId') || '';
    setOrdineId(id);

    const fetchOrdine = async () => {
      const res = await fetch(`/api/get-ordine?id=${id}`);
      const data = await res.json();
      setOrdine(data);
    };

    if (id) fetchOrdine();
  }, []);

  const scaricaFattura = async () => {
    const res = await fetch('/api/fattura', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ordine }),
    });
    const blob = await res.blob();
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `fattura_${ordineId}.pdf`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const messaggi = {
    it: `Grazie per il tuo acquisto, ${nome}. Il tuo ordine ${ordineId} è stato confermato.`,
    en: `Thank you for your purchase, ${nome}. Your order ${ordineId} has been confirmed.`
  };

  return (
    <main className="min-h-screen bg-black text-white flex flex-col items-center justify-center px-6 py-10 text-center">
      <h1 className="text-xl font-bold mb-6">{messaggi[lang]}</h1>

      <button
        onClick={scaricaFattura}
        className="mb-4 px-4 py-2 bg-white text-black rounded hover:bg-gray-200"
      >
        {lang === 'it' ? 'Scarica Fattura PDF' : 'Download Invoice PDF'}
      </button>

      <button
        onClick={() => router.push('/')}
        className="mt-4 px-4 py-2 bg-white text-black rounded hover:bg-gray-200"
      >
        {lang === 'it' ? 'Torna alla homepage' : 'Return to homepage'}
      </button>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ordine-confermato/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';

const traduzioni = {
  it: {
    titolo: (nome, ordineId) => `Grazie per il tuo acquisto, ${nome}. Il tuo ordine ${ordineId} è stato confermato.`,
    bonifico: 'Riceverai una conferma della spedizione dopo la verifica del bonifico.',
    fattura: 'Scarica Fattura PDF',
    home: 'Torna alla homepage',
    loading: 'Generando...'
  },
  en: {
    titolo: (nome, ordineId) => `Thank you for your purchase, ${nome}. Your order ${ordineId} has been confirmed.`,
    bonifico: 'You will receive shipping confirmation after bank transfer verification.',
    fattura: 'Download Invoice PDF',
    home: 'Return to homepage',
    loading: 'Generating...'
  },
  fr: {
    titolo: (nome, ordineId) => `Merci pour votre achat, ${nome}. Votre commande ${ordineId} a été confirmée.`,
    bonifico: 'Vous recevrez une confirmation après vérification du virement.',
    fattura: 'Télécharger la facture PDF',
    home: 'Retour à l\'accueil',
    loading: 'Génération...'
  },
  de: {
    titolo: (nome, ordineId) => `Vielen Dank für Ihren Einkauf, ${nome}. Ihre Bestellung ${ordineId} wurde bestätigt.`,
    bonifico: 'Sie erhalten eine Versandbestätigung nach Überprüfung der Überweisung.',
    fattura: 'Rechnung PDF herunterladen',
    home: 'Zur Startseite zurückkehren',
    loading: 'Wird generiert...'
  },
  es: {
    titolo: (nome, ordineId) => `Gracias por su compra, ${nome}. Su pedido ${ordineId} ha sido confirmado.`,
    bonifico: 'Recibirá confirmación del envío tras verificar la transferencia.',
    fattura: 'Descargar factura PDF',
    home: 'Volver al inicio',
    loading: 'Generando...'
  },
  ar: {
    titolo: (nome, ordineId) => `شكراً لشرائك، ${nome}. تم تأكيد طلبك ${ordineId}.`,
    bonifico: 'سوف تتلقى تأكيد الشحن بعد التحقق من التحويل البنكي.',
    fattura: 'تحميل الفاتورة PDF',
    home: 'العودة إلى الصفحة الرئيسية',
    loading: 'جارٍ التوليد...'
  },
  zh: {
    titolo: (nome, ordineId) => `感谢您的购买，${nome}。您的订单 ${ordineId} 已确认。`,
    bonifico: '银行转账验证后，您将收到发货确认。',
    fattura: '下载发票 PDF',
    home: '返回首页',
    loading: '生成中...'
  },
  ja: {
    titolo: (nome, ordineId) => `${nome}様、ご購入ありがとうございます。注文番号 ${ordineId} が確認されました。`,
    bonifico: '銀行振込確認後、発送確認メールをお送りします。',
    fattura: '請求書をPDFでダウンロード',
    home: 'ホームページに戻る',
    loading: '生成中...'
  }
};

export default function ConfermaOrdinePage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const metodo = params.get('metodo');
  const router = useRouter();

  const [nome, setNome] = useState('');
  const [ordineId, setOrdineId] = useState('');
  const [ordine, setOrdine] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const t = traduzioni[lang] || traduzioni.it;

  useEffect(() => {
    setNome(localStorage.getItem('nomeCliente') || '');
    setOrdineId(localStorage.getItem('ordineId') || '');
  }, []);

  const scaricaFattura = async () => {
    setIsLoading(true);
    try {
      const res = await fetch('/api/fattura', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ordine }),
      });
      const blob = await res.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `fattura_${ordineId}.pdf`;
      a.click();
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Errore download fattura:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <main className="min-h-screen bg-black text-white flex flex-col items-center justify-center px-6 py-10 text-center">
      <h1 className="text-xl font-bold mb-6">
        {t.titolo(nome, ordineId)}
      </h1>

      {metodo === 'bonifico' && (
        <p className="mb-6">{t.bonifico}</p>
      )}

      <button
        onClick={scaricaFattura}
        disabled={isLoading}
        className="mb-4 px-4 py-2 bg-white text-black rounded hover:bg-gray-200 disabled:opacity-50"
      >
        {isLoading ? t.loading : t.fattura}
      </button>

      <button
        onClick={() => router.push('/')}
        className="mt-4 px-4 py-2 bg-white text-black rounded hover:bg-gray-200"
      >
        {t.home}
      </button>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy10.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [totaleFinale, setTotaleFinale] = useState(0);
  const [messaggio, setMessaggio] = useState('');
  const [mostraConfermaBonifico, setMostraConfermaBonifico] = useState(false);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');

  const generaCodiceOrdine = () => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  };

  useEffect(() => {
    const fetchCliente = async () => {
      const { data: session } = await supabase.auth.getUser();
      const email = session?.user?.email;

      if (!email) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const { data: cliente } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', email)
        .single();

      if (!cliente) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const campiObbligatori = ['nome', 'cognome', 'email', 'indirizzo'];
      const incompleti = campiObbligatori.some(campo => !cliente[campo]);

      if (incompleti) {
        localStorage.setItem('datiTemporaneiCliente', JSON.stringify(cliente));
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      setCliente(cliente);
    };

    fetchCliente();
    const datiCarrello = JSON.parse(localStorage.getItem('carrello')) || [];
    setCarrello(datiCarrello);
    setCodiceOrdine(generaCodiceOrdine());
  }, []);

  useEffect(() => {
    const somma = carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0);
    setTotaleFinale(somma + costoSpedizione);
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    if (pagamento === 'PayPal' && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR&intent=capture';
      script.addEventListener('load', renderPayPalButtons);
      document.body.appendChild(script);
    }
  }, [pagamento, totaleFinale]);

  const renderPayPalButtons = () => {
    if (!window.paypal || document.getElementById('paypal-button-container')?.children.length) return;

    window.paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{
            amount: {
              value: totaleFinale.toFixed(2)
            }
          }]
        });
      },
      onApprove: async (data, actions) => {
        const details = await actions.order.capture();

        const ordine = {
          id: codiceOrdine,
          cliente,
          carrello,
          spedizione,
          pagamento: 'PayPal',
          totale: totaleFinale,
          stato: 'pagato',
          data: new Date().toISOString()
        };

        await supabase.from('ordini').insert([ordine]);
        await supabase
          .from('clienti')
          .update({
            ordini: [...(cliente.ordini || []), ordine]
          })
          .eq('email', cliente.email);

        localStorage.setItem('ordineId', codiceOrdine);
        localStorage.setItem('nomeCliente', cliente.nome);
        localStorage.removeItem('carrello');

        alert('Pagamento completato con PayPal!');
        router.push(`/ordine-confermato?lang=${lang}`);
      }
    }).render('#paypal-button-container');
  };

  // (Segue tutto il resto del file come da tuo script originale)

}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy11.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [totaleFinale, setTotaleFinale] = useState(0);
  const [messaggio, setMessaggio] = useState('');
  const [mostraConfermaBonifico, setMostraConfermaBonifico] = useState(false);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const generaCodiceOrdine = () => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  };

  useEffect(() => {
    const fetchCliente = async () => {
      const { data: session } = await supabase.auth.getUser();
      const email = session?.user?.email;

      if (!email) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const { data: cliente } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', email)
        .single();

      if (!cliente) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const campiObbligatori = ['nome', 'cognome', 'email', 'indirizzo'];
      const incompleti = campiObbligatori.some(campo => !cliente[campo]);

      if (incompleti) {
        localStorage.setItem('datiTemporaneiCliente', JSON.stringify(cliente));
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      setCliente(cliente);
    };

    fetchCliente();
    const datiCarrello = JSON.parse(localStorage.getItem('carrello')) || [];
    setCarrello(datiCarrello);
    setCodiceOrdine(generaCodiceOrdine());
  }, []);

  useEffect(() => {
    const somma = carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0);
    setTotaleFinale(somma + costoSpedizione);
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    if (!scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR';
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [scriptCaricato]);

  const renderPayPalButtons = () => {
    if (!window.paypal || !document.getElementById('paypal-button-container')) return;

    document.getElementById('paypal-button-container').innerHTML = '';

    window.paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{
            amount: {
              value: totaleFinale.toFixed(2)
            }
          }]
        });
      },
      onApprove: async (data, actions) => {
        const details = await actions.order.capture();

        const ordine = {
          id: codiceOrdine,
          cliente,
          carrello,
          spedizione,
          pagamento: 'PayPal',
          totale: totaleFinale,
          stato: 'pagato',
          data: new Date().toISOString()
        };

        await supabase.from('ordini').insert([ordine]);
        await supabase
          .from('clienti')
          .update({
            ordini: [...(cliente.ordini || []), ordine]
          })
          .eq('email', cliente.email);

        localStorage.setItem('ordineId', codiceOrdine);
        localStorage.setItem('nomeCliente', cliente.nome);
        localStorage.removeItem('carrello');

        alert('Pagamento completato con PayPal!');
        router.push(`/ordine-confermato?lang=${lang}`);
      }
    }).render('#paypal-button-container');
  };

  const testi = {
    it: {
      titolo: 'Pagamento',
      metodoSpedizione: 'Metodo di spedizione',
      metodoPagamento: 'Metodo di pagamento',
      seleziona: 'Seleziona',
      totale: 'Totale: ',
      conferma: 'Conferma pagamento',
      confermaBonifico: 'Confermo bonifico effettuato',
      messaggioBonifico: 'Il prodotto sarà spedito all’indirizzo fornito non appena il bonifico verrà confermato dalla nostra banca.',
      condizioni: 'Accetto le condizioni di pagamento e spedizione',
      indietro: 'Indietro'
    },
    en: {
      titolo: 'Payment',
      metodoSpedizione: 'Shipping method',
      metodoPagamento: 'Payment method',
      seleziona: 'Select',
      totale: 'Total: ',
      conferma: 'Confirm Payment',
      confermaBonifico: 'I confirm bank transfer made',
      messaggioBonifico: 'The product will be shipped to the provided address once the bank confirms your transfer.',
      condizioni: 'I accept the payment and shipping conditions',
      indietro: 'Back'
    }
  }[lang];

  const metodiSpedizione = {
    it: [
      { label: '🚚 Standard (3-5 giorni) – €10,00', value: 'standard', costo: 10 },
      { label: '🚀 Espresso (24-48h) – €20,00', value: 'espresso', costo: 20 },
      { label: '🛍 Ritiro in boutique – €0,00', value: 'ritiro', costo: 0 }
    ],
    en: [
      { label: '🚚 Standard (3–5 days) – €10.00', value: 'standard', costo: 10 },
      { label: '🚀 Express (24–48h) – €20.00', value: 'espresso', costo: 20 },
      { label: '🛍 Boutique pickup – €0.00', value: 'ritiro', costo: 0 }
    ]
  };

  const metodiPagamento = {
    it: ['Carta di credito', 'PayPal', 'Apple Pay', 'Google Pay', 'Bonifico bancario'],
    en: ['Credit Card', 'PayPal', 'Apple Pay', 'Google Pay', 'Bank Transfer']
  };

  const confermaPagamento = () => {
    if (!spedizione || !pagamento) {
      alert(
        lang === 'it'
          ? 'Seleziona un metodo di spedizione e pagamento.'
          : 'Please select a shipping and payment method.'
      );
      return;
    }

    if (
      pagamento === 'Bonifico bancario' ||
      pagamento === 'Bank Transfer'
    ) {
      setMessaggio(
        `✅ CODICE ORDINE: ${codiceOrdine}\n\n👉 ${testi.messaggioBonifico}\n\n📌 IBAN: IT10Y0503426201000000204438\n👤 Intestatario: Romeo Gabriella\n🏦 Banca: BANCO BPM S.P.A.\n📧 Invia ricevuta a: info@g-rgabriellaromeo.it\n\n📦 Prodotti: ${carrello.length}\n👤 Cliente: ${cliente.nome} ${cliente.cognome}`
      );
      setMostraConfermaBonifico(true);
    }

    if (pagamento === 'PayPal') {
      renderPayPalButtons();
    }
  };

  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert('Devi accettare le condizioni per proseguire.');
      return;
    }

    const ordine = {
      id: codiceOrdine,
      cliente,
      carrello,
      spedizione,
      pagamento,
      totale: totaleFinale,
      stato: 'in attesa bonifico',
      data: new Date().toISOString()
    };

    await supabase.from('ordini').insert([ordine]);
    await supabase
      .from('clienti')
      .update({
        ordini: [...(cliente.ordini || []), ordine]
      })
      .eq('email', cliente.email);

    localStorage.setItem('ordineId', codiceOrdine);
    localStorage.setItem('nomeCliente', cliente.nome);
    localStorage.removeItem('carrello');

    alert('Grazie! Il tuo ordine è stato registrato. Riceverai una conferma dopo la verifica del bonifico.');
    router.push(`/ordine-confermato?lang=${lang}`);
  };

  return (
    <main className="min-h-screen bg-black text-white flex flex-col items-center justify-center px-4 py-10 font-sans">
      <h1 className="text-xl mb-6">{testi.titolo}</h1>

      <label className="mb-2">{testi.metodoSpedizione}</label>
      <select
        value={spedizione}
        onChange={(e) => {
          const metodo = metodiSpedizione[lang].find(m => m.value === e.target.value);
          setSpedizione(e.target.value);
          setCostoSpedizione(metodo?.costo || 0);
        }}
        className="text-black mb-4 p-2 rounded w-96"
      >
        <option value="">{testi.seleziona}</option>
        {metodiSpedizione[lang].map((metodo) => (
          <option key={metodo.value} value={metodo.value}>
            {metodo.label}
          </option>
        ))}
      </select>

      <label className="mb-2">{testi.metodoPagamento}</label>
      <select
        value={pagamento}
        onChange={(e) => setPagamento(e.target.value)}
        className="text-black mb-6 p-2 rounded w-96"
      >
        <option value="">{testi.seleziona}</option>
        {metodiPagamento[lang].map((m, idx) => (
          <option key={idx} value={m}>{m}</option>
        ))}
      </select>

      <p className="mb-4 font-bold text-lg">
        {testi.totale} €{totaleFinale.toFixed(2)}
      </p>

      <button
        onClick={confermaPagamento}
        className="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700 mb-6"
      >
        {testi.conferma}
      </button>

      <div id="paypal-button-container" className="mb-6 w-full flex justify-center"></div>

      {mostraConfermaBonifico && (
        <>
          <label className="flex items-center mb-4">
            <input
              type="checkbox"
              checked={accettaCondizioni}
              onChange={(e) => setAccettaCondizioni(e.target.checked)}
              className="mr-2"
            />
            {testi.condizioni}
          </label>
          <button
            onClick={confermaBonificoEffettuato}
            className={`px-6 py-2 rounded mb-4 ${accettaCondizioni ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-gray-500 text-white cursor-not-allowed'}`}
            disabled={!accettaCondizioni}
          >
            {testi.confermaBonifico}
          </button>
        </>
      )}

      <button
        onClick={() => router.back()}
        className="bg-gray-600 text-white px-6 py-2 rounded hover:bg-gray-700"
      >
        {testi.indietro}
      </button>

      {messaggio && (
        <div className="bg-white text-black p-4 rounded text-left max-w-xl mt-4 whitespace-pre-line">
          {messaggio}
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy12.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [totaleFinale, setTotaleFinale] = useState(0);
  const [messaggio, setMessaggio] = useState('');
  const [mostraConfermaBonifico, setMostraConfermaBonifico] = useState(false);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const generaCodiceOrdine = () => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  };

  useEffect(() => {
    const fetchCliente = async () => {
      const { data: {session }, error} = await supabase.auth.getSession();
      const email = session?.user?.email;

      if (!email || error) {
        setMessaggio('Devi essere loggato per procedere al pagamento.');
        localStorage.removeItem('carrello');
        localStorage.removeItem('datiTemporaneiCliente');
        setTimeout(() => {
          router.push(`/?lang=${lang}#crea-account`);
        }, 3000);
        return;
      }

      const { data: cliente } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', email)
        .single();

      if (!cliente) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const campiObbligatori = ['nome', 'cognome', 'email', 'indirizzo'];
      const incompleti = campiObbligatori.some(campo => !cliente[campo]);

      if (incompleti) {
        localStorage.setItem('datiTemporaneiCliente', JSON.stringify(cliente));
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      setCliente(cliente);
    };

    fetchCliente();
    const datiCarrello = JSON.parse(localStorage.getItem('carrello')) || [];
    setCarrello(datiCarrello);
    setCodiceOrdine(generaCodiceOrdine());
  }, []);

  useEffect(() => {
    const somma = carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0);
    setTotaleFinale(somma + costoSpedizione);
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    if (!scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR';
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [scriptCaricato]);

  const aggiornaQuantitaProdotti = async () => {
    for (const item of carrello) {
      const { id, quantita: qtaAcquistata } = item;
      const { data: prodottoCorrente, error: erroreFetch } = await supabase
        .from('products')
        .select('quantita')
        .eq('id', id)
        .single();

      if (!erroreFetch && prodottoCorrente) {
        const nuovaQuantita = Math.max((prodottoCorrente.quantita || 0) - qtaAcquistata, 0);
      if (!isNaN(nuovaQuantita)) {
        await supabase.from('products').update({ quantita: nuovaQuantita }).eq('id', id);
      }
        
      }
    }
  };

  const renderPayPalButtons = () => {
    if (!window.paypal || !document.getElementById('paypal-button-container')) return;
    document.getElementById('paypal-button-container').innerHTML = '';

    window.paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{ amount: { value: totaleFinale.toFixed(2) } }]
        });
      },
      onApprove: async (data, actions) => {
        const details = await actions.order.capture();

        const ordine = {
          id: codiceOrdine,
          cliente,
          carrello,
          spedizione,
          pagamento: 'PayPal',
          totale: totaleFinale,
          stato: 'pagato',
          data: new Date().toISOString()
        };

        await supabase.from('ordini').insert([ordine]);
        await aggiornaQuantitaProdotti();
        if (cliente.email) {
          const { data: clienteAttuale } = await supabase
            .from('clienti')
            .select('ordini')
            .eq('email', cliente.email)
            .single();
        
          const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
          await supabase
            .from('clienti')
            .update({ ordini: [...ordiniEsistenti, ordine] })
            .eq('email', cliente.email);
        }        
        localStorage.setItem('ordineId', codiceOrdine);
        localStorage.setItem('nomeCliente', cliente.nome);
        localStorage.removeItem('carrello');

        alert('Pagamento completato con PayPal!');
        router.push(`/ordine-confermato?lang=${lang}`);
      }
    }).render('#paypal-button-container');
  };

  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert('Devi accettare le condizioni per proseguire.');
      return;
    }

    const ordine = {
      id: codiceOrdine,
      cliente,
      carrello,
      spedizione,
      pagamento,
      totale: totaleFinale,
      stato: 'in attesa bonifico',
      data: new Date().toISOString()
    };

    await supabase.from('ordini').insert([ordine]);
    await aggiornaQuantitaProdotti();
    if (cliente.email) {
      const { data: clienteAttuale } = await supabase
        .from('clienti')
        .select('ordini')
        .eq('email', cliente.email)
        .single();
    
      const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
      await supabase
        .from('clienti')
        .update({ ordini: [...ordiniEsistenti, ordine] })
        .eq('email', cliente.email);
    }
    setMessaggio('Ordine registrato con successo. Riceverai una conferma dopo la verifica del bonifico.');    
    localStorage.setItem('ordineId', codiceOrdine);
    localStorage.setItem('nomeCliente', cliente.nome);
    localStorage.removeItem('carrello');

    alert('Grazie! Il tuo ordine è stato registrato. Riceverai una conferma dopo la verifica del bonifico.');
    router.push(`/ordine-confermato?lang=${lang}`);
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '1rem' }}>Pagamento</h1>

      {messaggio && (
        <div style={{ backgroundColor: '#400', padding: '1rem', borderRadius: '6px', marginBottom: '1rem', textAlign: 'center' }}>
          {messaggio}
        </div>
      )}

      <div style={{ maxWidth: '500px', margin: '0 auto' }}>
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di spedizione:</label>
        <select
          value={spedizione}
          onChange={(e) => {
            setSpedizione(e.target.value);
            setCostoSpedizione(e.target.value === 'express' ? 15 : e.target.value === 'standard' ? 5 : 0);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="standard">Standard (€5.00)</option>
          <option value="express">Express (€15.00)</option>
          <option value="ritiro">Ritiro in negozio (gratis)</option>
        </select>

        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di pagamento:</label>
        <select
          value={pagamento}
          onChange={(e) => {
            setPagamento(e.target.value);
            if (e.target.value === 'bonifico') setMostraConfermaBonifico(true);
            else setMostraConfermaBonifico(false);
            if (e.target.value === 'paypal') setTimeout(renderPayPalButtons, 300); // Delay per essere sicuri che il div esista
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="paypal">PayPal</option>
          <option value="bonifico">Bonifico Bancario</option>
        </select>

        <p style={{ fontWeight: 'bold', textAlign: 'center', marginBottom: '1rem' }}>
          Totale: {'\u20AC'} {totaleFinale.toFixed(2)}
        </p>

        {pagamento === 'paypal' && (
          <div id="paypal-button-container" style={{ marginTop: '1rem' }}></div>
        )}

        {mostraConfermaBonifico && (
          <div style={{ marginTop: '1rem', border: '1px solid gray', padding: '1rem', borderRadius: '6px' }}>
            <p>Per completare il pagamento con bonifico, effettua il versamento su:</p>
            <p><strong>IBAN:</strong> IT00X0000000000000000000000</p>
            <p><strong>Intestato a:</strong> G-R Gabriella Romeo</p>
            <p><strong>Causale:</strong> Ordine {codiceOrdine}</p>

            <label style={{ display: 'block', marginTop: '1rem' }}>
              <input
                type="checkbox"
                checked={accettaCondizioni}
                onChange={() => setAccettaCondizioni(!accettaCondizioni)}
                style={{ marginRight: '0.5rem' }}
              />
              Accetto le condizioni e confermo di aver effettuato il bonifico.
            </label>

            <button
              onClick={confermaBonificoEffettuato}
              style={{
                marginTop: '1rem',
                width: '100%',
                padding: '0.75rem',
                backgroundColor: accettaCondizioni ? 'green' : 'gray',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: accettaCondizioni ? 'pointer' : 'not-allowed'
              }}
              disabled={!accettaCondizioni}
            >
              Conferma Bonifico
            </button>
          </div>
        )}
      </div>
    </main>
  );

}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy13.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [totaleFinale, setTotaleFinale] = useState(0);
  const [messaggio, setMessaggio] = useState('');
  const [mostraConfermaBonifico, setMostraConfermaBonifico] = useState(false);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const generaCodiceOrdine = () => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  };

  useEffect(() => {
    const fetchCliente = async () => {
      const { data: {session }, error} = await supabase.auth.getSession();
      const email = session?.user?.email;

      if (!email || error) {
        setMessaggio('Devi essere loggato per procedere al pagamento.');
        localStorage.removeItem('carrello');
        localStorage.removeItem('datiTemporaneiCliente');
        setTimeout(() => {
          router.push(`/?lang=${lang}#crea-account`);
        }, 3000);
        return;
      }

      const { data: cliente } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', email)
        .single();

      if (!cliente) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const campiObbligatori = ['nome', 'cognome', 'email', 'indirizzo'];
      const incompleti = campiObbligatori.some(campo => !cliente[campo]);

      if (incompleti) {
        localStorage.setItem('datiTemporaneiCliente', JSON.stringify(cliente));
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      setCliente(cliente);
    };

    fetchCliente();
    const datiCarrello = JSON.parse(localStorage.getItem('carrello')) || [];
    setCarrello(datiCarrello);
    setCodiceOrdine(generaCodiceOrdine());
  }, []);

  useEffect(() => {
    const somma = carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0);
    setTotaleFinale(somma + costoSpedizione);
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    if (!scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR';
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [scriptCaricato]);

  const aggiornaQuantitaProdotti = async () => {
    for (const item of carrello) {
      const { id, quantita: qtaAcquistata } = item;
      const { data: prodottoCorrente, error: erroreFetch } = await supabase
        .from('products')
        .select('quantita')
        .eq('id', id)
        .single();

      if (!erroreFetch && prodottoCorrente) {
        const nuovaQuantita = Math.max((prodottoCorrente.quantita || 0) - qtaAcquistata, 0);
      if (!isNaN(nuovaQuantita)) {
        await supabase.from('products').update({ quantita: nuovaQuantita }).eq('id', id);
      }
        
      }
    }
  };

  const renderPayPalButtons = () => {
    if (!window.paypal || !document.getElementById('paypal-button-container')) return;
    document.getElementById('paypal-button-container').innerHTML = '';

    window.paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{ amount: { value: totaleFinale.toFixed(2) } }]
        });
      },
      onApprove: async (data, actions) => {
        const details = await actions.order.capture();

        const ordine = {
          id: codiceOrdine,
          cliente,
          carrello,
          spedizione,
          pagamento: 'PayPal',
          totale: totaleFinale,
          stato: 'pagato',
          data: new Date().toISOString()
        };

        await supabase.from('ordini').insert([ordine]);
        await aggiornaQuantitaProdotti();
        if (cliente.email) {
          const { data: clienteAttuale } = await supabase
            .from('clienti')
            .select('ordini')
            .eq('email', cliente.email)
            .single();
        
          const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
          await supabase
            .from('clienti')
            .update({ ordini: [...ordiniEsistenti, ordine] })
            .eq('email', cliente.email);
        }        
        localStorage.setItem('ordineId', codiceOrdine);
        localStorage.setItem('nomeCliente', cliente.nome);
        localStorage.removeItem('carrello');

        alert('Pagamento completato con PayPal!');
        router.push(`/ordine-confermato?lang=${lang}`);
      }
    }).render('#paypal-button-container');
  };

  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert('Devi accettare le condizioni per proseguire.');
      return;
    }

    const ordine = {
      id: codiceOrdine,
      cliente,
      carrello,
      spedizione,
      pagamento,
      totale: totaleFinale,
      stato: 'in attesa bonifico',
      data: new Date().toISOString()
    };

    await supabase.from('ordini').insert([ordine]);
    await aggiornaQuantitaProdotti();
    if (cliente.email) {
      const { data: clienteAttuale } = await supabase
        .from('clienti')
        .select('ordini')
        .eq('email', cliente.email)
        .single();
    
      const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
      await supabase
        .from('clienti')
        .update({ ordini: [...ordiniEsistenti, ordine] })
        .eq('email', cliente.email);
    }
    setMessaggio('Ordine registrato con successo. Riceverai una conferma dopo la verifica del bonifico.');    
    localStorage.setItem('ordineId', codiceOrdine);
    localStorage.setItem('nomeCliente', cliente.nome);
    localStorage.removeItem('carrello');

    alert('Grazie! Il tuo ordine è stato registrato. Riceverai una conferma dopo la verifica del bonifico.');
    router.push(`/ordine-confermato?lang=${lang}`);
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '1rem' }}>Pagamento</h1>

      {messaggio && (
        <div style={{ backgroundColor: '#400', padding: '1rem', borderRadius: '6px', marginBottom: '1rem', textAlign: 'center' }}>
          {messaggio}
        </div>
      )}

      <div style={{ maxWidth: '500px', margin: '0 auto' }}>
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di spedizione:</label>
        <select
          value={spedizione}
          onChange={(e) => {
            setSpedizione(e.target.value);
            setCostoSpedizione(e.target.value === 'express' ? 15 : e.target.value === 'standard' ? 5 : 0);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="standard">Standard (€5.00)</option>
          <option value="express">Express (€15.00)</option>
          <option value="ritiro">Ritiro in negozio (gratis)</option>
        </select>

        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di pagamento:</label>
        <select
          value={pagamento}
          onChange={(e) => {
            setPagamento(e.target.value);
            if (e.target.value === 'bonifico') setMostraConfermaBonifico(true);
            else setMostraConfermaBonifico(false);
            if (e.target.value === 'paypal') setTimeout(renderPayPalButtons, 300); // Delay per essere sicuri che il div esista
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="paypal">PayPal</option>
          <option value="bonifico">Bonifico Bancario</option>
        </select>

        <p style={{ fontWeight: 'bold', textAlign: 'center', marginBottom: '1rem' }}>
          Totale: {'\u20AC'} {totaleFinale.toFixed(2)}
        </p>

        {pagamento === 'paypal' && (
          <div id="paypal-button-container" style={{ marginTop: '1rem' }}></div>
        )}

        {mostraConfermaBonifico && (
          <div style={{ marginTop: '1rem', border: '1px solid gray', padding: '1rem', borderRadius: '6px' }}>
            <p>Per completare il pagamento con bonifico, effettua il versamento su:</p>
            <p><strong>IBAN:</strong> IT00X0000000000000000000000</p>
            <p><strong>Intestato a:</strong> G-R Gabriella Romeo</p>
            <p><strong>Causale:</strong> Ordine {codiceOrdine}</p>

            <label style={{ display: 'block', marginTop: '1rem' }}>
              <input
                type="checkbox"
                checked={accettaCondizioni}
                onChange={() => setAccettaCondizioni(!accettaCondizioni)}
                style={{ marginRight: '0.5rem' }}
              />
              Accetto le condizioni e confermo di aver effettuato il bonifico.
            </label>

            <button
              onClick={confermaBonificoEffettuato}
              style={{
                marginTop: '1rem',
                width: '100%',
                padding: '0.75rem',
                backgroundColor: accettaCondizioni ? 'green' : 'gray',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: accettaCondizioni ? 'pointer' : 'not-allowed'
              }}
              disabled={!accettaCondizioni}
            >
              Conferma Bonifico
            </button>
          </div>
        )}
      </div>
    </main>
  );

}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy14.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [totaleFinale, setTotaleFinale] = useState(0);
  const [messaggio, setMessaggio] = useState('');
  const [mostraConfermaBonifico, setMostraConfermaBonifico] = useState(false);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const generaCodiceOrdine = () => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  };

  useEffect(() => {
    const fetchCliente = async () => {
      // 1. Controlla prima i dati di checkout nel localStorage
      const checkoutDati = localStorage.getItem('checkout_dati');
      if (checkoutDati) {
        try {
          const dati = JSON.parse(checkoutDati);
          setCliente({
            id: dati.cliente_id,
            email: dati.email
          });
          
          // Rimuovi i dati dopo l'uso
          localStorage.removeItem('checkout_dati');
          return;
        } catch (error) {
          console.error('Errore nel parsing dei dati di checkout:', error);
        }
      }

      // 2. Se non ci sono dati di checkout, controlla la sessione
      const { data: { session }, error } = await supabase.auth.getSession();
      const user = session?.user;

      if (!user) {
        setMessaggio('Devi essere loggato per procedere al pagamento.');
        localStorage.removeItem('carrello');
        localStorage.removeItem('datiTemporaneiCliente');
        setTimeout(() => {
          router.push(`/?lang=${lang}#crea-account`);
        }, 3000);
        return;
      }

      // 3. Recupera i dati del cliente
      const { data: cliente } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', user.email)
        .single();

      if (!cliente) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const campiObbligatori = ['nome', 'cognome', 'email', 'indirizzo'];
      const incompleti = campiObbligatori.some(campo => !cliente[campo]);

      if (incompleti) {
        localStorage.setItem('datiTemporaneiCliente', JSON.stringify(cliente));
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      setCliente(cliente);
    };

    fetchCliente();
    const datiCarrello = JSON.parse(localStorage.getItem('carrello')) || [];
    setCarrello(datiCarrello);
    setCodiceOrdine(generaCodiceOrdine());
  }, []);

  useEffect(() => {
    const somma = carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0);
    setTotaleFinale(somma + costoSpedizione);
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    if (!scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR';
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [scriptCaricato]);

  const aggiornaQuantitaProdotti = async () => {
    for (const item of carrello) {
      const { id, quantita: qtaAcquistata } = item;
      const { data: prodottoCorrente, error: erroreFetch } = await supabase
        .from('products')
        .select('quantita')
        .eq('id', id)
        .single();

      if (!erroreFetch && prodottoCorrente) {
        const nuovaQuantita = Math.max((prodottoCorrente.quantita || 0) - qtaAcquistata, 0);
        if (!isNaN(nuovaQuantita)) {
          await supabase.from('products').update({ quantita: nuovaQuantita }).eq('id', id);
        }
      }
    }
  };

  const renderPayPalButtons = () => {
    if (!window.paypal || !document.getElementById('paypal-button-container')) return;
    document.getElementById('paypal-button-container').innerHTML = '';

    window.paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{ amount: { value: totaleFinale.toFixed(2) } }]
        });
      },
      onApprove: async (data, actions) => {
        const details = await actions.order.capture();

        const ordine = {
          id: codiceOrdine,
          cliente,
          carrello,
          spedizione,
          pagamento: 'PayPal',
          totale: totaleFinale,
          stato: 'pagato',
          data: new Date().toISOString()
        };

        await supabase.from('ordini').insert([ordine]);
        await aggiornaQuantitaProdotti();
        if (cliente.email) {
          const { data: clienteAttuale } = await supabase
            .from('clienti')
            .select('ordini')
            .eq('email', cliente.email)
            .single();
        
          const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
          await supabase
            .from('clienti')
            .update({ ordini: [...ordiniEsistenti, ordine] })
            .eq('email', cliente.email);
        }        
        localStorage.setItem('ordineId', codiceOrdine);
        localStorage.setItem('nomeCliente', cliente.nome);
        localStorage.removeItem('carrello');

        alert('Pagamento completato con PayPal!');
        router.push(`/ordine-confermato?lang=${lang}`);
      }
    }).render('#paypal-button-container');
  };

  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert('Devi accettare le condizioni per proseguire.');
      return;
    }

    const ordine = {
      id: codiceOrdine,
      cliente,
      carrello,
      spedizione,
      pagamento,
      totale: totaleFinale,
      stato: 'in attesa bonifico',
      data: new Date().toISOString()
    };

    await supabase.from('ordini').insert([ordine]);
    await aggiornaQuantitaProdotti();
    if (cliente.email) {
      const { data: clienteAttuale } = await supabase
        .from('clienti')
        .select('ordini')
        .eq('email', cliente.email)
        .single();
    
      const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
      await supabase
        .from('clienti')
        .update({ ordini: [...ordiniEsistenti, ordine] })
        .eq('email', cliente.email);
    }
    setMessaggio('Ordine registrato con successo. Riceverai una conferma dopo la verifica del bonifico.');    
    localStorage.setItem('ordineId', codiceOrdine);
    localStorage.setItem('nomeCliente', cliente.nome);
    localStorage.removeItem('carrello');

    alert('Grazie! Il tuo ordine è stato registrato. Riceverai una conferma dopo la verifica del bonifico.');
    router.push(`/ordine-confermato?lang=${lang}`);
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '1rem' }}>Pagamento</h1>

      {messaggio && (
        <div style={{ backgroundColor: '#400', padding: '1rem', borderRadius: '6px', marginBottom: '1rem', textAlign: 'center' }}>
          {messaggio}
        </div>
      )}

      <div style={{ maxWidth: '500px', margin: '0 auto' }}>
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di spedizione:</label>
        <select
          value={spedizione}
          onChange={(e) => {
            setSpedizione(e.target.value);
            setCostoSpedizione(e.target.value === 'express' ? 15 : e.target.value === 'standard' ? 5 : 0);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="standard">Standard (€5.00)</option>
          <option value="express">Express (€15.00)</option>
          <option value="ritiro">Ritiro in negozio (gratis)</option>
        </select>

        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di pagamento:</label>
        <select
          value={pagamento}
          onChange={(e) => {
            setPagamento(e.target.value);
            if (e.target.value === 'bonifico') setMostraConfermaBonifico(true);
            else setMostraConfermaBonifico(false);
            if (e.target.value === 'paypal') setTimeout(renderPayPalButtons, 300);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="paypal">PayPal</option>
          <option value="bonifico">Bonifico Bancario</option>
        </select>

        <p style={{ fontWeight: 'bold', textAlign: 'center', marginBottom: '1rem' }}>
          Totale: {'\u20AC'} {totaleFinale.toFixed(2)}
        </p>

        {pagamento === 'paypal' && (
          <div id="paypal-button-container" style={{ marginTop: '1rem' }}></div>
        )}

        {mostraConfermaBonifico && (
          <div style={{ marginTop: '1rem', border: '1px solid gray', padding: '1rem', borderRadius: '6px' }}>
            <p>Per completare il pagamento con bonifico, effettua il versamento su:</p>
            <p><strong>IBAN:</strong> IT00X0000000000000000000000</p>
            <p><strong>Intestato a:</strong> G-R Gabriella Romeo</p>
            <p><strong>Causale:</strong> Ordine {codiceOrdine}</p>

            <label style={{ display: 'block', marginTop: '1rem' }}>
              <input
                type="checkbox"
                checked={accettaCondizioni}
                onChange={() => setAccettaCondizioni(!accettaCondizioni)}
                style={{ marginRight: '0.5rem' }}
              />
              Accetto le condizioni e confermo di aver effettuato il bonifico.
            </label>

            <button
              onClick={confermaBonificoEffettuato}
              style={{
                marginTop: '1rem',
                width: '100%',
                padding: '0.75rem',
                backgroundColor: accettaCondizioni ? 'green' : 'gray',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: accettaCondizioni ? 'pointer' : 'not-allowed'
              }}
              disabled={!accettaCondizioni}
            >
              Conferma Bonifico
            </button>
          </div>
        )}
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy15.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [totaleFinale, setTotaleFinale] = useState(0);
  const [messaggio, setMessaggio] = useState('');
  const [mostraConfermaBonifico, setMostraConfermaBonifico] = useState(false);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const generaCodiceOrdine = () => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  };

  useEffect(() => {
    const fetchCliente = async () => {
      // 1. Controlla prima i dati di checkout nel localStorage
      const checkoutDati = localStorage.getItem('checkout_dati');
      if (checkoutDati) {
        try {
          const dati = JSON.parse(checkoutDati);
          setCliente({
            id: dati.cliente_id,
            email: dati.email
          });
          
          // Rimuovi i dati dopo l'uso
          localStorage.removeItem('checkout_dati');
          return;
        } catch (error) {
          console.error('Errore nel parsing dei dati di checkout:', error);
        }
      }

      // 2. Se non ci sono dati di checkout, controlla la sessione
      const { data: { session }, error } = await supabase.auth.getSession();
      const user = session?.user;

      if (!user) {
        setMessaggio('Devi essere loggato per procedere al pagamento.');
        localStorage.removeItem('carrello');
        localStorage.removeItem('datiTemporaneiCliente');
        setTimeout(() => {
          router.push(`/?lang=${lang}#crea-account`);
        }, 3000);
        return;
      }

      // 3. Recupera i dati del cliente
      const { data: cliente } = await supabase
        .from('clienti')
        .select('*')
        .eq('email', user.email)
        .single();

      if (!cliente) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      const campiObbligatori = ['nome', 'cognome', 'email', 'indirizzo'];
      const incompleti = campiObbligatori.some(campo => !cliente[campo]);

      if (incompleti) {
        localStorage.setItem('datiTemporaneiCliente', JSON.stringify(cliente));
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      setCliente(cliente);
    };

    fetchCliente();
    const datiCarrello = JSON.parse(localStorage.getItem('carrello')) || [];
    setCarrello(datiCarrello);
    setCodiceOrdine(generaCodiceOrdine());
  }, []);

  useEffect(() => {
    const somma = carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0);
    setTotaleFinale(somma + costoSpedizione);
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    if (!scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR';
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [scriptCaricato]);

  const aggiornaQuantitaProdotti = async () => {
    for (const item of carrello) {
      const { id, quantita: qtaAcquistata } = item;
      const { data: prodottoCorrente, error: erroreFetch } = await supabase
        .from('products')
        .select('quantita')
        .eq('id', id)
        .single();

      if (!erroreFetch && prodottoCorrente) {
        const nuovaQuantita = Math.max((prodottoCorrente.quantita || 0) - qtaAcquistata, 0);
        if (!isNaN(nuovaQuantita)) {
          await supabase.from('products').update({ quantita: nuovaQuantita }).eq('id', id);
        }
      }
    }
  };

  const renderPayPalButtons = () => {
    if (!window.paypal || !document.getElementById('paypal-button-container')) return;
    document.getElementById('paypal-button-container').innerHTML = '';

    window.paypal.Buttons({
      createOrder: (data, actions) => {
        return actions.order.create({
          purchase_units: [{ amount: { value: totaleFinale.toFixed(2) } }]
        });
      },
      onApprove: async (data, actions) => {
        const details = await actions.order.capture();

        const ordine = {
          id: codiceOrdine,
          cliente,
          carrello,
          spedizione,
          pagamento: 'PayPal',
          totale: totaleFinale,
          stato: 'pagato',
          data: new Date().toISOString()
        };

        await supabase.from('ordini').insert([ordine]);
        await aggiornaQuantitaProdotti();
        if (cliente.email) {
          const { data: clienteAttuale } = await supabase
            .from('clienti')
            .select('ordini')
            .eq('email', cliente.email)
            .single();
        
          const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
          await supabase
            .from('clienti')
            .update({ ordini: [...ordiniEsistenti, ordine] })
            .eq('email', cliente.email);
        }        
        localStorage.setItem('ordineId', codiceOrdine);
        localStorage.setItem('nomeCliente', cliente.nome);
        localStorage.removeItem('carrello');

        alert('Pagamento completato con PayPal!');
        router.push(`/ordine-confermato?lang=${lang}`);
      }
    }).render('#paypal-button-container');
  };

  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert('Devi accettare le condizioni per proseguire.');
      return;
    }

    const ordine = {
      id: codiceOrdine,
      cliente,
      carrello,
      spedizione,
      pagamento,
      totale: totaleFinale,
      stato: 'in attesa bonifico',
      data: new Date().toISOString()
    };

    await supabase.from('ordini').insert([ordine]);
    await aggiornaQuantitaProdotti();
    if (cliente.email) {
      const { data: clienteAttuale } = await supabase
        .from('clienti')
        .select('ordini')
        .eq('email', cliente.email)
        .single();
    
      const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
      await supabase
        .from('clienti')
        .update({ ordini: [...ordiniEsistenti, ordine] })
        .eq('email', cliente.email);
    }
    setMessaggio('Ordine registrato con successo. Riceverai una conferma dopo la verifica del bonifico.');    
    localStorage.setItem('ordineId', codiceOrdine);
    localStorage.setItem('nomeCliente', cliente.nome);
    localStorage.removeItem('carrello');

    alert('Grazie! Il tuo ordine è stato registrato. Riceverai una conferma dopo la verifica del bonifico.');
    router.push(`/ordine-confermato?lang=${lang}`);
  };

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '1rem' }}>Pagamento</h1>

      {messaggio && (
        <div style={{ backgroundColor: '#400', padding: '1rem', borderRadius: '6px', marginBottom: '1rem', textAlign: 'center' }}>
          {messaggio}
        </div>
      )}

      <div style={{ maxWidth: '500px', margin: '0 auto' }}>
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di spedizione:</label>
        <select
          value={spedizione}
          onChange={(e) => {
            setSpedizione(e.target.value);
            setCostoSpedizione(e.target.value === 'express' ? 15 : e.target.value === 'standard' ? 5 : 0);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="standard">Standard (€5.00)</option>
          <option value="express">Express (€15.00)</option>
          <option value="ritiro">Ritiro in negozio (gratis)</option>
        </select>

        <label style={{ display: 'block', marginBottom: '0.5rem' }}>Metodo di pagamento:</label>
        <select
          value={pagamento}
          onChange={(e) => {
            setPagamento(e.target.value);
            if (e.target.value === 'bonifico') setMostraConfermaBonifico(true);
            else setMostraConfermaBonifico(false);
            if (e.target.value === 'paypal') setTimeout(renderPayPalButtons, 300);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- Seleziona --</option>
          <option value="paypal">PayPal</option>
          <option value="bonifico">Bonifico Bancario</option>
        </select>

        <p style={{ fontWeight: 'bold', textAlign: 'center', marginBottom: '1rem' }}>
          Totale: {'\u20AC'} {totaleFinale.toFixed(2)}
        </p>

        {pagamento === 'paypal' && (
          <div id="paypal-button-container" style={{ marginTop: '1rem' }}></div>
        )}

        {mostraConfermaBonifico && (
          <div style={{ marginTop: '1rem', border: '1px solid gray', padding: '1rem', borderRadius: '6px' }}>
            <p>Per completare il pagamento con bonifico, effettua il versamento su:</p>
            <p><strong>IBAN:</strong> IT00X0000000000000000000000</p>
            <p><strong>Intestato a:</strong> G-R Gabriella Romeo</p>
            <p><strong>Causale:</strong> Ordine {codiceOrdine}</p>

            <label style={{ display: 'block', marginTop: '1rem' }}>
              <input
                type="checkbox"
                checked={accettaCondizioni}
                onChange={() => setAccettaCondizioni(!accettaCondizioni)}
                style={{ marginRight: '0.5rem' }}
              />
              Accetto le condizioni e confermo di aver effettuato il bonifico.
            </label>

            <button
              onClick={confermaBonificoEffettuato}
              style={{
                marginTop: '1rem',
                width: '100%',
                padding: '0.75rem',
                backgroundColor: accettaCondizioni ? 'green' : 'gray',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: accettaCondizioni ? 'pointer' : 'not-allowed'
              }}
              disabled={!accettaCondizioni}
            >
              Conferma Bonifico
            </button>
          </div>
        )}
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy16.js -----
'use client';

import { useEffect, useState, useMemo, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

const traduzioni = {
  it: {
    titolo: 'Pagamento',
    spedizione: 'Metodo di spedizione',
    pagamento: 'Metodo di pagamento',
    totale: 'Totale',
    seleziona: 'Seleziona',
    standard: 'Standard (€5.00)',
    express: 'Express (€15.00)',
    ritiro: 'Ritiro in negozio (gratis)',
    paypal: 'PayPal',
    bonifico: 'Bonifico Bancario',
    intestatario: 'Intestato a: G-R Gabriella Romeo',
    causale: 'Causale: Ordine',
    condizioni: 'Accetto le condizioni e confermo di aver effettuato il bonifico',
    conferma: 'Conferma Bonifico',
    errori: {
      condizioni: 'Devi accettare le condizioni per proseguire',
      generico: 'Si è verificato un errore. Riprova più tardi'
    },
    loading: 'Caricamento...'
  },
  en: {
    titolo: 'Payment',
    spedizione: 'Shipping method',
    pagamento: 'Payment method',
    totale: 'Total',
    seleziona: 'Select',
    standard: 'Standard (€5.00)',
    express: 'Express (€15.00)',
    ritiro: 'Store pickup (free)',
    paypal: 'PayPal',
    bonifico: 'Bank Transfer',
    intestatario: 'Payee: G-R Gabriella Romeo',
    causale: 'Reference: Order',
    condizioni: 'I accept the terms and confirm the bank transfer',
    conferma: 'Confirm Transfer',
    errori: {
      condizioni: 'You must accept the terms to proceed',
      generico: 'An error occurred. Please try again later'
    },
    loading: 'Loading...'
  },
  fr: {
    titolo: 'Paiement',
    spedizione: 'Méthode de livraison',
    pagamento: 'Méthode de paiement',
    totale: 'Total',
    seleziona: 'Sélectionner',
    standard: 'Standard (5,00 €)',
    express: 'Express (15,00 €)',
    ritiro: 'Retrait en magasin (gratuit)',
    paypal: 'PayPal',
    bonifico: 'Virement bancaire',
    intestatario: 'Bénéficiaire : G-R Gabriella Romeo',
    causale: 'Référence : Commande',
    condizioni: 'J\'accepte les conditions et confirme le virement',
    conferma: 'Confirmer le virement',
    errori: {
      condizioni: 'Vous devez accepter les conditions pour continuer',
      generico: 'Une erreur s\'est produite. Veuillez réessayer plus tard'
    },
    loading: 'Chargement...'
  },
  de: {
    titolo: 'Zahlung',
    spedizione: 'Versandart',
    pagamento: 'Zahlungsmethode',
    totale: 'Gesamt',
    seleziona: 'Auswählen',
    standard: 'Standard (5,00 €)',
    express: 'Express (15,00 €)',
    ritiro: 'Abholung im Geschäft (kostenlos)',
    paypal: 'PayPal',
    bonifico: 'Banküberweisung',
    intestatario: 'Empfänger: G-R Gabriella Romeo',
    causale: 'Verwendungszweck: Bestellung',
    condizioni: 'Ich akzeptiere die Bedingungen und bestätige die Überweisung',
    conferma: 'Überweisung bestätigen',
    errori: {
      condizioni: 'Sie müssen die Bedingungen akzeptieren',
      generico: 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut'
    },
    loading: 'Laden...'
  },
  es: {
    titolo: 'Pago',
    spedizione: 'Método de envío',
    pagamento: 'Método de pago',
    totale: 'Total',
    seleziona: 'Seleccionar',
    standard: 'Estándar (5,00 €)',
    express: 'Express (15,00 €)',
    ritiro: 'Recogida en tienda (gratis)',
    paypal: 'PayPal',
    bonifico: 'Transferencia bancaria',
    intestatario: 'Titular: G-R Gabriella Romeo',
    causale: 'Concepto: Pedido',
    condizioni: 'Acepto las condiciones y confirmo la transferencia',
    conferma: 'Confirmar transferencia',
    errori: {
      condizioni: 'Debes aceptar las condiciones para continuar',
      generico: 'Ocurrió un error. Por favor, inténtelo más tarde'
    },
    loading: 'Cargando...'
  },
  ar: {
    titolo: 'الدفع',
    spedizione: 'طريقة الشحن',
    pagamento: 'طريقة الدفع',
    totale: 'المجموع',
    seleziona: 'اختر',
    standard: 'قياسي (5.00 €)',
    express: 'سريع (15.00 €)',
    ritiro: 'استلام من المتجر (مجانا)',
    paypal: 'باي بال',
    bonifico: 'حوالة بنكية',
    intestatario: 'المستلم: G-R Gabriella Romeo',
    causale: 'المرجع: الطلب',
    condizioni: 'أوافق على الشروط وأؤكد التحويل البنكي',
    conferma: 'تأكيد التحويل',
    errori: {
      condizioni: 'يجب قبول الشروط للمتابعة',
      generico: 'حدث خطأ. يرجى المحاولة لاحقا'
    },
    loading: 'جاري التحميل...'
  },
  zh: {
    titolo: '支付',
    spedizione: '配送方式',
    pagamento: '支付方式',
    totale: '总计',
    seleziona: '选择',
    standard: '标准 (5.00 €)',
    express: '快速 (15.00 €)',
    ritiro: '店内取货 (免费)',
    paypal: '贝宝',
    bonifico: '银行转账',
    intestatario: '收款人: G-R Gabriella Romeo',
    causale: '参考: 订单',
    condizioni: '我接受条款并确认银行转账',
    conferma: '确认转账',
    errori: {
      condizioni: '必须接受条款才能继续',
      generico: '发生错误。请稍后再试'
    },
    loading: '加载中...'
  },
  ja: {
    titolo: 'お支払い',
    spedizione: '配送方法',
    pagamento: 'お支払い方法',
    totale: '合計',
    seleziona: '選択',
    standard: '標準 (5.00 €)',
    express: '速達 (15.00 €)',
    ritiro: '店頭受取 (無料)',
    paypal: 'PayPal',
    bonifico: '銀行振込',
    intestatario: '受取人: G-R Gabriella Romeo',
    causale: '参考: 注文',
    condizioni: '条件に同意し振込を確認します',
    conferma: '振込を確認',
    errori: {
      condizioni: '続行するには条件に同意する必要があります',
      generico: 'エラーが発生しました。後でもう一度お試しください'
    },
    loading: '読み込み中...'
  }
};

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const t = traduzioni[lang] || traduzioni.it;

  const generaCodiceOrdine = useCallback(() => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  }, []);

  const totaleFinale = useMemo(() => {
    return carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0) + costoSpedizione;
  }, [carrello, costoSpedizione]);

  useEffect(() => {
    const fetchCliente = async () => {
      setIsLoading(true);
      try {
        const checkoutDati = localStorage.getItem('checkout_dati');
        if (checkoutDati) {
          const dati = JSON.parse(checkoutDati);
          setCliente({ id: dati.cliente_id, email: dati.email });
          localStorage.removeItem('checkout_dati');
          return;
        }

        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          localStorage.removeItem('carrello');
          localStorage.removeItem('datiTemporaneiCliente');
          router.push(`/?lang=${lang}#crea-account`);
          return;
        }

        const { data: cliente } = await supabase
          .from('clienti')
          .select('*')
          .eq('email', session.user.email)
          .single();

        if (!cliente) {
          router.push(`/?lang=${lang}#crea-account`);
          return;
        }

        setCliente(cliente);
      } catch (error) {
        console.error('Errore fetch cliente:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCliente();
    setCarrello(JSON.parse(localStorage.getItem('carrello')) || []);
    setCodiceOrdine(generaCodiceOrdine());
  }, [lang, router, generaCodiceOrdine]);

  useEffect(() => {
    if (pagamento === 'paypal' && !scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = 'https://www.paypal.com/sdk/js?client-id=AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H&currency=EUR';
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [pagamento, scriptCaricato]);

  const aggiornaQuantitaProdotti = async () => {
    for (const item of carrello) {
      const { data: prodottoCorrente } = await supabase
        .from('products')
        .select('quantita')
        .eq('id', item.id)
        .single();

      if (prodottoCorrente) {
        const nuovaQuantita = Math.max((prodottoCorrente.quantita || 0) - item.quantita, 0);
        await supabase.from('products').update({ quantita: nuovaQuantita }).eq('id', item.id);
      }
    }
  };

  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert(t.errori.condizioni);
      return;
    }

    setIsLoading(true);
    try {
      const ordine = {
        id: codiceOrdine,
        cliente,
        carrello,
        spedizione,
        pagamento: 'bonifico',
        totale: totaleFinale,
        stato: 'in attesa bonifico',
        data: new Date().toISOString()
      };

      await supabase.from('ordini').insert([ordine]);
      await aggiornaQuantitaProdotti();

      if (cliente.email) {
        const { data: clienteAttuale } = await supabase
          .from('clienti')
          .select('ordini')
          .eq('email', cliente.email)
          .single();

        const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
        await supabase
          .from('clienti')
          .update({ ordini: [...ordiniEsistenti, ordine] })
          .eq('email', cliente.email);
      }

      localStorage.setItem('ordineId', codiceOrdine);
      localStorage.setItem('nomeCliente', cliente.nome);
      localStorage.removeItem('carrello');

      router.push(`/ordine-confermato?lang=${lang}&metodo=bonifico`);
    } catch (error) {
      console.error(error);
      alert(t.errori.generico);
    } finally {
      setIsLoading(false);
    }
  };

  const renderPayPalButtons = useCallback(() => {
    if (!window.paypal || !document.getElementById('paypal-button-container')) return;

    window.paypal.Buttons({
      createOrder: (data, actions) => actions.order.create({
        purchase_units: [{ amount: { value: totaleFinale.toFixed(2) } }]
      }),
      onApprove: async (data, actions) => {
        setIsLoading(true);
        try {
          await actions.order.capture();
          const ordine = {
            id: codiceOrdine,
            cliente,
            carrello,
            spedizione,
            pagamento: 'PayPal',
            totale: totaleFinale,
            stato: 'pagato',
            data: new Date().toISOString()
          };

          await supabase.from('ordini').insert([ordine]);
          await aggiornaQuantitaProdotti();

          localStorage.setItem('ordineId', codiceOrdine);
          localStorage.setItem('nomeCliente', cliente.nome);
          localStorage.removeItem('carrello');

          router.push(`/ordine-confermato?lang=${lang}&metodo=paypal`);
        } catch (error) {
          console.error(error);
          alert(t.errori.generico);
        } finally {
          setIsLoading(false);
        }
      }
    }).render('#paypal-button-container');
  }, [totaleFinale, codiceOrdine, cliente, carrello, spedizione, lang, router, t]);

  useEffect(() => {
    if (pagamento === 'paypal' && scriptCaricato) {
      renderPayPalButtons();
    }
  }, [pagamento, scriptCaricato, renderPayPalButtons]);

  const isFormValido = spedizione && pagamento && (pagamento !== 'bonifico' || accettaCondizioni);

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '1rem' }}>{t.titolo}</h1>

      {isLoading && (
        <div style={{ textAlign: 'center', margin: '1rem 0' }}>
          {t.loading}
        </div>
      )}

      <div style={{ maxWidth: '500px', margin: '0 auto' }}>
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>{t.spedizione}:</label>
        <select
          value={spedizione}
          onChange={(e) => {
            setSpedizione(e.target.value);
            setCostoSpedizione(e.target.value === 'express' ? 15 : e.target.value === 'standard' ? 5 : 0);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- {t.seleziona} --</option>
          <option value="standard">{t.standard}</option>
          <option value="express">{t.express}</option>
          <option value="ritiro">{t.ritiro}</option>
        </select>

        <label style={{ display: 'block', marginBottom: '0.5rem' }}>{t.pagamento}:</label>
        <select
          value={pagamento}
          onChange={(e) => {
            setPagamento(e.target.value);
            if (e.target.value === 'paypal') setTimeout(renderPayPalButtons, 300);
          }}
          style={{ width: '100%', marginBottom: '1rem', padding: '0.5rem', color: 'black' }}
        >
          <option value="">-- {t.seleziona} --</option>
          <option value="paypal">{t.paypal}</option>
          <option value="bonifico">{t.bonifico}</option>
        </select>

        <p style={{ fontWeight: 'bold', textAlign: 'center', marginBottom: '1rem' }}>
          {t.totale}: €{totaleFinale.toFixed(2).replace('.', ',')}
        </p>

        {pagamento === 'paypal' && (
          <div id="paypal-button-container" style={{ marginTop: '1rem' }}></div>
        )}

        {pagamento === 'bonifico' && (
          <div style={{ marginTop: '1rem', border: '1px solid gray', padding: '1rem', borderRadius: '6px' }}>
            <p>{lang === 'it' ? 'Per completare il pagamento con bonifico, effettua il versamento su:' : 'To complete payment, transfer to:'}</p>
            <p><strong>IBAN:</strong> IT10 Y050 3426 2010 0000 0204 438</p>
            <p><strong>{t.intestatario}</strong></p>
            <p><strong>{t.causale} {codiceOrdine}</strong></p>

            <label style={{ display: 'block', marginTop: '1rem' }}>
              <input
                type="checkbox"
                checked={accettaCondizioni}
                onChange={() => setAccettaCondizioni(!accettaCondizioni)}
                style={{ marginRight: '0.5rem' }}
              />
              {t.condizioni}
            </label>

            <button
              onClick={confermaBonificoEffettuato}
              disabled={!isFormValido || isLoading}
              style={{
                marginTop: '1rem',
                width: '100%',
                padding: '0.75rem',
                backgroundColor: isFormValido ? 'green' : 'gray',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: isFormValido ? 'pointer' : 'not-allowed'
              }}
            >
              {t.conferma}
            </button>
          </div>
        )}
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page.js -----
'use client';

import { useEffect, useState, useMemo, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';

// Initialize Stripe with environment variable
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY);

const traduzioni = {
  it: {
    titolo: 'Pagamento',
    spedizione: 'Metodo di spedizione',
    pagamento: 'Metodo di pagamento',
    totale: 'Totale',
    seleziona: 'Seleziona',
    standard: 'Standard (€5.00)',
    express: 'Express (€15.00)',
    ritiro: 'Ritiro in negozio (gratis)',
    paypal: 'PayPal',
    bonifico: 'Bonifico Bancario',
    carta: 'Carta di Credito',
    intestatario: 'Intestato a: G-R Gabriella Romeo',
    causale: 'Causale: Ordine',
    condizioni: 'Accetto le condizioni e confermo di aver effettuato il bonifico',
    conferma: 'Conferma Bonifico',
    paga_carta: 'Paga con Carta',
    errori: {
      condizioni: 'Devi accettare le condizioni per proseguire',
      generico: 'Si è verificato un errore. Riprova più tardi',
      carta: 'Pagamento rifiutato. Verifica i dati della carta'
    },
    loading: 'Caricamento...'
  },
  en: {
    titolo: 'Payment',
    spedizione: 'Shipping method',
    pagamento: 'Payment method',
    totale: 'Total',
    seleziona: 'Select',
    standard: 'Standard (€5.00)',
    express: 'Express (€15.00)',
    ritiro: 'Store pickup (free)',
    paypal: 'PayPal',
    bonifico: 'Bank Transfer',
    carta: 'Credit Card',
    intestatario: 'Payee: G-R Gabriella Romeo',
    causale: 'Reference: Order',
    condizioni: 'I accept the terms and confirm the bank transfer',
    conferma: 'Confirm Transfer',
    paga_carta: 'Pay with Card',
    errori: {
      condizioni: 'You must accept the terms to proceed',
      generico: 'An error occurred. Please try again later',
      carta: 'Payment declined. Check your card details'
    },
    loading: 'Loading...'
  },
  fr: {
    titolo: 'Paiement',
    spedizione: 'Méthode de livraison',
    pagamento: 'Méthode de paiement',
    totale: 'Total',
    seleziona: 'Sélectionner',
    standard: 'Standard (5,00 €)',
    express: 'Express (15,00 €)',
    ritiro: 'Retrait en magasin (gratuit)',
    paypal: 'PayPal',
    bonifico: 'Virement bancaire',
    carta: 'Carte de crédit',
    intestatario: 'Bénéficiaire : G-R Gabriella Romeo',
    causale: 'Référence : Commande',
    conditions: 'J\'accepte les conditions et confirme le virement',
    conferma: 'Confirmer le virement',
    paga_carta: 'Payer par carte',
    errori: {
      condizioni: 'Vous devez accepter les conditions pour continuer',
      generico: 'Une erreur s\'est produite. Veuillez réessayer plus tard',
      carta: 'Paiement refusé. Vérifiez les détails de votre carte'
    },
    loading: 'Chargement...'
  },
  de: {
    titolo: 'Zahlung',
    spedizione: 'Versandart',
    pagamento: 'Zahlungsmethode',
    totale: 'Gesamt',
    seleziona: 'Auswählen',
    standard: 'Standard (5,00 €)',
    express: 'Express (15,00 €)',
    ritiro: 'Abholung im Geschäft (kostenlos)',
    paypal: 'PayPal',
    bonifico: 'Banküberweisung',
    carta: 'Kreditkarte',
    intestatario: 'Empfänger: G-R Gabriella Romeo',
    causale: 'Verwendungszweck: Bestellung',
    condizioni: 'Ich akzeptiere die Bedingungen und bestätige die Überweisung',
    conferma: 'Überweisung bestätigen',
    paga_carta: 'Mit Karte zahlen',
    errori: {
      condizioni: 'Sie müssen die Bedingungen akzeptieren',
      generico: 'Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut',
      carta: 'Zahlung abgelehnt. Überprüfen Sie Ihre Kartendetails'
    },
    loading: 'Laden...'
  },
  es: {
    titolo: 'Pago',
    spedizione: 'Método de envío',
    pagamento: 'Método de pago',
    totale: 'Total',
    seleziona: 'Seleccionar',
    standard: 'Estándar (5,00 €)',
    express: 'Express (15,00 €)',
    ritiro: 'Recogida en tienda (gratis)',
    paypal: 'PayPal',
    bonifico: 'Transferencia bancaria',
    carta: 'Tarjeta de crédito',
    intestatario: 'Titular: G-R Gabriella Romeo',
    causale: 'Concepto: Pedido',
    condizioni: 'Acepto las condiciones y confirmo la transferencia',
    conferma: 'Confirmar transferencia',
    paga_carta: 'Pagar con tarjeta',
    errori: {
      condizioni: 'Debes aceptar las condiciones para continuar',
      generico: 'Ocurrió un error. Por favor, inténtelo más tarde',
      carta: 'Pago rechazado. Verifique los datos de su tarjeta'
    },
    loading: 'Cargando...'
  },
  ar: {
    titolo: 'الدفع',
    spedizione: 'طريقة الشحن',
    pagamento: 'طريقة الدفع',
    totale: 'المجموع',
    seleziona: 'اختر',
    standard: 'قياسي (5.00 €)',
    express: 'سريع (15.00 €)',
    ritiro: 'استلام من المتجر (مجانا)',
    paypal: 'باي بال',
    bonifico: 'حوالة بنكية',
    carta: 'بطاقة ائتمان',
    intestatario: 'المستلم: G-R Gabriella Romeo',
    causale: 'المرجع: الطلب',
    condizioni: 'أوافق على الشروط وأؤكد التحويل البنكي',
    conferma: 'تأكيد التحويل',
    paga_carta: 'الدفع بالبطاقة',
    errori: {
      condizioni: 'يجب قبول الشروط للمتابعة',
      generico: 'حدث خطأ. يرجى المحاولة لاحقا',
      carta: 'تم رفض الدفع. تحقق من تفاصيل بطاقتك'
    },
    loading: 'جاري التحميل...'
  },
  zh: {
    titolo: '支付',
    spedizione: '配送方式',
    pagamento: '支付方式',
    totale: '总计',
    seleziona: '选择',
    standard: '标准 (5.00 €)',
    express: '快速 (15.00 €)',
    ritiro: '店内取货 (免费)',
    paypal: '贝宝',
    bonifico: '银行转账',
    carta: '信用卡',
    intestatario: '收款人: G-R Gabriella Romeo',
    causale: '参考: 订单',
    condizioni: '我接受条款并确认银行转账',
    conferma: '确认转账',
    paga_carta: '用卡支付',
    errori: {
      condizioni: '必须接受条款才能继续',
      generico: '发生错误。请稍后再试',
      carta: '付款被拒。请检查您的卡信息'
    },
    loading: '加载中...'
  },
  ja: {
    titolo: 'お支払い',
    spedizione: '配送方法',
    pagamento: 'お支払い方法',
    totale: '合計',
    seleziona: '選択',
    standard: '標準 (5.00 €)',
    express: '速達 (15.00 €)',
    ritiro: '店頭受取 (無料)',
    paypal: 'PayPal',
    bonifico: '銀行振込',
    carta: 'クレジットカード',
    intestatario: '受取人: G-R Gabriella Romeo',
    causale: '参考: 注文',
    condizioni: '条件に同意し振込を確認します',
    conferma: '振込を確認',
    paga_carta: 'カードで支払う',
    errori: {
      condizioni: '続行するには条件に同意する必要があります',
      generico: 'エラーが発生しました。後でもう一度お試しください',
      carta: 'お支払いが拒否されました。カード情報をご確認ください'
    },
    loading: '読み込み中...'
  }
};

// Stripe Payment Component
const StripePayment = ({ 
  totaleFinale, 
  codiceOrdine, 
  cliente, 
  carrello, 
  spedizione, 
  lang, 
  router,
  t 
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [isProcessing, setIsProcessing] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!stripe || !elements) return;

    setIsProcessing(true);
    
    try {
      // Create Payment Intent
      const { clientSecret } = await fetch('/api/create-payment-intent', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          amount: Math.round(totaleFinale * 100),
          currency: 'eur',
          metadata: { 
            order_id: codiceOrdine,
            email: cliente.email,
            country: cliente.paese || 'IT'
          }
        })
      }).then(res => res.json());

      // Confirm payment
      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement),
          billing_details: {
            name: cliente.nome || cliente.email,
            email: cliente.email
          }
        }
      });

      if (error) throw error;
      
      // Save order
      const ordine = {
        id: codiceOrdine,
        cliente,
        carrello,
        spedizione,
        pagamento: 'Carta di Credito',
        totale: totaleFinale,
        stato: 'pagato',
        data: new Date().toISOString(),
        transazione_id: paymentIntent.id
      };

      await supabase.from('ordini').insert([ordine]);
      localStorage.setItem('ordineId', codiceOrdine);
      localStorage.removeItem('carrello');
      router.push(`/ordine-confermato?lang=${lang}&metodo=carta`);
      
    } catch (error) {
      console.error('Errore pagamento:', error);
      alert(error.message || t.errori.carta);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginTop: '1rem' }}>
      <div style={{ 
        padding: '1rem', 
        border: '1px solid #ccc', 
        borderRadius: '6px',
        marginBottom: '1rem'
      }}>
        <CardElement 
          options={{
            style: {
              base: {
                fontSize: '16px',
                color: '#424770',
                '::placeholder': { color: '#aab7c4' },
                fontFamily: 'Arial, sans-serif'
              },
              invalid: { color: '#9e2146' }
            }
          }}
        />
      </div>
      <button 
        type="submit" 
        disabled={!stripe || isProcessing}
        style={{
          width: '100%',
          padding: '0.75rem',
          backgroundColor: stripe ? '#635bff' : 'gray',
          color: 'white',
          border: 'none',
          borderRadius: '6px',
          cursor: stripe ? 'pointer' : 'not-allowed',
          fontFamily: 'Arial, sans-serif'
        }}
      >
        {isProcessing ? t.loading : t.paga_carta}
      </button>
    </form>
  );
};

export default function PagamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [carrello, setCarrello] = useState([]);
  const [cliente, setCliente] = useState(null);
  const [spedizione, setSpedizione] = useState('');
  const [pagamento, setPagamento] = useState('');
  const [costoSpedizione, setCostoSpedizione] = useState(0);
  const [accettaCondizioni, setAccettaCondizioni] = useState(false);
  const [codiceOrdine, setCodiceOrdine] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [scriptCaricato, setScriptCaricato] = useState(false);

  const t = traduzioni[lang] || traduzioni.it;

  // Generate unique order code
  const generaCodiceOrdine = useCallback(() => {
    const oggi = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const random = Math.random().toString(36).substring(2, 7).toUpperCase();
    return `GR-${oggi}-${random}`;
  }, []);

  // Calculate final total (cart + shipping)
  const totaleFinale = useMemo(() => {
    return carrello.reduce((acc, p) => acc + p.prezzo * p.quantita, 0) + costoSpedizione;
  }, [carrello, costoSpedizione]);

  // Load cart and customer
  useEffect(() => {
    const fetchCliente = async () => {
      setIsLoading(true);
      try {
        const checkoutDati = localStorage.getItem('checkout_dati');
        if (checkoutDati) {
          const dati = JSON.parse(checkoutDati);
          setCliente({ id: dati.cliente_id, email: dati.email });
          localStorage.removeItem('checkout_dati');
          return;
        }

        const { data: { session } } = await supabase.auth.getSession();
        if (!session?.user) {
          localStorage.removeItem('carrello');
          localStorage.removeItem('datiTemporaneiCliente');
          router.push(`/?lang=${lang}#crea-account`);
          return;
        }

        const { data: cliente } = await supabase
          .from('clienti')
          .select('*')
          .eq('email', session.user.email)
          .single();

        if (!cliente) {
          router.push(`/?lang=${lang}#crea-account`);
          return;
        }

        setCliente(cliente);
      } catch (error) {
        console.error('Errore fetch cliente:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCliente();
    setCarrello(JSON.parse(localStorage.getItem('carrello')) || []);
    setCodiceOrdine(generaCodiceOrdine());
  }, [lang, router, generaCodiceOrdine]);

  // Load PayPal script if needed
  useEffect(() => {
    if (pagamento === 'paypal' && !scriptCaricato && typeof window !== 'undefined') {
      const script = document.createElement('script');
      script.src = `https://www.paypal.com/sdk/js?client-id=${process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID}&currency=EUR`;
      script.onload = () => setScriptCaricato(true);
      document.body.appendChild(script);
    }
  }, [pagamento, scriptCaricato]);

  // Update product quantities in DB after order
  const aggiornaQuantitaProdotti = async () => {
    for (const item of carrello) {
      const { data: prodottoCorrente } = await supabase
        .from('products')
        .select('quantita')
        .eq('id', item.id)
        .single();

      if (prodottoCorrente) {
        const nuovaQuantita = Math.max((prodottoCorrente.quantita || 0) - item.quantita, 0);
        await supabase.from('products').update({ quantita: nuovaQuantita }).eq('id', item.id);
      }
    }
  };

  // Confirm bank transfer order
  const confermaBonificoEffettuato = async () => {
    if (!accettaCondizioni) {
      alert(t.errori.condizioni);
      return;
    }

    setIsLoading(true);
    try {
      const ordine = {
        id: codiceOrdine,
        cliente,
        carrello,
        spedizione,
        pagamento: 'bonifico',
        totale: totaleFinale,
        stato: 'in attesa bonifico',
        data: new Date().toISOString()
      };

      await supabase.from('ordini').insert([ordine]);
      await aggiornaQuantitaProdotti();

      if (cliente.email) {
        const { data: clienteAttuale } = await supabase
          .from('clienti')
          .select('ordini')
          .eq('email', cliente.email)
          .single();

        const ordiniEsistenti = Array.isArray(clienteAttuale?.ordini) ? clienteAttuale.ordini : [];
        await supabase
          .from('clienti')
          .update({ ordini: [...ordiniEsistenti, ordine] })
          .eq('email', cliente.email);
      }

      localStorage.setItem('ordineId', codiceOrdine);
      localStorage.setItem('nomeCliente', cliente.nome);
      localStorage.removeItem('carrello');

      router.push(`/ordine-confermato?lang=${lang}&metodo=bonifico`);
    } catch (error) {
      console.error(error);
      alert(t.errori.generico);
    } finally {
      setIsLoading(false);
    }
  };

  // Render PayPal buttons
  const renderPayPalButtons = useCallback(() => {
    const container = document.getElementById('paypal-button-container');
    if (!window.paypal || !container) return;
    
    // Clear container to prevent duplicates
    container.innerHTML = '';

    window.paypal.Buttons({
      createOrder: (data, actions) => actions.order.create({
        purchase_units: [{ amount: { value: totaleFinale.toFixed(2) } }]
      }),
      onApprove: async (data, actions) => {
        setIsLoading(true);
        try {
          await actions.order.capture();
          const ordine = {
            id: codiceOrdine,
            cliente,
            carrello,
            spedizione,
            pagamento: 'PayPal',
            totale: totaleFinale,
            stato: 'pagato',
            data: new Date().toISOString()
          };

          await supabase.from('ordini').insert([ordine]);
          await aggiornaQuantitaProdotti();

          localStorage.setItem('ordineId', codiceOrdine);
          localStorage.setItem('nomeCliente', cliente.nome);
          localStorage.removeItem('carrello');

          router.push(`/ordine-confermato?lang=${lang}&metodo=paypal`);
        } catch (error) {
          console.error(error);
          alert(t.errori.generico);
        } finally {
          setIsLoading(false);
        }
      }
    }).render('#paypal-button-container');
  }, [totaleFinale, codiceOrdine, cliente, carrello, spedizione, lang, router, t]);

  // Render PayPal buttons when script is loaded
  useEffect(() => {
    if (pagamento === 'paypal' && scriptCaricato) {
      renderPayPalButtons();
    }
  }, [pagamento, scriptCaricato, renderPayPalButtons]);

  // Check if form is valid
  const isFormValido = spedizione && pagamento && (pagamento !== 'bonifico' || accettaCondizioni);

  return (
    <main style={{ backgroundColor: 'black', color: 'white', minHeight: '100vh', padding: '2rem' }}>
      <h1 style={{ textAlign: 'center', marginBottom: '1rem' }}>{t.titolo}</h1>

      {isLoading && (
        <div style={{ textAlign: 'center', margin: '1rem 0' }}>{t.loading}</div>
      )}

      <div style={{ maxWidth: '500px', margin: '0 auto' }}>
        {/* Shipping Section */}
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>{t.spedizione}:</label>
        <select
          value={spedizione}
          onChange={(e) => {
            setSpedizione(e.target.value);
            setCostoSpedizione(e.target.value === 'express' ? 15 : e.target.value === 'standard' ? 5 : 0);
          }}
          style={{ 
            width: '100%', 
            marginBottom: '1rem', 
            padding: '0.5rem', 
            color: 'black',
            fontFamily: 'Arial, sans-serif'
          }}
        >
          <option value="">-- {t.seleziona} --</option>
          <option value="standard">{t.standard}</option>
          <option value="express">{t.express}</option>
          <option value="ritiro">{t.ritiro}</option>
        </select>

        {/* Payment Section */}
        <label style={{ display: 'block', marginBottom: '0.5rem' }}>{t.pagamento}:</label>
        <select
          value={pagamento}
          onChange={(e) => {
            setPagamento(e.target.value);
          }}
          style={{ 
            width: '100%', 
            marginBottom: '1rem', 
            padding: '0.5rem', 
            color: 'black',
            fontFamily: 'Arial, sans-serif'
          }}
        >
          <option value="">-- {t.seleziona} --</option>
          <option value="paypal">{t.paypal}</option>
          <option value="bonifico">{t.bonifico}</option>
          <option value="carta">{t.carta}</option>
        </select>

        {/* Total */}
        <p style={{ fontWeight: 'bold', textAlign: 'center', marginBottom: '1rem', fontFamily: 'Arial, sans-serif' }}>
          {t.totale}: €{totaleFinale.toFixed(2).replace('.', ',')}
        </p>

        {/* Conditional Payment Sections */}
        {pagamento === 'paypal' && (
          <div id="paypal-button-container" style={{ marginTop: '1rem' }}></div>
        )}

        {pagamento === 'bonifico' && (
          <div style={{ marginTop: '1rem', border: '1px solid gray', padding: '1rem', borderRadius: '6px' }}>
            <p>{lang === 'it' ? 'Per completare il pagamento con bonifico, effettua il versamento su:' : 'To complete payment, transfer to:'}</p>
            <p><strong>IBAN:</strong> IT10 Y050 3426 2010 0000 0204 438</p>
            <p><strong>{t.intestatario}</strong></p>
            <p><strong>{t.causale} {codiceOrdine}</strong></p>

            <label style={{ display: 'block', marginTop: '1rem' }}>
              <input
                type="checkbox"
                checked={accettaCondizioni}
                onChange={() => setAccettaCondizioni(!accettaCondizioni)}
                style={{ marginRight: '0.5rem' }}
              />
              {t.condizioni}
            </label>

            <button
              onClick={confermaBonificoEffettuato}
              disabled={!isFormValido || isLoading}
              style={{
                marginTop: '1rem',
                width: '100%',
                padding: '0.75rem',
                backgroundColor: isFormValido ? 'green' : 'gray',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: isFormValido ? 'pointer' : 'not-allowed',
                fontFamily: 'Arial, sans-serif'
              }}
            >
              {t.conferma}
            </button>
          </div>
        )}

        {pagamento === 'carta' && (
          <Elements stripe={stripePromise}>
            <StripePayment 
              totaleFinale={totaleFinale}
              codiceOrdine={codiceOrdine}
              cliente={cliente}
              carrello={carrello}
              spedizione={spedizione}
              lang={lang}
              router={router}
              t={t}
            />
          </Elements>
        )}
      </div>

      <style jsx global>{`
        /* Global styles for Stripe elements */
        .StripeElement {
          padding: 10px;
          margin: 5px 0;
          border: 1px solid #ccc;
          border-radius: 4px;
          background: white;
        }
      `}</style>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/page copy1.js -----
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import FlagLanguageSwitcher from '../components/FlagLanguageSwitcher';
import MobileMenu from '../components/MobileMenu';
import SearchIcon from '../components/SearchIcon';
import TopRightMenu from '../components/TopRightMenu';
import { Instagram } from 'lucide-react';
import { supabase } from './lib/supabaseClient';

export default function Home() {
  const searchParams = useSearchParams();
  const lang = searchParams.get('lang') || 'it';
  const [nomeUtente, setNomeUtente] = useState('');

  useEffect(() => {
    const fetchUtente = async () => {
      setNomeUtente(''); // Reset
      const { data: session } = await supabase.auth.getUser();
      const email = session?.user?.email;
      console.log('Utente loggato:', email);
      if (!email) return;

      const { data: cliente, error } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', email)
        .single();

      if (error) {
        console.error('Errore Supabase:', error);
        return;
      }

      if (cliente?.nome) {
        setNomeUtente(cliente.nome.toUpperCase());
      }
    };

    fetchUtente();
  }, []);

  return (
    <main
      className="min-h-screen w-full bg-cover bg-center bg-no-repeat bg-fixed text-center flex flex-col items-center justify-end px-4 pb-10"
      style={{ backgroundImage: "url('/hero.png')" }}
    >
      {/* TOP BAR */}
      <div className="absolute top-4 w-full px-4 flex justify-between items-center z-50">
        {/* LEFT: 🔍 + ≡ + MENU */}
        <div className="flex items-center gap-2 text-white">
          <SearchIcon lang={lang} />
          <MobileMenu lang={lang} />
          <span className="text-sm uppercase tracking-wider">Menu</span>
        </div>

        {/* RIGHT: TopRightMenu dinamico */}
        <TopRightMenu nomeUtente={nomeUtente} />
      </div>

      {/* LOGO CENTRALE */}
      <div className="absolute top-[20%] z-10 text-white text-center">
        <h1 className="text-5xl font-bold tracking-widest">G-R</h1>
        <h2 className="text-3xl mt-2 font-light tracking-widest">GABRIELLA ROMEO</h2>
      </div>

      {/* BANDIERE + QR */}
      <div className="z-10 mt-auto mb-6">
        <FlagLanguageSwitcher />
        <div className="mt-4">
          <a
            href="https://www.instagram.com/grgabriellaromeo"
            target="_blank"
            rel="noopener noreferrer"
          >
            <img
              src="/qr-instagram.png"
              alt="QR Instagram GR Gabriella Romeo"
              className="w-20 h-20 mx-auto sm:w-24 sm:h-24"
            />
          </a>

          <div className="mt-2 flex items-center justify-center gap-2 text-white text-sm">
            <Instagram size={18} />
            <span>Instagram</span>
          </div>
        </div>
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/page.js -----
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import FlagLanguageSwitcher from '../components/FlagLanguageSwitcher';
import MobileMenu from '../components/MobileMenu';
import SearchIcon from '../components/SearchIcon';
import TopRightMenu from '../components/TopRightMenu';
import { Instagram } from 'lucide-react';
import { supabase } from './lib/supabaseClient';

export default function Home() {
  const searchParams = useSearchParams();
  const lang = searchParams.get('lang') || 'it';
  const [nomeUtente, setNomeUtente] = useState('');

  useEffect(() => {
    const fetchUtente = async () => {
      setNomeUtente(''); // Reset
      const { data: session } = await supabase.auth.getUser();
      const email = session?.user?.email;
      console.log('Utente loggato:', email);
      if (!email) return;

      const { data: cliente, error } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', email)
        .single();

      if (error) {
        console.error('Errore Supabase:', error);
        return;
      }

      if (cliente?.nome) {
        setNomeUtente(cliente.nome.toUpperCase());
      }
    };

    fetchUtente();
  }, []);

  return (
    <main
      className="min-h-screen w-full bg-cover bg-center bg-no-repeat bg-fixed text-center flex flex-col items-center justify-end px-4 pb-10"
      style={{ backgroundImage: "url('/hero.png')" }}
    >
      {/* TOP BAR */}
      <div className="absolute top-4 w-full px-4 flex justify-between items-center z-50">
        {/* LEFT: 🔍 + ≡ + MENU */}
        <div className="flex items-center gap-2 text-white">
          <SearchIcon lang={lang} />
          <MobileMenu lang={lang} />
          <span className="text-sm uppercase tracking-wider">Menu</span>
        </div>

        {/* RIGHT: TopRightMenu dinamico */}
        <TopRightMenu nomeUtente={nomeUtente} />
      </div>

      {/* LOGO CENTRALE */}
      <div className="absolute top-[20%] z-10 text-white text-center">
        <h1 className="text-5xl font-bold tracking-widest">G-R</h1>
        <h2 className="text-3xl mt-2 font-light tracking-widest">GABRIELLA ROMEO</h2>
      </div>

      {/* BANDIERE + QR */}
      <div className="z-10 mt-auto mb-6">
        <FlagLanguageSwitcher />
        <div className="mt-4">
          <a
            href="https://www.instagram.com/grgabriellaromeo"
            target="_blank"
            rel="noopener noreferrer"
          >
            <img
              src="/qr-instagram.png"
              alt="QR Instagram GR Gabriella Romeo"
              className="w-20 h-20 mx-auto sm:w-24 sm:h-24"
            />
          </a>

          <div className="mt-2 flex items-center justify-center gap-2 text-white text-sm">
            <Instagram size={18} />
            <span>Instagram</span>
          </div>
        </div>
      </div>
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pageprotected.js -----
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import FlagLanguageSwitcher from '../components/FlagLanguageSwitcher';
import MobileMenu from '../components/MobileMenu';
import SearchIcon from '../components/SearchIcon';
import TopRightMenu from '../components/TopRightMenu';
import { Instagram } from 'lucide-react';
import { supabase } from './lib/supabaseClient';

// Durata massima sessione (8 ore)
const SESSION_DURATION = 8 * 60 * 60 * 1000;

export default function Home() {
  const searchParams = useSearchParams();
  const lang = searchParams.get('lang') || 'it';
  const [nomeUtente, setNomeUtente] = useState('');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const manageSession = async () => {
      setIsLoading(true);
      
      try {
        // 1. Pulisci dati temporanei mantenendo preferenze
        ['carrello', 'checkout_dati', 'datiTemporaneiCliente'].forEach(
          key => localStorage.removeItem(key)
        );

        // 2. Verifica sessione
        const { data: { session }, error } = await supabase.auth.getSession();
        
        // 3. Se sessione scaduta o invalida, pulisci
        if (error || !session || isSessionExpired(session)) {
          await handleCleanSession();
          return;
        }

        // 4. Aggiorna dati utente se sessione valida
        await updateUserData(session.user.email);
        
      } catch (error) {
        console.error('Errore gestione sessione:', error);
        await handleCleanSession();
      } finally {
        setIsLoading(false);
      }
    };

    manageSession();

    // Listener per cambiamenti di autenticazione
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_OUT') {
          await handleCleanSession();
        } else if (session) {
          await updateUserData(session.user.email);
        }
      }
    );

    return () => subscription?.unsubscribe();
  }, []);

  // Helper functions
  const isSessionExpired = (session) => {
    const lastActivity = localStorage.getItem('lastActivity');
    return lastActivity && Date.now() - lastActivity > SESSION_DURATION;
  };

  const handleCleanSession = async () => {
    await supabase.auth.signOut();
    setNomeUtente('');
  };

  const updateUserData = async (email) => {
    if (!email) return;
    
    const { data: cliente } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .single();

    if (cliente?.nome) {
      setNomeUtente(cliente.nome.toUpperCase());
      localStorage.setItem('lastActivity', Date.now());
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black">
        <div className="text-white">Caricamento...</div>
      </div>
    );
  }

  return (
    <main
      className="min-h-screen w-full bg-cover bg-center bg-no-repeat bg-fixed text-center flex flex-col items-center justify-end px-4 pb-10"
      style={{ backgroundImage: "url('/hero.png')" }}
    >
      {/* TOP BAR */}
      <div className="absolute top-4 w-full px-4 flex justify-between items-center z-50">
        <div className="flex items-center gap-2 text-white">
          <SearchIcon lang={lang} />
          <MobileMenu lang={lang} />
          <span className="text-sm uppercase tracking-wider">Menu</span>
        </div>
        <TopRightMenu nomeUtente={nomeUtente} />
      </div>

      {/* LOGO CENTRALE */}
      <div className="absolute top-[20%] z-10 text-white text-center">
        <h1 className="text-5xl font-bold tracking-widest">G-R</h1>
        <h2 className="text-3xl mt-2 font-light tracking-widest">GABRIELLA ROMEO</h2>
      </div>

      {/* BANDIERE + QR */}
      <div className="z-10 mt-auto mb-6">
        <FlagLanguageSwitcher />
        <div className="mt-4">
          <a href="https://www.instagram.com/grgabriellaromeo" target="_blank" rel="noopener noreferrer">
            <img
              src="/qr-instagram.png"
              alt="QR Instagram GR Gabriella Romeo"
              className="w-20 h-20 mx-auto sm:w-24 sm:h-24"
            />
          </a>
          <div className="mt-2 flex items-center justify-center gap-2 text-white text-sm">
            <Instagram size={18} />
            <span>Instagram</span>
          </div>
        </div>
      </div>
    </main>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/search/page.js -----
'use client';

export default function SearchPage() {
  return (
    <div style={{ color: 'white', textAlign: 'center', marginTop: '5rem' }}>
      <h1>🔍 La funzione di ricerca è in costruzione</h1>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/servizi/page.js -----
export default function ServiziPage() {
    return (
      <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', textAlign: 'center' }}>
        <h1 style={{ fontSize: '2rem' }}>🛠️ Servizi</h1>
        <p>Questa è la pagina dei servizi offerti. In sviluppo.</p>
      </main>
    );
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/zh/page.js -----
'use client';
import Link from 'next/link';
import Image from 'next/image';
import CategoryButtons from '../../components/CategoryButtons';

export default function ChinesePage() {
  return (
    <main style={{ 
      textAlign: 'center', 
      padding: '2rem', 
      backgroundColor: 'black', 
      minHeight: '100vh', 
      color: 'white', 
      position: 'relative' 
    }}>
      
      <div style={{ position: 'fixed', top: '20px', left: '20px', zIndex: 1000 }}>
        <Link href="/" style={{ color: 'white', fontSize: '2rem', textDecoration: 'none' }}>
          ←
        </Link>
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <Image 
          src="/hero.png" 
          alt="G-R Gabriella Romeo Logo" 
          width={800} 
          height={500} 
          priority 
          style={{ margin: 'auto', display: 'block' }}
        />
      </div>

      <div style={{ marginBottom: '2rem' }}>
        <CategoryButtons lang="zh" />
      </div>

    </main>
  );
}


----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/AuthWrapper.js -----
'use client';
import { useEffect } from 'react';
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';
import { protectedRoutes, semiProtectedRoutes } from '../lib/authConfig';

export default function AuthWrapper({ children, authLevel = 'none' }) {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const lang = searchParams.get('lang') || 'it';

  useEffect(() => {
    const checkAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      
      // Pagina protetta - solo utenti loggati
      if (protectedRoutes[pathname] && !session) {
        router.push(`/?lang=${lang}#crea-account`);
        return;
      }

      // Pagine semi-protette (es. checkout)
      if (semiProtectedRoutes[pathname]?.requireAuth && !session) {
        localStorage.setItem('checkout_redirect', pathname);
        router.push(`/?lang=${lang}#crea-account`);
      }
    };

    checkAuth();
  }, [pathname, router, lang]);

  return children;
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtons.js -----
'use client';
import Link from 'next/link';

export default function CategoryButtons({ lang }) {
  const categories = [
    { name: 'Jewelry', path: '/gioielli' },
    { name: 'Fashion Wear', path: '/abbigliamento' },
    { name: 'Accessories', path: '/accessori' },
  ];

  return (
    <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
      {categories.map((category) => (
        <Link
          key={category.name}
          href={`${category.path}?lang=${lang}`}
          className="bg-white text-black font-semibold rounded-xl px-6 py-3 w-full sm:w-auto text-center shadow-md hover:bg-gray-100 transition"
        >
          {category.name}
        </Link>
      ))}
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtons_v0.1.js -----
'use client';
import { useRouter } from 'next/navigation';

export default function CategoryButtons({ lang = 'en' }) {
  const router = useRouter();

  const labels = {
    it: { jewelry: 'Gioielli', fashion: 'Abbigliamento', accessories: 'Accessori' },
    en: { jewelry: 'Jewelry', fashion: 'Fashion Wear', accessories: 'Accessories' },
    fr: { jewelry: 'Bijoux', fashion: 'Vêtements', accessories: 'Accessoires' },
    de: { jewelry: 'Schmuck', fashion: 'Kleidung', accessories: 'Zubehör' },
    es: { jewelry: 'Joyería', fashion: 'Ropa', accessories: 'Accesorios' },
    ar: { jewelry: 'مجوهرات', fashion: 'ملابس', accessories: 'إكسسوارات' },
    zh: { jewelry: '珠宝', fashion: '时装', accessories: '配件' },
    ja: { jewelry: 'ジュエリー', fashion: 'ファッション', accessories: 'アクセサリー' }
  };

  const t = labels[lang] || labels.en;

  return (
    <div style={{
      display: 'flex',
      justifyContent: 'center',
      gap: '1.5rem',
      marginTop: '2rem',
      flexWrap: 'wrap'
    }}>
      <button onClick={() => router.push(`/gioielli?lang=${lang}`)} style={buttonStyle}>
        {t.jewelry}
      </button>
      <button onClick={() => router.push(`/abbigliamento?lang=${lang}`)} style={buttonStyle}>
        {t.fashion}
      </button>
      <button onClick={() => router.push(`/accessori?lang=${lang}`)} style={buttonStyle}>
        {t.accessories}
      </button>
    </div>
  );
}

const buttonStyle = {
  padding: '1rem 2rem',
  fontSize: '1.2rem',
  border: 'none',
  borderRadius: '10px',
  backgroundColor: 'white',
  color: 'black',
  cursor: 'pointer',
  fontWeight: 'bold',
  minWidth: '180px'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtonsxsitogr.js -----
'use client';
import { useRouter } from 'next/navigation';

export default function CategoryButtons({ lang = 'en' }) {
  const router = useRouter();

  const goTo = (path) => router.push(`${path}?lang=${lang}`);

  const labels = {
    en: { jewelry: 'Jewelry', fashion: 'Fashion Wear', accessories: 'Accessories' },
    it: { jewelry: 'Gioielli', fashion: 'Abbigliamento', accessories: 'Accessori' },
    fr: { jewelry: 'Bijoux', fashion: 'Vêtements', accessories: 'Accessoires' },
    de: { jewelry: 'Schmuck', fashion: 'Kleidung', accessories: 'Zubehör' },
    es: { jewelry: 'Joyería', fashion: 'Ropa', accessories: 'Accesorios' },
    ar: { jewelry: 'مجوهرات', fashion: 'ملابس', accessories: 'إكسسوارات' },
    zh: { jewelry: '珠宝', fashion: '时装', accessories: '配件' },
    ja: { jewelry: 'ジュエリー', fashion: 'ファッション', accessories: 'アクセサリー' }
  };

  const t = labels[lang] || labels.en;

  return (
    <div style={{ display: 'flex', justifyContent: 'center', gap: '1.5rem', marginTop: '2rem', flexWrap: 'wrap' }}>
      <button onClick={() => window.location.href = `https://www.g-rgabriellaromeo.it?lang=${lang}`} style={buttonStyle}>{t.jewelry}</button>
      <button onClick={() => goTo('/abbigliamento')} style={buttonStyle}>{t.fashion}</button>
      <button onClick={() => goTo('/accessori')} style={buttonStyle}>{t.accessories}</button>
    </div>
  );
}

const buttonStyle = {
  padding: '1rem 2rem',
  fontSize: '1.2rem',
  border: 'none',
  borderRadius: '10px',
  backgroundColor: 'white',
  color: 'black',
  cursor: 'pointer',
  fontWeight: 'bold',
  minWidth: '180px'
};

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/FlagLanguageSwitcher.js -----
'use client';
import { useRouter, usePathname, useSearchParams } from 'next/navigation';

const languages = [
  { code: 'it', flag: '🇮🇹' },
  { code: 'en', flag: '🇬🇧' },
  { code: 'fr', flag: '🇫🇷' },
  { code: 'de', flag: '🇩🇪' },
  { code: 'es', flag: '🇪🇸' },
  { code: 'ar', flag: '🇸🇦' },
  { code: 'zh', flag: '🇨🇳' },
  { code: 'ja', flag: '🇯🇵' },
];

export default function FlagLanguageSwitcher() {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const currentLang = searchParams.get('lang') || 'it';

  const changeLanguage = (lang) => {
    const params = new URLSearchParams(searchParams.toString());
    params.set('lang', lang);
    router.push(`${pathname}?${params.toString()}`);
  };

  return (
    <div className="flex flex-wrap justify-center items-center gap-2 mt-4">
      {languages.map(({ code, flag }) => (
        <button
          key={code}
          onClick={() => changeLanguage(code)}
          className={`text-xl sm:text-2xl transition transform hover:scale-110 ${
            code === currentLang ? '' : 'opacity-50'
          }`}
        >
          {flag}
        </button>
      ))}
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/FlagLanguageSwitcher_v0.1.js -----
'use client';
import { useRouter } from 'next/navigation';

export default function FlagLanguageSwitcher() {
  const router = useRouter();

  const flags = [
    { code: 'it', emoji: '🇮🇹' },
    { code: 'en', emoji: '🇬🇧' },
    { code: 'fr', emoji: '🇫🇷' },
    { code: 'de', emoji: '🇩🇪' },
    { code: 'es', emoji: '🇪🇸' },
    { code: 'ar', emoji: '🇸🇦' },
    { code: 'zh', emoji: '🇨🇳' },
    { code: 'ja', emoji: '🇯🇵' }
  ];

  return (
    <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'center', gap: '10px' }}>
      {flags.map(({ code, emoji }) => (
        <span
          key={code}
          style={{ fontSize: '2rem', cursor: 'pointer' }}
          onClick={() => router.push(`/?lang=${code}`)}
        >
          {emoji}
        </span>
      ))}
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/LoginSidebar.jsx -----
'use client';

export default function LoginSidebar({ isOpen, onClose }) {
  if (!isOpen) return null;

  return (
    <div className="fixed top-0 right-0 w-80 h-full bg-white text-black shadow-xl z-50 p-4">
      <button onClick={onClose} className="mb-4 text-right">❌ Chiudi</button>
      <h2 className="text-xl font-bold mb-2">Login Sidebar</h2>
      <p>Contenuto da implementare...</p>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/MobileMenu copy2.js -----
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { Menu, X } from 'lucide-react';
import { useSearchParams } from 'next/navigation';

export default function MobileMenu({ lang }) {
  const [isOpen, setIsOpen] = useState(false);
  const translations = {
    home: {
      it: 'Home', en: 'Home', fr: 'Accueil', es: 'Inicio', de: 'Startseite',
      ar: 'الرئيسية', zh: '首页', ja: 'ホーム',
    },
    gioielli: {
      it: 'Gioielli', en: 'Jewelry', fr: 'Bijoux', es: 'Joyería', de: 'Schmuck',
      ar: 'مجوهرات', zh: '珠宝', ja: 'ジュエリー',
    },
    abbigliamento: {
      it: 'Abbigliamento', en: 'Fashion Wear', fr: 'Vêtements', es: 'Ropa', de: 'Kleidung',
      ar: 'ملابس', zh: '服装', ja: 'ファッション',
    },
    accessori: {
      it: 'Accessori', en: 'Accessories', fr: 'Accessoires', es: 'Accesorios', de: 'Accessoires',
      ar: 'إكسسوارات', zh: '配件', ja: 'アクセサリー',
    },
    offerte: {
      it: 'Offerte', en: 'Offers', fr: 'Offres', es: 'Ofertas', de: 'Angebote',
      ar: 'عروض', zh: '优惠', ja: 'オファー',
    },
    servizi: {
      it: 'Servizi', en: 'Services', fr: 'Services', es: 'Servicios', de: 'Dienstleistungen',
      ar: 'خدمات', zh: '服务', ja: 'サービス',
    },
    eventi: {
      it: 'Eventi', en: 'Events', fr: 'Événements', es: 'Eventos', de: 'Veranstaltungen',
      ar: 'فعاليات', zh: '活动', ja: 'イベント',
    },
    brand: {
      it: 'Il Brand', en: 'The Brand', fr: 'La Marque', es: 'La Marca', de: 'Die Marke',
      ar: 'العلامة التجارية', zh: '品牌', ja: 'ブランド',
    },
  };

  const menuItems = [
    { key: 'home', path: '/' },
    { key: 'gioielli', path: '/gioielli' },
    { key: 'abbigliamento', path: '/abbigliamento' },
    { key: 'accessori', path: '/accessori' },
    { key: 'offerte', path: '/offerte' },
    { key: 'servizi', path: '/servizi' },
    { key: 'eventi', path: '/eventi' },
    { key: 'brand', path: '/brand' },
  ];

  return (
    <>
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="bg-transparent text-white"
        >
          <Menu size={20} />
        </button>
      )}

      {isOpen && (
        <div className="absolute top-14 left-0 z-50 bg-white text-black w-64 px-6 py-4 shadow-md">
          <div className="flex justify-between items-center mb-2">
            <span className="font-bold text-sm uppercase">
              {{
                it: 'Navigazione',
                en: 'Navigation',
                fr: 'Navigation',
                es: 'Navegación',
                de: 'Navigation',
                ar: 'التنقل',
                zh: '导航',
                ja: 'ナビゲーション'
              }[lang] || 'Navigazione'}
            </span>
            <button onClick={() => setIsOpen(false)}>
              <X size={20} />
            </button>
          </div>
          <nav className="flex flex-col gap-2">
            {menuItems.map((item, index) => (
              <Link
                key={index}
                href={`${item.path}?lang=${lang}`}
                onClick={() => setIsOpen(false)}
                className="text-sm hover:underline"
              >
                {translations[item.key][lang] || translations[item.key].en}
              </Link>
            ))}
          </nav>
        </div>
      )}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/MobileMenu.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import { Menu, X } from 'lucide-react';
import { useSearchParams } from 'next/navigation';

export default function MobileMenu({ lang }) {
  const [isOpen, setIsOpen] = useState(false);
  const menuRef = useRef();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  const translations = {
    home: {
      it: 'Home', en: 'Home', fr: 'Accueil', es: 'Inicio', de: 'Startseite',
      ar: 'الرئيسية', zh: '首页', ja: 'ホーム',
    },
    gioielli: {
      it: 'Gioielli', en: 'Jewelry', fr: 'Bijoux', es: 'Joyería', de: 'Schmuck',
      ar: 'مجوهرات', zh: '珠宝', ja: 'ジュエリー',
    },
    abbigliamento: {
      it: 'Abbigliamento', en: 'Fashion Wear', fr: 'Vêtements', es: 'Ropa', de: 'Kleidung',
      ar: 'ملابس', zh: '服装', ja: 'ファッション',
    },
    accessori: {
      it: 'Accessori', en: 'Accessories', fr: 'Accessoires', es: 'Accesorios', de: 'Accessoires',
      ar: 'إكسسوارات', zh: '配件', ja: 'アクセサリー',
    },
    offerte: {
      it: 'Offerte', en: 'Offers', fr: 'Offres', es: 'Ofertas', de: 'Angebote',
      ar: 'عروض', zh: '优惠', ja: 'オファー',
    },
    servizi: {
      it: 'Servizi', en: 'Services', fr: 'Services', es: 'Servicios', de: 'Dienstleistungen',
      ar: 'خدمات', zh: '服务', ja: 'サービス',
    },
    eventi: {
      it: 'Eventi', en: 'Events', fr: 'Événements', es: 'Eventos', de: 'Veranstaltungen',
      ar: 'فعاليات', zh: '活动', ja: 'イベント',
    },
    brand: {
      it: 'Il Brand', en: 'The Brand', fr: 'La Marque', es: 'La Marca', de: 'Die Marke',
      ar: 'العلامة التجارية', zh: '品牌', ja: 'ブランド',
    },
  };

  const menuItems = [
    { key: 'home', path: '/' },
    { key: 'gioielli', path: '/gioielli' },
    { key: 'abbigliamento', path: '/abbigliamento' },
    { key: 'accessori', path: '/accessori' },
    { key: 'offerte', path: '/offerte' },
    { key: 'servizi', path: '/servizi' },
    { key: 'eventi', path: '/eventi' },
    { key: 'brand', path: '/brand' },
  ];

  return (
    <div ref={menuRef}>
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="bg-transparent text-white"
        >
          <Menu size={20} />
        </button>
      )}

      {isOpen && (
        <div className="absolute top-14 left-0 z-50 bg-white text-black w-64 px-6 py-4 shadow-md">
          <div className="flex justify-between items-center mb-2">
            <span className="font-bold text-sm uppercase">
              {{
                it: 'Navigazione',
                en: 'Navigation',
                fr: 'Navigation',
                es: 'Navegación',
                de: 'Navigation',
                ar: 'التنقل',
                zh: '导航',
                ja: 'ナビゲーション'
              }[lang] || 'Navigazione'}
            </span>
            <button onClick={() => setIsOpen(false)}>
              <X size={20} />
            </button>
          </div>
          <nav className="flex flex-col gap-2">
            {menuItems.map((item, index) => (
              <Link
                key={index}
                href={`${item.path}?lang=${lang}`}
                onClick={() => setIsOpen(false)}
                className="text-sm hover:underline"
              >
                {translations[item.key][lang] || translations[item.key].en}
              </Link>
            ))}
          </nav>
        </div>
      )}
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/SearchIcon.js -----
'use client';

import { Search } from 'lucide-react';
import { useRouter, useSearchParams } from 'next/navigation';

export default function SearchIcon({ lang }) {
  const router = useRouter();
  const params = useSearchParams();

  const handleClick = () => {
    router.push(`/search?lang=${lang}`);
  };

  return (
    <button onClick={handleClick} className="mr-2 text-white">
      <Search size={22} />
    </button>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu copy3.js -----
'use client';
import { Phone, Heart, ShoppingCart, X } from 'lucide-react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useState, useEffect, useRef } from 'react';
import UserMenu from './UserMenu';

export default function TopRightMenu() {
  const router = useRouter();
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const [showContatti, setShowContatti] = useState(false);
  const contattiRef = useRef();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (contattiRef.current && !contattiRef.current.contains(event.target)) {
        setShowContatti(false);
      }
    };
    if (showContatti) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showContatti]);

  const translations = {
    contatti: {
      it: 'Contatti',
      en: 'Contact',
      fr: 'Contact',
      es: 'Contacto',
      de: 'Kontakt',
      zh: '联系方式',
      ja: '連絡先',
      ar: 'اتصل بنا'
    }
  };

  const closeContatti = () => {
    if (showContatti) setShowContatti(false);
  };

  return (
    <div className="relative z-50 flex items-center gap-4 text-white">
      {/* Contatti */}
      <div className="relative" ref={contattiRef}>
        <button
          title={translations.contatti[lang] || 'Contatti'}
          onClick={() => setShowContatti(!showContatti)}
          className="cursor-pointer"
        >
          <Phone size={22} />
        </button>
        {showContatti && (
          <div className="absolute top-10 right-0 bg-black text-white text-sm p-4 rounded-xl shadow-xl w-64 space-y-2 z-[9999] border border-white">
            <div className="flex justify-between items-center mb-2">
              <span className="font-bold uppercase tracking-wide">
                {translations.contatti[lang] || 'Contatti'}
              </span>
              <button onClick={() => setShowContatti(false)} className="cursor-pointer">
                <X size={16} />
              </button>
            </div>
            <a href="mailto:info@g-rgabriellaromeo.it" className="block hover:underline cursor-pointer">✉️ info@g-rgabriellaromeo.it</a>
            <a href="https://wa.me/393429506938" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">💬 WhatsApp</a>
            <a href="https://www.instagram.com/grgabriellaromeo/" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">📸 Instagram</a>
            <a href="https://www.facebook.com/GRGabriellaRomeoItalianStyle" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">📘 Facebook</a>
          </div>
        )}
      </div>

      {/* Preferiti */}
      <button title="Preferiti" onClick={() => { closeContatti(); router.push('/preferiti'); }} className="cursor-pointer">
        <Heart size={22} />
      </button>

      {/* Carrello */}
      <button title="Carrello" onClick={() => { closeContatti(); router.push('/checkout'); }} className="cursor-pointer">
        <ShoppingCart size={22} />
      </button>

      {/* Login */}
      <div onClick={closeContatti}>
        <UserMenu lang={lang} />
      </div>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu copy4.js -----
'use client';
import { Phone, Heart, ShoppingCart, X } from 'lucide-react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useState, useEffect, useRef } from 'react';
import UserMenu from './UserMenu';

export default function TopRightMenu() {
  const router = useRouter();
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const [showContatti, setShowContatti] = useState(false);
  const contattiRef = useRef();

  // ✅ AZZERA il carrello solo alla prima apertura del browser
  useEffect(() => {
    sessionStorage.removeItem('carrello'); // rimuove eventuali residui
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (contattiRef.current && !contattiRef.current.contains(event.target)) {
        setShowContatti(false);
      }
    };
    if (showContatti) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showContatti]);

  const translations = {
    contatti: {
      it: 'Contatti',
      en: 'Contact',
      fr: 'Contact',
      es: 'Contacto',
      de: 'Kontakt',
      zh: '联系方式',
      ja: '連絡先',
      ar: 'اتصل بنا'
    }
  };

  const closeContatti = () => {
    if (showContatti) setShowContatti(false);
  };

  return (
    <div className="relative z-50 flex items-center gap-4 text-white">
      {/* Contatti */}
      <div className="relative" ref={contattiRef}>
        <button
          title={translations.contatti[lang] || 'Contatti'}
          onClick={() => setShowContatti(!showContatti)}
          className="cursor-pointer"
        >
          <Phone size={22} />
        </button>
        {showContatti && (
          <div className="absolute top-10 right-2 bg-black text-white text-sm p-4 rounded-xl shadow-xl w-40 space-y-2 z-[9999] border border-white">
            <div className="flex justify-between items-center mb-2">
              <span className="font-bold uppercase tracking-wide">
                {translations.contatti[lang] || 'Contatti'}
              </span>
              <button onClick={() => setShowContatti(false)} className="cursor-pointer">
                <X size={16} />
              </button>
            </div>
            <a href="mailto:info@g-rgabriellaromeo.it" className="block hover:underline cursor-pointer">✉️ info@g-rgabriellaromeo.it</a>
            <a href="https://wa.me/393429506938" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">💬 WhatsApp</a>
            <a href="https://www.instagram.com/grgabriellaromeo/" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">📸 Instagram</a>
            <a href="https://www.facebook.com/GRGabriellaRomeoItalianStyle" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">📘 Facebook</a>
          </div>
        )}
      </div>

      {/* Preferiti */}
      <button title="Preferiti" onClick={() => { closeContatti(); router.push('/preferiti'); }} className="cursor-pointer">
        <Heart size={22} />
      </button>

      {/* Carrello */}
      <button title="Carrello" onClick={() => { closeContatti(); router.push('/checkout'); }} className="cursor-pointer">
        <ShoppingCart size={22} />
      </button>

      {/* Login */}
      <div onClick={closeContatti}>
        <UserMenu lang={lang} />
      </div>
    </div>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu.js -----
'use client';
import { Phone, Heart, ShoppingCart, X } from 'lucide-react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useState, useEffect, useRef, useMemo } from 'react';
import UserMenu from './UserMenu';

export default function TopRightMenu() {
  const router = useRouter();
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const [showContatti, setShowContatti] = useState(false);
  const [showWishlistMessage, setShowWishlistMessage] = useState(false);
  const contattiRef = useRef();
  const wishlistModalRef = useRef();

  useEffect(() => {
    sessionStorage.removeItem('carrello');
  }, []);

  // Gestione chiusura modali con ESC
  useEffect(() => {
    const handleEsc = (event) => {
      if (event.key === 'Escape') {
        setShowContatti(false);
        setShowWishlistMessage(false);
      }
    };
    
    window.addEventListener('keydown', handleEsc);
    return () => window.removeEventListener('keydown', handleEsc);
  }, []);

  // Memoize translations for better performance
  const translations = useMemo(() => ({
    contatti: {
      it: 'Contatti',
      en: 'Contact',
      fr: 'Contact',
      es: 'Contacto',
      de: 'Kontakt',
      zh: '联系方式',
      ja: '連絡先',
      ar: 'اتصل بنا'
    },
    wishlistTitle: {
      it: 'Pagina in Sviluppo',
      en: 'Page Under Development',
      fr: 'Page en Développement',
      es: 'Página en Desarrollo',
      de: 'Seite in Entwicklung',
      zh: '页面开发中',
      ja: '開発中のページ',
      ar: 'الصفحة قيد التطوير'
    },
    wishlistMessage: {
      it: 'La pagina della wishlist è attualmente in fase di sviluppo. Tornerà presto disponibile!',
      en: 'The wishlist page is currently under development. It will be available soon!',
      fr: 'La page de la liste de souhaits est en cours de développement. Elle sera bientôt disponible!',
      es: 'La página de la lista de deseos está en desarrollo. ¡Estará disponible pronto!',
      de: 'Die Wunschlistenseite befindet sich derzeit in der Entwicklung. Sie wird bald verfügbar sein!',
      zh: '收藏页面正在开发中，即将上线！',
      ja: 'ウィッシュリストページは現在開発中です。近日中に利用可能になります！',
      ar: 'صفحة قائمة الأمنيات قيد التطوير حالياً. ستكون متاحة قريباً!'
    }
  }), []);

  const closeContatti = () => {
    setShowContatti(false);
  };

  return (
    <div className="relative z-50 flex items-center gap-4 text-white">
      {/* Contatti */}
      <div className="relative" ref={contattiRef}>
        <button
          aria-label={translations.contatti[lang] || 'Contatti'}
          onClick={() => setShowContatti(!showContatti)}
          className="cursor-pointer"
        >
          <Phone size={22} aria-hidden="true" />
        </button>
        {showContatti && (
          <div 
            className="absolute top-10 right-2 bg-gray-900 text-white text-sm p-4 rounded-xl shadow-xl w-48 space-y-2 z-[9999] border border-gray-700"
            role="dialog"
            aria-modal="true"
            aria-labelledby="contact-heading"
          >
            <div className="flex justify-between items-center mb-2">
              <span id="contact-heading" className="font-bold uppercase tracking-wide">
                {translations.contatti[lang] || 'Contatti'}
              </span>
              <button 
                onClick={() => setShowContatti(false)} 
                className="cursor-pointer"
                aria-label="Chiudi"
              >
                <X size={16} aria-hidden="true" />
              </button>
            </div>
            {/* Contact links from original version */}
            <a href="mailto:info@g-rgabriellaromeo.it" className="block hover:underline cursor-pointer">✉️ info@g-rgabriellaromeo.it</a>
            <a href="https://wa.me/393429506938" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">💬 WhatsApp</a>
            <a href="https://www.instagram.com/grgabriellaromeo/" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">📸 Instagram</a>
            <a href="https://www.facebook.com/GRGabriellaRomeoItalianStyle" target="_blank" rel="noopener noreferrer" className="block hover:underline cursor-pointer">📘 Facebook</a>
          </div>
        )}
      </div>

      {/* Preferiti */}
      <button 
        aria-label="Preferiti"
        onClick={() => {
          closeContatti();
          setShowWishlistMessage(true);
        }} 
        className="cursor-pointer"
      >
        <Heart size={22} aria-hidden="true" />
      </button>

      {/* Carrello */}
      <button 
        aria-label="Carrello"
        onClick={() => { 
          closeContatti(); 
          router.push('/checkout'); 
        }} 
        className="cursor-pointer"
      >
        <ShoppingCart size={22} aria-hidden="true" />
      </button>

      {/* Login */}
      <div onClick={closeContatti}>
        <UserMenu lang={lang} />
      </div>

      {/* Wishlist Modal */}
      {showWishlistMessage && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-[10000]"
          onClick={() => setShowWishlistMessage(false)}
          role="dialog"
          aria-modal="true"
          ref={wishlistModalRef}
        >
          <div 
            className="bg-gray-900 text-white p-6 rounded-xl max-w-md w-full mx-4 border border-gray-700 relative"
            onClick={(e) => e.stopPropagation()}
          >
            <button
              className="absolute top-3 right-3 text-white hover:text-gray-300"
              onClick={() => setShowWishlistMessage(false)}
              aria-label="Chiudi"
            >
              <X size={24} aria-hidden="true" />
            </button>
            <h3 className="text-xl font-bold mb-3">
              {translations.wishlistTitle[lang] || 'Page Under Development'}
            </h3>
            <p className="mb-4 text-gray-300">
              {translations.wishlistMessage[lang] || 'The wishlist page is currently under development.'}
            </p>
            <div className="flex justify-center">
              <button
                className="bg-white text-gray-900 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                onClick={() => setShowWishlistMessage(false)}
              >
                OK
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy23.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';

export default function UserMenu({ lang }) {
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);

  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');

  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion avec Google', es: 'Iniciar sesión con Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion avec Apple', es: 'Iniciar sesión con Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? 'Benvenuta' : 'Benvenuto',
      en: () => 'Welcome',
      fr: () => 'Bienvenue',
      es: () => 'Bienvenido',
      de: () => 'Willkommen',
      zh: () => '欢迎',
      ja: () => 'ようこそ',
      ar: () => 'مرحباً'
    },
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente } = await supabase.from('clienti').select('nome').eq('email', email).single();
    if (cliente?.nome) setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => {
      if (data.session) {
        supabase.auth.signOut(); // logout automatico al primo accesso
        setUtente(null);
        setNomeUtente('');
      }
    });

    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  // 🔁 CHIUSURA AUTOMATICA SE CLICCO FUORI
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      fetchNomeUtente(data.user.email);
    }
  };

  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({ provider: 'google' });
    if (!error) {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      registraCliente(data.user.email);
      fetchNomeUtente(data.user.email);
    }
  };

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({ provider: 'apple' });
    if (!error) {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      registraCliente(data.user.email);
      fetchNomeUtente(data.user.email);
    }
  };

  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);

    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      setUtente(sessionData.session.user);
      tracciaAccesso(email);
      registraCliente(email);
      fetchNomeUtente(email);
      setModalitaRegistrazione(false);
      setErrore('');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div ref={menuRef} className="fixed top-0 right-0 w-full sm:w-96 h-full bg-white text-black z-50 p-6 shadow-xl overflow-y-auto">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[lang]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[lang]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[lang]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder="Nome" value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Cognome" value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 1" value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 2" value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Indirizzo" value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Città" value={citta} onChange={(e) => setCitta(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Paese" value={paese} onChange={(e) => setPaese(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[lang] : translations.login[lang]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[lang]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[lang]}
              </button>
              {errore && <p className="text-sm text-red-600">{errore}</p>}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[lang]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[lang](nomeUtente)}, {nomeUtente}</p>
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy24.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';

export default function UserMenu({ lang }) {
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);

  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');

  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion avec Google', es: 'Iniciar sesión con Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion avec Apple', es: 'Iniciar sesión con Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? 'Benvenuta' : 'Benvenuto',
      en: () => 'Welcome',
      fr: () => 'Bienvenue',
      es: () => 'Bienvenido',
      de: () => 'Willkommen',
      zh: () => '欢迎',
      ja: () => 'ようこそ',
      ar: () => 'مرحباً'
    },
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente } = await supabase.from('clienti').select('nome').eq('email', email).single();
    if (cliente?.nome) setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  // 🔁 CHIUSURA AUTOMATICA SE CLICCO FUORI
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data } = await supabase.auth.getSession();
      if (data.session) {
        const user = data.session.user;
        setUtente(user);
        tracciaAccesso(user.email);
        registraCliente(user.email);
        fetchNomeUtente(user.email);
      }
    };
    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      fetchNomeUtente(data.user.email);
    }
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  
  
  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);

    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      setUtente(sessionData.session.user);
      tracciaAccesso(email);
      registraCliente(email);
      fetchNomeUtente(email);
      setModalitaRegistrazione(false);
      setErrore('');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs max-h-[85vh] bg-white text-black z-50 p-4 shadow-xl overflow-y-auto overflow-x-hidden"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[lang]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[lang]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[lang]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder="Nome" value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Cognome" value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 1" value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 2" value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Indirizzo" value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Città" value={citta} onChange={(e) => setCitta(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Paese" value={paese} onChange={(e) => setPaese(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[lang] : translations.login[lang]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[lang]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[lang]}
              </button>
              {errore && <p className="text-sm text-red-600">{errore}</p>}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[lang]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[lang](nomeUtente)}, {nomeUtente}</p>
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy25.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';


export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);

  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion avec Google', es: 'Iniciar sesión con Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion avec Apple', es: 'Iniciar sesión con Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
    
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },

    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? 'Benvenuta' : 'Benvenuto',
      en: () => 'Welcome',
      fr: () => 'Bienvenue',
      es: () => 'Bienvenido',
      de: () => 'Willkommen',
      zh: () => '欢迎',
      ja: () => 'ようこそ',
      ar: () => 'مرحباً'
    },
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente } = await supabase.from('clienti').select('nome').eq('email', email).single();
    if (cliente?.nome) setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  // 🔁 CHIUSURA AUTOMATICA SE CLICCO FUORI
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data } = await supabase.auth.getSession();
      if (data.session) {
        const user = data.session.user;
        setUtente(user);
        tracciaAccesso(user.email);
        registraCliente(user.email);
        fetchNomeUtente(user.email);
      }
    };
    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      fetchNomeUtente(data.user.email);
    }
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  
  
  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);

    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      setUtente(sessionData.session.user);
      tracciaAccesso(email);
      registraCliente(email);
      fetchNomeUtente(email);
      setModalitaRegistrazione(false);
      setErrore('');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs max-h-[85vh] bg-white text-black z-50 p-4 shadow-xl overflow-y-auto overflow-x-hidden"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder="Nome" value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Cognome" value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 1" value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 2" value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Indirizzo" value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white"
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded"
                        />
                      )}

                  <select
                      value={paese}
                      onChange={(e) => setPaese(e.target.value)}
                      className="w-full border border-black px-2 py-1 rounded bg-white"
                    >
                      <option value="">{translations.selectCountry[langPulito]}</option>

                      {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                        <option key={nomePaese} value={nomePaese}>
                          {nomePaese}
                        </option>
                      ))}
                  </select>
                </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[langPulito]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[langPulito]}
              </button>
              {errore && <p className="text-sm text-red-600">{errore}</p>}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[langPulito]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[langPulito](nomeUtente)}, {nomeUtente}</p>
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy26.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';


export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);

  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [citta, setCitta] = useState('');
  const [paese, setPaese] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion avec Google', es: 'Iniciar sesión con Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion avec Apple', es: 'Iniciar sesión con Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
    
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },

    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? 'Benvenuta' : 'Benvenuto',
      en: () => 'Welcome',
      fr: () => 'Bienvenue',
      es: () => 'Bienvenido',
      de: () => 'Willkommen',
      zh: () => '欢迎',
      ja: () => 'ようこそ',
      ar: () => 'مرحباً'
    },
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente } = await supabase.from('clienti').select('nome').eq('email', email).single();
    if (cliente?.nome) setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  // 🔁 CHIUSURA AUTOMATICA SE CLICCO FUORI
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data } = await supabase.auth.getSession();
      if (data.session) {
        const user = data.session.user;
        setUtente(user);
        tracciaAccesso(user.email);
        registraCliente(user.email);
        fetchNomeUtente(user.email);
      }
    };
    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
  };

  const tracciaAccesso = async (email) => {
    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });
  };

  const registraCliente = async (email) => {
    await supabase.from('clienti').insert({
      email,
      nome,
      cognome,
      telefono1,
      telefono2,
      indirizzo,
      citta,
      paese,
      created_at: new Date().toISOString(),
      ordini: []
    });
  };

  const loginEmail = async () => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setErrore(error.message);
    else {
      const { data } = await supabase.auth.getUser();
      setUtente(data.user);
      tracciaAccesso(data.user.email);
      fetchNomeUtente(data.user.email);
    }
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  
  
  const registraUtente = async () => {
    if (!email || !password) return setErrore('Inserisci email e password');
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) return setErrore(error.message);

    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      setUtente(sessionData.session.user);
      tracciaAccesso(email);
      registraCliente(email);
      fetchNomeUtente(email);
      setModalitaRegistrazione(false);
      setErrore('');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs max-h-[85vh] bg-white text-black z-50 p-4 shadow-xl overflow-y-auto overflow-x-hidden"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder="Nome" value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Cognome" value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 1" value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Telefono 2" value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder="Indirizzo" value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <select
                  value={paese}
                  onChange={(e) => setPaese(e.target.value)}
                  className="w-full border border-black px-2 py-1 rounded bg-white"
                >
                  <option value="">{translations.selectCountry[langPulito]}</option>
                  {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                    <option key={nomePaese} value={nomePaese}>
                      {nomePaese}
                    </option>
                  ))}
                </select>

                {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                  <>
                    <select
                      value={cittaSelezionata}
                      onChange={(e) => {
                        const value = e.target.value;
                        setCittaSelezionata(value);
                        if (value !== translations.other[langPulito]) setCitta(value);
                        else setCitta('');
                      }}
                      className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                    >
                      <option value="">{translations.selectCity[langPulito]}</option>
                      {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                        <option key={city} value={city}>{city}</option>
                      ))}
                      <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                    </select>
                    {cittaSelezionata === translations.other[langPulito] && (
                      <input
                        placeholder={translations.enterCity[langPulito]}
                        value={citta}
                        onChange={(e) => setCitta(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded mt-2"
                      />
                    )}
                  </>
                ) : (
                  <input
                    placeholder={translations.enterCity[langPulito]}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    className="w-full border border-black px-2 py-1 rounded mt-2"
                  />
                )}

           </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[langPulito]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[langPulito]}
              </button>
              {errore && <p className="text-sm text-red-600">{errore}</p>}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[langPulito]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[langPulito](nomeUtente)}, {nomeUtente}</p>
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy27.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';


export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion Google', es: 'Iniciar sesión Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion Apple', es: 'Iniciar sesión Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
  
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? 'Benvenuta' : 'Benvenuto',
      en: () => 'Welcome',
      fr: () => 'Bienvenue',
      es: () => 'Bienvenido',
      de: () => 'Willkommen',
      zh: () => '欢迎',
      ja: () => 'ようこそ',
      ar: () => 'مرحباً'
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    }
  };
  
  const fetchNomeUtente = async (email) => {
  const { data: cliente, error } = await supabase
    .from('clienti')
    .select('nome')
    .eq('email', email)
    .maybeSingle();

  if (error || !cliente) {
    console.warn('❌ Nome utente non trovato per', email);
    setNomeUtente('');
    return;
  }

  setNomeUtente(cliente.nome);
};


  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  // 🔁 CHIUSURA AUTOMATICA SE CLICCO FUORI
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(true);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

useEffect(() => {
  const checkLogin = async () => {
    const { data, error } = await supabase.auth.getSession();
    const user = data?.session?.user;

    if (!user || error) return;

    const { data: cliente, error: errCliente } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', user.email)
      .maybeSingle();

    if (errCliente || !cliente) {
      console.warn('⚠️ Cliente non trovato. Logout forzato e ricarico.');

      // 🔁 logout
      await supabase.auth.signOut();

      // 🧹 pulizia dati in cache (locale)
      localStorage.clear();
      sessionStorage.clear();

      // 🔄 ricarica la pagina per azzerare tutto
      window.location.reload();
      return;
    }

    setUtente(user);
    setNomeUtente(cliente.nome);
    tracciaAccesso(user.email);
  };

  checkLogin();
}, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
  };

const tracciaAccesso = async (email) => {
  const accessoTracciato = sessionStorage.getItem('accessoTracciato');
  if (accessoTracciato === email) return; // già registrato per questa sessione

  await supabase.from('user_tracking').insert({
    email,
    language: lang,
    access_time: new Date().toISOString(),
    browser: navigator.userAgent
  });

  sessionStorage.setItem('accessoTracciato', email);
};

const registraCliente = async (email) => {
  const { data: existing, error: existingError } = await supabase
    .from('clienti')
    .select('email')
    .eq('email', email)
    .maybeSingle();

  if (existing || existingError) return;

  const { error } = await supabase.from('clienti').insert({
    email,
    nome,
    cognome,
    paese,
    citta,
    indirizzo,
    cap,
    telefono1,
    telefono2,
    created_at: new Date().toISOString(),
    ordini: []
  });

  if (error) {
    console.error('❌ Errore salvataggio cliente:', error.message);
    setErrore('Errore durante la registrazione del profilo.');
  }
};



const loginEmail = async () => {
  const { data, error } = await supabase.auth.signInWithPassword({ email, password });

  if (error || !data?.user) {
    setErrore(translations.invalidLogin[langPulito]);
    setUtente(null);
    return;
  }

  setUtente(data.user);
  tracciaAccesso(data.user.email);
  fetchNomeUtente(data.user.email);
  setErrore('');
};
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
  
    if (error) setErrore(error.message);
    else alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
  };  
  
const registraUtente = async () => {
  if (!email || !password) return setErrore('Inserisci email e password');

  const { error } = await supabase.auth.signUp({ email, password });
  if (error) {
    setErrore(error.message);
    return;
  }

  const { data: sessionData } = await supabase.auth.getSession();
  if (sessionData.session) {
    setUtente(sessionData.session.user);
    tracciaAccesso(email);

    try {
      const res = await supabase.from('clienti').insert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        ordini: []
      });

      if (res.error) {
        console.error('❌ Errore salvataggio cliente:', res.error.message);
        setErrore('Errore nel salvataggio del profilo.');
        return;
      }

      setNomeUtente(nome);
      setRegistrazioneOk(true); // ✅ Mostra messaggio registrazione riuscita
      setErrore('');
      setModalitaRegistrazione(false);
    } catch (err) {
      console.error('❌ Errore generale registrazione:', err);
      setErrore('Errore nel salvataggio del profilo.');
    }
  }
};

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs max-h-[85vh] bg-white text-black z-50 p-4 shadow-xl overflow-y-auto overflow-x-hidden"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  
                  <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                  <select
                  value={paese}
                  onChange={(e) => setPaese(e.target.value)}
                  className="w-full border border-black px-2 py-1 rounded bg-white"
                >
                  <option value="">{translations.selectCountry[langPulito]}</option>
                  {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                    <option key={nomePaese} value={nomePaese}>
                      {nomePaese}
                    </option>
                  ))}
                </select>

                {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                  <>
                    <select
                      value={cittaSelezionata}
                      onChange={(e) => {
                        const value = e.target.value;
                        setCittaSelezionata(value);
                        if (value !== translations.other[langPulito]) setCitta(value);
                        else setCitta('');
                      }}
                      className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                    >
                      <option value="">{translations.selectCity[langPulito]}</option>
                      {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                        <option key={city} value={city}>{city}</option>
                      ))}
                      <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                    </select>
                    {cittaSelezionata === translations.other[langPulito] && (
                      <input
                        placeholder={translations.enterCity[langPulito]}
                        value={citta}
                        onChange={(e) => setCitta(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded mt-2"
                      />
                    )}
                  </>
                ) : (
                  <input
                    placeholder={translations.enterCity[langPulito]}
                    value={citta}
                    onChange={(e) => setCitta(e.target.value)}
                    className="w-full border border-black px-2 py-1 rounded mt-2"
                  />
                )}

           </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[langPulito]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[langPulito]}
              </button>
              {errore && <p className="text-sm text-red-600">{translations.invalidLogin[langPulito]}</p>}
              {registrazioneOk && (
                <p className="text-sm text-green-600 font-semibold mt-2">
                  🎉 Registrazione completata con successo!
                </p>
              )}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[langPulito]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[langPulito](nomeUtente)}, {nomeUtente}</p>
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy28.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion Google', es: 'Iniciar sesión Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion Apple', es: 'Iniciar sesión Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
  
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    }
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error || !cliente) {
      console.warn('❌ Nome utente non trovato per', email);
      setNomeUtente('');
      return;
    }

    setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data, error } = await supabase.auth.getSession();
      const user = data?.session?.user;

      if (!user || error) return;

      const { data: cliente, error: errCliente } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', user.email)
        .maybeSingle();

      if (errCliente || !cliente) {
        console.warn('⚠️ Cliente non trovato. Logout forzato e ricarico.');
        await supabase.auth.signOut();
        localStorage.clear();
        sessionStorage.clear();
        window.location.reload();
        return;
      }

      setUtente(user);
      setNomeUtente(cliente.nome);
      tracciaAccesso(user.email);
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });

    sessionStorage.setItem('accessoTracciato', email);
  };

  const loginEmail = async () => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });

    if (error || !data?.user) {
      setErrore(translations.invalidLogin[langPulito]);
      setUtente(null);
      return;
    }

    setUtente(data.user);
    tracciaAccesso(data.user.email);
    fetchNomeUtente(data.user.email);
    setErrore('');
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
  
    if (error) setErrore(error.message);
    else alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
  };  
  
  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    const { error: authError } = await supabase.auth.signUp({ email, password });
    if (authError) {
      setErrore(authError.message);
      return;
    }

    const { data: sessionData } = await supabase.auth.getSession();
    if (sessionData.session) {
      setUtente(sessionData.session.user);
      tracciaAccesso(email);

      const { error: dbError } = await supabase.from('clienti').insert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) {
        console.error('❌ Errore salvataggio cliente:', dbError.message);
        setErrore('Errore nel salvataggio del profilo.');
        return;
      }

      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs max-h-[85vh] bg-white text-black z-50 p-4 shadow-xl overflow-y-auto overflow-x-hidden"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  
                  <select
                    value={paese}
                    onChange={(e) => setPaese(e.target.value)}
                    className="w-full border border-black px-2 py-1 rounded bg-white"
                    required
                  >
                    <option value="">{translations.selectCountry[langPulito]}</option>
                    {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                      <option key={nomePaese} value={nomePaese}>
                        {nomePaese}
                      </option>
                    ))}
                  </select>

                  {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                    <>
                      <select
                        value={cittaSelezionata}
                        onChange={(e) => {
                          const value = e.target.value;
                          setCittaSelezionata(value);
                          if (value !== translations.other[langPulito]) setCitta(value);
                          else setCitta('');
                        }}
                        className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                        required
                      >
                        <option value="">{translations.selectCity[langPulito]}</option>
                        {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                          <option key={city} value={city}>{city}</option>
                        ))}
                        <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                      </select>
                      {cittaSelezionata === translations.other[langPulito] && (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
                    </>
                  ) : (
                    <input
                      placeholder={translations.enterCity[langPulito]}
                      value={citta}
                      onChange={(e) => setCitta(e.target.value)}
                      className="w-full border border-black px-2 py-1 rounded mt-2"
                      required
                    />
                  )}

                  <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[langPulito]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[langPulito]}
              </button>
              {errore && <p className="text-sm text-red-600">{errore}</p>}
              {registrazioneOk && (
                <p className="text-sm text-green-600 font-semibold mt-2">
                  🎉 Registrazione completata con successo!
                </p>
              )}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[langPulito]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[langPulito](nomeUtente)}</p>
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy29.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion Google', es: 'Iniciar sesión Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion Apple', es: 'Iniciar sesión Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
  
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error || !cliente) {
      console.warn('❌ Nome utente non trovato per', email);
      setNomeUtente('');
      return;
    }

    setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data, error } = await supabase.auth.getSession();
      const user = data?.session?.user;

      if (!user || error) return;

      const { data: cliente, error: errCliente } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', user.email)
        .maybeSingle();

      if (errCliente || !cliente) {
        console.warn('⚠️ Cliente non trovato. Logout forzato e ricarico.');
        await supabase.auth.signOut();
        localStorage.clear();
        sessionStorage.clear();
        window.location.reload();
        return;
      }

      setUtente(user);
      setNomeUtente(cliente.nome);
      tracciaAccesso(user.email);
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });

    sessionStorage.setItem('accessoTracciato', email);
  };

  const loginEmail = async () => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });

    if (error || !data?.user) {
      setErrore(translations.invalidLogin[langPulito]);
      setUtente(null);
      return;
    }

    setUtente(data.user);
    tracciaAccesso(data.user.email);
    fetchNomeUtente(data.user.email);
    setErrore('');
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
  
    if (error) setErrore(error.message);
    else alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
  };  
  
  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      // Step 1: Registra l'utente in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      // Step 2: Crea il record cliente nel database
      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      // Aggiorna lo stato con i dati dell'utente
      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);

    } catch (error) {
      console.error('Errore durante la registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs max-h-[90vh] bg-white text-black z-50 p-4 shadow-xl overflow-y-auto overflow-x-hidden"
          style={{ minHeight: '500px' }}
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
            <button onClick={() => {
              setIsOpen(false);
              setModalitaRegistrazione(false);
            }}><X size={22} /></button>
          </div>
          {!utente ? (
            <div className="space-y-3">
              <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
              {modalitaRegistrazione && (
                <>
                  <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  
                  <select
                    value={paese}
                    onChange={(e) => setPaese(e.target.value)}
                    className="w-full border border-black px-2 py-1 rounded bg-white"
                    required
                  >
                    <option value="">{translations.selectCountry[langPulito]}</option>
                    {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                      <option key={nomePaese} value={nomePaese}>
                        {nomePaese}
                      </option>
                    ))}
                  </select>

                  {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                    <>
                      <select
                        value={cittaSelezionata}
                        onChange={(e) => {
                          const value = e.target.value;
                          setCittaSelezionata(value);
                          if (value !== translations.other[langPulito]) setCitta(value);
                          else setCitta('');
                        }}
                        className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                        required
                      >
                        <option value="">{translations.selectCity[langPulito]}</option>
                        {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                          <option key={city} value={city}>{city}</option>
                        ))}
                        <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                      </select>
                      {cittaSelezionata === translations.other[langPulito] && (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
                    </>
                  ) : (
                    <input
                      placeholder={translations.enterCity[langPulito]}
                      value={citta}
                      onChange={(e) => setCitta(e.target.value)}
                      className="w-full border border-black px-2 py-1 rounded mt-2"
                      required
                    />
                  )}

                  <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                  <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                </>
              )}
              <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
              </button>
              <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                {translations.googleLogin[langPulito]}
              </button>
              <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                {translations.appleLogin[langPulito]}
              </button>
              {errore && <p className="text-sm text-red-600">{errore}</p>}
              <div className="border-t pt-4 text-sm">
                {!modalitaRegistrazione && (
                  <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                    {translations.create[langPulito]}
                  </button>
                )}
              </div>
            </div>
          ) : (
            <div className="space-y-4 text-sm">
              <p>{translations.welcome[langPulito](nomeUtente)}</p>
              {registrazioneOk && (
                <p className="text-sm text-green-600 font-semibold">
                  🎉 {translations.registrationSuccess[langPulito]}
                </p>
              )}
              <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
            </div>
          )}
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy30.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion Google', es: 'Iniciar sesión Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion Apple', es: 'Iniciar sesión Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
  
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error || !cliente) {
      console.warn('❌ Nome utente non trovato per', email);
      setNomeUtente('');
      return;
    }

    setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data, error } = await supabase.auth.getSession();
      const user = data?.session?.user;

      if (!user || error) return;

      const { data: cliente, error: errCliente } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', user.email)
        .maybeSingle();

      if (errCliente || !cliente) {
        console.warn('⚠️ Cliente non trovato. Logout forzato e ricarico.');
        await supabase.auth.signOut();
        localStorage.clear();
        sessionStorage.clear();
        window.location.reload();
        return;
      }

      setUtente(user);
      setNomeUtente(cliente.nome);
      tracciaAccesso(user.email);
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });

    sessionStorage.setItem('accessoTracciato', email);
  };

  const loginEmail = async () => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });

    if (error || !data?.user) {
      setErrore(translations.invalidLogin[langPulito]);
      setUtente(null);
      return;
    }

    setUtente(data.user);
    tracciaAccesso(data.user.email);
    fetchNomeUtente(data.user.email);
    setErrore('');
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
  
    if (error) setErrore(error.message);
    else alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
  };  
  
  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      // Step 1: Registra l'utente in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      // Step 2: Crea il record cliente nel database
      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      // Aggiorna lo stato con i dati dell'utente
      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);

    } catch (error) {
      console.error('Errore durante la registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            {/* Header */}
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            {/* Contenuto scorrevole */}
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  {modalitaRegistrazione && (
                    <>
                      <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                    </>
                  )}
                  <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                    <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                    {translations.googleLogin[langPulito]}
                  </button>
                  <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                    <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                    {translations.appleLogin[langPulito]}
                  </button>
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione && (
                      <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                        {translations.create[langPulito]}
                      </button>
                    )}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy31.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion Google', es: 'Iniciar sesión Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion Apple', es: 'Iniciar sesión Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
  
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error || !cliente) {
      console.warn('❌ Nome utente non trovato per', email);
      setNomeUtente('');
      return;
    }

    setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data, error } = await supabase.auth.getSession();
      const user = data?.session?.user;

      if (!user || error) return;

      const { data: cliente, error: errCliente } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', user.email)
        .maybeSingle();

      if (errCliente || !cliente) {
        console.warn('⚠️ Cliente non trovato. Logout forzato e ricarico.');
        await supabase.auth.signOut();
        localStorage.clear();
        sessionStorage.clear();
        window.location.reload();
        return;
      }

      setUtente(user);
      setNomeUtente(cliente.nome);
      tracciaAccesso(user.email);
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    await supabase.from('user_tracking').insert({
      email,
      language: lang,
      access_time: new Date().toISOString(),
      browser: navigator.userAgent
    });

    sessionStorage.setItem('accessoTracciato', email);
  };

  const loginEmail = async () => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });

    if (error || !data?.user) {
      setErrore(translations.invalidLogin[langPulito]);
      setUtente(null);
      return;
    }

    setUtente(data.user);
    tracciaAccesso(data.user.email);
    fetchNomeUtente(data.user.email);
    setErrore('');
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
  
    if (error) setErrore(error.message);
    else alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
  };  
  
  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      // Step 1: Registra l'utente in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      // Step 2: Crea il record cliente nel database
      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      // Aggiorna lo stato con i dati dell'utente
      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);

    } catch (error) {
      console.error('Errore durante la registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            {/* Header */}
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            {/* Contenuto scorrevole */}
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  {modalitaRegistrazione && (
                    <>
                      <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                    </>
                  )}
                  <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                    <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                    {translations.googleLogin[langPulito]}
                  </button>
                  <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                    <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                    {translations.appleLogin[langPulito]}
                  </button>
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione && (
                      <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                        {translations.create[langPulito]}
                      </button>
                    )}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy32.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

// Funzione per ottenere l'IP con fallback
const getClientIp = async () => {
  const services = [
    'https://api.ipify.org?format=json',
    'https://ipapi.co/json/',
    'https://ipwho.is/'
  ];

  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout')), 2000)
  );

  for (const service of services) {
    try {
      const response = await Promise.race([
        fetch(service),
        timeoutPromise
      ]);
      
      if (!response.ok) continue;
      
      const data = await response.json();
      return data.ip || data.ip_address;
    } catch (error) {
      console.debug(`Service ${service} failed:`, error);
      continue;
    }
  }
  
  console.warn('All IP services failed');
  return null;
};

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    googleLogin: { it: 'Login con Google', en: 'Login with Google', fr: 'Connexion Google', es: 'Iniciar sesión Google', de: 'Mit Google anmelden', zh: '使用 Google 登录', ja: 'Googleでログイン', ar: 'تسجيل الدخول باستخدام Google' },
    appleLogin: { it: 'Login con Apple', en: 'Login with Apple', fr: 'Connexion Apple', es: 'Iniciar sesión Apple', de: 'Mit Apple anmelden', zh: '使用 Apple 登录', ja: 'Appleでログイン', ar: 'تسجيل الدخول باستخدام Apple' },
  
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  // Funzione di tracking aggiornata con IP
  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    // Avvia il tracking in background
    (async () => {
      try {
        const ipAddress = await getClientIp();
        
        await supabase.from('user_tracking').insert({
          email,
          language: lang,
          access_time: new Date().toISOString(),
          browser: navigator.userAgent,
          ip_address: ipAddress,
          user_agent: navigator.userAgent,
          screen_resolution: `${window.screen.width}x${window.screen.height}`,
          referrer: document.referrer || 'direct'
        });

        sessionStorage.setItem('accessoTracciato', email);
      } catch (error) {
        console.error('Tracking error:', error);
        // Fallback senza IP
        await supabase.from('user_tracking').insert({
          email,
          language: lang,
          access_time: new Date().toISOString(),
          browser: navigator.userAgent,
          ip_address: null,
          error: 'IP lookup failed'
        });
      }
    })();
  };

  const fetchNomeUtente = async (email) => {
    const { data: cliente, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error || !cliente) {
      console.warn('❌ Nome utente non trovato per', email);
      setNomeUtente('');
      return;
    }

    setNomeUtente(cliente.nome);
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      const { data, error } = await supabase.auth.getSession();
      const user = data?.session?.user;

      if (!user || error) return;

      const { data: cliente, error: errCliente } = await supabase
        .from('clienti')
        .select('nome')
        .eq('email', user.email)
        .maybeSingle();

      if (errCliente || !cliente) {
        console.warn('⚠️ Cliente non trovato. Logout forzato e ricarico.');
        await supabase.auth.signOut();
        localStorage.clear();
        sessionStorage.clear();
        window.location.reload();
        return;
      }

      setUtente(user);
      setNomeUtente(cliente.nome);
      tracciaAccesso(user.email);
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const loginEmail = async () => {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });

    if (error || !data?.user) {
      setErrore(translations.invalidLogin[langPulito]);
      setUtente(null);
      return;
    }

    setUtente(data.user);
    tracciaAccesso(data.user.email);
    fetchNomeUtente(data.user.email);
    setErrore('');
  };
  
  const loginGoogle = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const loginApple = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'apple',
      options: {
        redirectTo: `${window.location.origin}/checkout`
      }
    });
    if (error) setErrore(error.message);
  };  

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
  
    if (error) setErrore(error.message);
    else alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
  };  
  
  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      // Step 1: Registra l'utente in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      // Step 2: Crea il record cliente nel database
      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      // Aggiorna lo stato
      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);

    } catch (error) {
      console.error('Errore durante la registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            {/* Header */}
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            {/* Contenuto scorrevole */}
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  {modalitaRegistrazione && (
                    <>
                      <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                    </>
                  )}
                  <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  <button onClick={loginGoogle} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                    <img src="/icons/google.svg" className="w-5 h-5" alt="Google" />
                    {translations.googleLogin[langPulito]}
                  </button>
                  <button onClick={loginApple} className="w-full border border-black py-2 rounded flex items-center justify-center gap-2 text-sm bg-white hover:bg-gray-100 uppercase">
                    <img src="/icons/apple.svg" className="w-5 h-5" alt="Apple" />
                    {translations.appleLogin[langPulito]}
                  </button>
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione && (
                      <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-4 font-semibold">
                        {translations.create[langPulito]}
                      </button>
                    )}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy33.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

const getClientIp = async () => {
  const services = [
    'https://api.ipify.org?format=json',
    'https://ipapi.co/json/',
    'https://ipwho.is/'
  ];

  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout')), 2000)
  );

  for (const service of services) {
    try {
      const response = await Promise.race([
        fetch(service),
        timeoutPromise
      ]);
      
      if (!response.ok) continue;
      
      const data = await response.json();
      return data.ip || data.ip_address;
    } catch (error) {
      console.debug(`Service ${service} failed:`, error);
      continue;
    }
  }
  
  console.warn('All IP services failed');
  return null;
};

const fetchNomeUtente = async (email) => {
  if (!email) return null;

  try {
    const { data, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error?.code === 'PGRST116') return null;
    if (error) throw error;
    
    return data?.nome || null;
  } catch (err) {
    console.error('Errore non critico in fetchNomeUtente:', err);
    return null;
  }
};

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'Login', en: 'Login', fr: 'Connexion', es: 'Iniciar sesión', de: 'Anmelden', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'Crea Account', en: 'Create Account', fr: 'Créer un compte', es: 'Crear cuenta', de: 'Konto erstellen', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    try {
      const ipAddress = await getClientIp();
      
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: ipAddress,
        user_agent: navigator.userAgent,
        screen_resolution: `${window.screen.width}x${window.screen.height}`,
        referrer: document.referrer || 'direct'
      });

      sessionStorage.setItem('accessoTracciato', email);
    } catch (error) {
      console.error('Tracking error:', error);
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: null,
        error: 'IP lookup failed'
      });
    }
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        const user = session?.user;

        if (!user || error) return;

        const nomeCliente = await fetchNomeUtente(user.email);
        
        setUtente(user);
        setNomeUtente(
          nomeCliente || 
          user.user_metadata?.name || 
          user.email.split('@')[0] || 
          'Utente'
        );
        tracciaAccesso(user.email);
      } catch (err) {
        console.error('Errore checkLogin:', err);
      }
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const loginEmail = async () => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error || !data?.user) {
        setErrore(translations.invalidLogin[langPulito]);
        setUtente(null);
        return;
      }

      const nomeCliente = await fetchNomeUtente(data.user.email);
      setUtente(data.user);
      setNomeUtente(nomeCliente || data.user.email.split('@')[0] || 'Utente');
      tracciaAccesso(data.user.email);
      setErrore('');
    } catch (err) {
      console.error('Errore login email:', err);
      setErrore('Si è verificato un errore durante il login');
    }
  };

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });
  
      if (error) {
        setErrore(error.message);
      } else {
        alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
      }
    } catch (err) {
      console.error('Errore recupero password:', err);
      setErrore('Si è verificato un errore durante il recupero password');
    }
  };

  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);
    } catch (error) {
      console.error('Errore registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input type="email" placeholder={translations.email[langPulito]} value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  <input type="password" placeholder={translations.password[langPulito]} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border border-black px-4 py-2 rounded" />
                  {modalitaRegistrazione && (
                    <>
                      <input placeholder={translations.nome[langPulito]} value={nome} onChange={(e) => setNome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cognome[langPulito]} value={cognome} onChange={(e) => setCognome(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input placeholder={translations.indirizzo[langPulito]} value={indirizzo} onChange={(e) => setIndirizzo(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.cap[langPulito]} value={cap} onChange={(e) => setCap(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono1[langPulito]} value={telefono1} onChange={(e) => setTelefono1(e.target.value)} className="w-full border border-black px-2 py-1 rounded" required />
                      <input placeholder={translations.telefono2[langPulito]} value={telefono2} onChange={(e) => setTelefono2(e.target.value)} className="w-full border border-black px-2 py-1 rounded" />
                    </>
                  )}
                  <button onClick={modalitaRegistrazione ? registraUtente : loginEmail} className="w-full bg-black text-white py-2 rounded uppercase">
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione ? (
                      <>
                        <button onClick={() => setModalitaRegistrazione(true)} className="w-full border border-black py-2 rounded uppercase mb-2 font-semibold">
                          {translations.create[langPulito]}
                        </button>
                        <button onClick={passwordDimenticata} className="text-blue-600 text-xs">
                          Password dimenticata?
                        </button>
                      </>
                    ) : null}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button onClick={logout} className="w-full bg-gray-700 text-white py-2 rounded uppercase">Logout</button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy34.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

const getClientIp = async () => {
  const services = [
    'https://api.ipify.org?format=json',
    'https://ipapi.co/json/',
    'https://ipwho.is/'
  ];

  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout')), 2000)
  );

  for (const service of services) {
    try {
      const response = await Promise.race([
        fetch(service),
        timeoutPromise
      ]);
      
      if (!response.ok) continue;
      
      const data = await response.json();
      return data.ip || data.ip_address;
    } catch (error) {
      console.debug(`Service ${service} failed:`, error);
      continue;
    }
  }
  
  console.warn('All IP services failed');
  return null;
};

const fetchNomeUtente = async (email) => {
  if (!email) return null;

  try {
    const { data, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error?.code === 'PGRST116') return null;
    if (error) throw error;
    
    return data?.nome || null;
  } catch (err) {
    console.error('Errore non critico in fetchNomeUtente:', err);
    return null;
  }
};

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'LOGIN', en: 'LOGIN', fr: 'CONNEXION', es: 'INICIAR SESIÓN', de: 'ANMELDEN', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'CREA ACCOUNT', en: 'CREATE ACCOUNT', fr: 'CRÉER UN COMPTE', es: 'CREAR CUENTA', de: 'KONTO ERSTELLEN', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    forgotPassword: {
      it: 'Password dimenticata?',
      en: 'Forgot password?',
      fr: 'Mot de passe oublié?',
      es: '¿Olvidaste tu contraseña?',
      de: 'Passwort vergessen?',
      zh: '忘记密码？',
      ja: 'パスワードをお忘れですか？',
      ar: 'نسيت كلمة المرور؟'
    },
    registerBenefits: {
      it: [
        'Per aggiungere i tuoi prodotti alla lista dei desideri',
        'Per un checkout più veloce',
        'Ottieni uno sconto del 5% sul tuo prossimo acquisto',
        'Unisciti al nostro referral program per sconti e buoni acquisto'
      ],
      en: [
        'To add products to your wishlist',
        'For faster checkout',
        'Get 5% discount on your next purchase',
        'Join our referral program for discounts and vouchers'
      ],
      fr: [
        'Pour ajouter des produits à votre liste de souhaits',
        'Pour un paiement plus rapide',
        'Bénéficiez de 5% de réduction sur votre prochain achat',
        'Rejoignez notre programme de parrainage pour des réductions et des bons d\'achat'
      ],
      es: [
        'Para añadir productos a tu lista de deseos',
        'Para un pago más rápido',
        'Obtén un 5% de descuento en tu próxima compra',
        'Únete a nuestro programa de referidos para descuentos y vales de compra'
      ],
      de: [
        'Um Produkte zu Ihrer Wunschliste hinzuzufügen',
        'Für einen schnelleren Checkout',
        'Erhalten Sie 5% Rabatt auf Ihren nächsten Einkauf',
        'Nehmen Sie an unserem Empfehlungsprogramm für Rabatte und Gutscheine teil'
      ],
      ar: [
        'إضافة منتجاتك إلى قائمة الرغبات',
        'إتمام عملية الدفع بسرعة أكبر',
        'احصل على خصم 5% على مشترياتك القادمة',
        'انضم إلى برنامج الإحالة للحصول على خصومات وكوبونات شراء'
      ],
      zh: [
        '将商品添加到您的愿望清单',
        '更快捷的结账体验',
        '下次购物享受5%折扣',
        '加入我们的推荐计划获取折扣和购物券'
      ],
      ja: [
        '商品をウィッシュリストに追加',
        'より速いチェックアウト',
        '次回のお買い物で5％オフ',
        '紹介プログラムに参加して割引やクーポンをゲット'
      ]
    },
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    try {
      const ipAddress = await getClientIp();
      
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: ipAddress,
        user_agent: navigator.userAgent,
        screen_resolution: `${window.screen.width}x${window.screen.height}`,
        referrer: document.referrer || 'direct'
      });

      sessionStorage.setItem('accessoTracciato', email);
    } catch (error) {
      console.error('Tracking error:', error);
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: null,
        error: 'IP lookup failed'
      });
    }
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        const user = session?.user;

        if (!user || error) return;

        const nomeCliente = await fetchNomeUtente(user.email);
        
        setUtente(user);
        setNomeUtente(
          nomeCliente || 
          user.user_metadata?.name || 
          user.email.split('@')[0] || 
          'Utente'
        );
        tracciaAccesso(user.email);
      } catch (err) {
        console.error('Errore checkLogin:', err);
      }
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const loginEmail = async () => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error || !data?.user) {
        setErrore(translations.invalidLogin[langPulito]);
        setUtente(null);
        return;
      }

      const nomeCliente = await fetchNomeUtente(data.user.email);
      setUtente(data.user);
      setNomeUtente(nomeCliente || data.user.email.split('@')[0] || 'Utente');
      tracciaAccesso(data.user.email);
      setErrore('');
    } catch (err) {
      console.error('Errore login email:', err);
      setErrore('Si è verificato un errore durante il login');
    }
  };

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });
  
      if (error) {
        setErrore(error.message);
      } else {
        alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
      }
    } catch (err) {
      console.error('Errore recupero password:', err);
      setErrore('Si è verificato un errore durante il recupero password');
    }
  };

  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);
    } catch (error) {
      console.error('Errore registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input 
                    type="email" 
                    placeholder={translations.email[langPulito]} 
                    value={email} 
                    onChange={(e) => setEmail(e.target.value)} 
                    className="w-full border border-black px-4 py-2 rounded" 
                  />
                  <input 
                    type="password" 
                    placeholder={translations.password[langPulito]} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    className="w-full border border-black px-4 py-2 rounded" 
                  />
                  
                  <button 
                    onClick={modalitaRegistrazione ? registraUtente : loginEmail} 
                    className="w-full bg-black text-white py-2 rounded uppercase"
                  >
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  
                  {!modalitaRegistrazione && (
                    <button 
                      onClick={passwordDimenticata} 
                      className="text-blue-600 text-xs w-full text-left"
                    >
                      {translations.forgotPassword[langPulito]}
                    </button>
                  )}
                  
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  
                  {modalitaRegistrazione && (
                    <>
                      <input 
                        placeholder={translations.nome[langPulito]} 
                        value={nome} 
                        onChange={(e) => setNome(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.cognome[langPulito]} 
                        value={cognome} 
                        onChange={(e) => setCognome(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input 
                        placeholder={translations.indirizzo[langPulito]} 
                        value={indirizzo} 
                        onChange={(e) => setIndirizzo(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.cap[langPulito]} 
                        value={cap} 
                        onChange={(e) => setCap(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.telefono1[langPulito]} 
                        value={telefono1} 
                        onChange={(e) => setTelefono1(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.telefono2[langPulito]} 
                        value={telefono2} 
                        onChange={(e) => setTelefono2(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                      />
                    </>
                  )}
                  
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione ? (
                      <>
                        <button 
                          onClick={() => setModalitaRegistrazione(true)} 
                          className="w-full border border-black py-2 rounded uppercase mb-2 font-semibold"
                        >
                          {translations.create[langPulito]}
                        </button>
                        <div className="text-xs text-gray-600 space-y-1 mt-2">
                          {translations.registerBenefits[langPulito].map((benefit, index) => (
                            <div key={index} className="flex items-start">
                              {['it', 'en', 'fr', 'es', 'de'].includes(langPulito) && (
                                <span className="mr-2">-</span>
                              )}
                              <span 
                                className={`
                                  ${langPulito === 'ar' ? 'text-right' : 'text-left'}
                                  ${['zh', 'ja'].includes(langPulito) ? 'ml-4' : ''}
                                  whitespace-pre-wrap
                                `}
                              >
                                {benefit}
                              </span>
                            </div>
                          ))}
                        </div>
                      </>
                    ) : null}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button 
                    onClick={logout} 
                    className="w-full bg-gray-700 text-white py-2 rounded uppercase"
                  >
                    Logout
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy35.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

const getClientIp = async () => {
  const services = [
    'https://api.ipify.org?format=json',
    'https://ipapi.co/json/',
    'https://ipwho.is/'
  ];

  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout')), 2000)
  );

  for (const service of services) {
    try {
      const response = await Promise.race([
        fetch(service),
        timeoutPromise
      ]);
      
      if (!response.ok) continue;
      
      const data = await response.json();
      return data.ip || data.ip_address;
    } catch (error) {
      console.debug(`Service ${service} failed:`, error);
      continue;
    }
  }
  
  console.warn('All IP services failed');
  return null;
};

const fetchNomeUtente = async (email) => {
  if (!email) return null;

  try {
    const { data, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error?.code === 'PGRST116') return null;
    if (error) throw error;
    
    return data?.nome || null;
  } catch (err) {
    console.error('Errore non critico in fetchNomeUtente:', err);
    return null;
  }
};

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'LOGIN', en: 'LOGIN', fr: 'CONNEXION', es: 'INICIAR SESIÓN', de: 'ANMELDEN', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'CREA ACCOUNT', en: 'CREATE ACCOUNT', fr: 'CRÉER UN COMPTE', es: 'CREAR CUENTA', de: 'KONTO ERSTELLEN', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    forgotPassword: {
      it: 'Password dimenticata?',
      en: 'Forgot password?',
      fr: 'Mot de passe oublié?',
      es: '¿Olvidaste tu contraseña?',
      de: 'Passwort vergessen?',
      zh: '忘记密码？',
      ja: 'パスワードをお忘れですか？',
      ar: 'نسيت كلمة المرور؟'
    },
    registerBenefits: {
      it: [
        'Per aggiungere i tuoi prodotti alla lista dei desideri',
        'Per un checkout più veloce',
        'Ottieni uno sconto del 5% sul tuo prossimo acquisto',
        'Unisciti al nostro referral program per sconti e buoni acquisto'
      ],
      en: [
        'To add products to your wishlist',
        'For faster checkout',
        'Get 5% discount on your next purchase',
        'Join our referral program for discounts and vouchers'
      ],
      fr: [
        'Pour ajouter des produits à votre liste de souhaits',
        'Pour un paiement plus rapide',
        'Bénéficiez de 5% de réduction sur votre prochain achat',
        'Rejoignez notre programme de parrainage pour des réductions et des bons d\'achat'
      ],
      es: [
        'Para añadir productos a tu lista de deseos',
        'Para un pago más rápido',
        'Obtén un 5% de descuento en tu próxima compra',
        'Únete a nuestro programa de referidos para descuentos y vales de compra'
      ],
      de: [
        'Um Produkte zu Ihrer Wunschliste hinzuzufügen',
        'Für einen schnelleren Checkout',
        'Erhalten Sie 5% Rabatt auf Ihren nächsten Einkauf',
        'Nehmen Sie an unserem Empfehlungsprogramm für Rabatte und Gutscheine teil'
      ],
      ar: [
        'إضافة منتجاتك إلى قائمة الرغبات',
        'إتمام عملية الدفع بسرعة أكبر',
        'احصل على خصم 5% على مشترياتك القادمة',
        'انضم إلى برنامج الإحالة للحصول على خصومات وكوبونات شراء'
      ],
      zh: [
        '将商品添加到您的愿望清单',
        '更快捷的结账体验',
        '下次购物享受5%折扣',
        '加入我们的推荐计划获取折扣和购物券'
      ],
      ja: [
        '商品をウィッシュリストに追加',
        'より速いチェックアウト',
        '次回のお買い物で5％オフ',
        '紹介プログラムに参加して割引やクーポンをゲット'
      ]
    },
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    try {
      const ipAddress = await getClientIp();
      
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: ipAddress,
        user_agent: navigator.userAgent,
        screen_resolution: `${window.screen.width}x${window.screen.height}`,
        referrer: document.referrer || 'direct'
      });

      sessionStorage.setItem('accessoTracciato', email);
    } catch (error) {
      console.error('Tracking error:', error);
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: null,
        error: 'IP lookup failed'
      });
    }
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        const user = session?.user;

        if (!user || error) return;

        const nomeCliente = await fetchNomeUtente(user.email);
        
        setUtente(user);
        setNomeUtente(
          nomeCliente || 
          user.user_metadata?.name || 
          user.email.split('@')[0] || 
          'Utente'
        );
        tracciaAccesso(user.email);
      } catch (err) {
        console.error('Errore checkLogin:', err);
      }
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const loginEmail = async () => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error || !data?.user) {
        setErrore(translations.invalidLogin[langPulito]);
        setUtente(null);
        return;
      }

      const nomeCliente = await fetchNomeUtente(data.user.email);
      setUtente(data.user);
      setNomeUtente(nomeCliente || data.user.email.split('@')[0] || 'Utente');
      tracciaAccesso(data.user.email);
      setErrore('');
      sessionStorage.setItem('checkout_redirect', 'true');
    } catch (err) {
      console.error('Errore login email:', err);
      setErrore('Si è verificato un errore durante il login');
    }
  };

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });
  
      if (error) {
        setErrore(error.message);
      } else {
        alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
      }
    } catch (err) {
      console.error('Errore recupero password:', err);
      setErrore('Si è verificato un errore durante il recupero password');
    }
  };

  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);
      sessionStorage.setItem('checkout_redirect', 'true');
    } catch (error) {
      console.error('Errore registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input 
                    type="email" 
                    placeholder={translations.email[langPulito]} 
                    value={email} 
                    onChange={(e) => setEmail(e.target.value)} 
                    className="w-full border border-black px-4 py-2 rounded" 
                  />
                  <input 
                    type="password" 
                    placeholder={translations.password[langPulito]} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    className="w-full border border-black px-4 py-2 rounded" 
                  />
                  
                  <button 
                    onClick={modalitaRegistrazione ? registraUtente : loginEmail} 
                    className="w-full bg-black text-white py-2 rounded uppercase"
                  >
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  
                  {!modalitaRegistrazione && (
                    <button 
                      onClick={passwordDimenticata} 
                      className="text-blue-600 text-xs w-full text-left"
                    >
                      {translations.forgotPassword[langPulito]}
                    </button>
                  )}
                  
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  
                  {modalitaRegistrazione && (
                    <>
                      <input 
                        placeholder={translations.nome[langPulito]} 
                        value={nome} 
                        onChange={(e) => setNome(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.cognome[langPulito]} 
                        value={cognome} 
                        onChange={(e) => setCognome(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input 
                        placeholder={translations.indirizzo[langPulito]} 
                        value={indirizzo} 
                        onChange={(e) => setIndirizzo(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.cap[langPulito]} 
                        value={cap} 
                        onChange={(e) => setCap(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.telefono1[langPulito]} 
                        value={telefono1} 
                        onChange={(e) => setTelefono1(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.telefono2[langPulito]} 
                        value={telefono2} 
                        onChange={(e) => setTelefono2(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                      />
                    </>
                  )}
                  
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione ? (
                      <>
                        <button 
                          onClick={() => setModalitaRegistrazione(true)} 
                          className="w-full border border-black py-2 rounded uppercase mb-2 font-semibold"
                        >
                          {translations.create[langPulito]}
                        </button>
                        <div className="text-xs text-gray-600 space-y-1 mt-2">
                          {translations.registerBenefits[langPulito].map((benefit, index) => (
                            <div key={index} className="flex items-start">
                              {['it', 'en', 'fr', 'es', 'de'].includes(langPulito) && (
                                <span className="mr-2">-</span>
                              )}
                              <span 
                                className={`
                                  ${langPulito === 'ar' ? 'text-right' : 'text-left'}
                                  ${['zh', 'ja'].includes(langPulito) ? 'ml-4' : ''}
                                  whitespace-pre-wrap
                                `}
                              >
                                {benefit}
                              </span>
                            </div>
                          ))}
                        </div>
                      </>
                    ) : null}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button 
                    onClick={logout} 
                    className="w-full bg-gray-700 text-white py-2 rounded uppercase"
                  >
                    Logout
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';

const getClientIp = async () => {
  const services = [
    'https://api.ipify.org?format=json',
    'https://ipapi.co/json/',
    'https://ipwho.is/'
  ];

  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout')), 2000)
  );

  for (const service of services) {
    try {
      const response = await Promise.race([
        fetch(service),
        timeoutPromise
      ]);
      
      if (!response.ok) continue;
      
      const data = await response.json();
      return data.ip || data.ip_address;
    } catch (error) {
      console.debug(`Service ${service} failed:`, error);
      continue;
    }
  }
  
  console.warn('All IP services failed');
  return null;
};

const fetchNomeUtente = async (email) => {
  if (!email) return null;

  try {
    const { data, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error?.code === 'PGRST116') return null;
    if (error) throw error;
    
    return data?.nome || null;
  } catch (err) {
    console.error('Errore non critico in fetchNomeUtente:', err);
    return null;
  }
};

export default function UserMenu({ lang }) {
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const menuRef = useRef();

  const translations = {
    login: { it: 'LOGIN', en: 'LOGIN', fr: 'CONNEXION', es: 'INICIAR SESIÓN', de: 'ANMELDEN', zh: '登录', ja: 'ログイン', ar: 'تسجيل الدخول' },
    email: { it: 'Email', en: 'Email', fr: 'E-mail', es: 'Correo electrónico', de: 'E-Mail', zh: '电子邮件', ja: 'メール', ar: 'البريد الإلكتروني' },
    password: { it: 'Password', en: 'Password', fr: 'Mot de passe', es: 'Contraseña', de: 'Passwort', zh: '密码', ja: 'パスワード', ar: 'كلمة المرور' },
    create: { it: 'CREA ACCOUNT', en: 'CREATE ACCOUNT', fr: 'CRÉER UN COMPTE', es: 'CREAR CUENTA', de: 'KONTO ERSTELLEN', zh: '创建账户', ja: 'アカウント作成', ar: 'إنشاء حساب' },
    register: { it: 'Registrati', en: 'Register', fr: 'S’inscrire', es: 'Registrarse', de: 'Registrieren', zh: '注册', ja: '登録', ar: 'تسجيل' },
    forgotPassword: {
      it: 'Password dimenticata?',
      en: 'Forgot password?',
      fr: 'Mot de passe oublié?',
      es: '¿Olvidaste tu contraseña?',
      de: 'Passwort vergessen?',
      zh: '忘记密码？',
      ja: 'パスワードをお忘れですか？',
      ar: 'نسيت كلمة المرور؟'
    },
    registerBenefits: {
      it: [
        'Per aggiungere i tuoi prodotti alla lista dei desideri',
        'Per un checkout più veloce',
        'Ottieni uno sconto del 5% sul tuo prossimo acquisto',
        'Unisciti al nostro referral program per sconti e buoni acquisto'
      ],
      en: [
        'To add products to your wishlist',
        'For faster checkout',
        'Get 5% discount on your next purchase',
        'Join our referral program for discounts and vouchers'
      ],
      fr: [
        'Pour ajouter des produits à votre liste de souhaits',
        'Pour un paiement plus rapide',
        'Bénéficiez de 5% de réduction sur votre prochain achat',
        'Rejoignez notre programme de parrainage pour des réductions et des bons d\'achat'
      ],
      es: [
        'Para añadir productos a tu lista de deseos',
        'Para un pago más rápido',
        'Obtén un 5% de descuento en tu próxima compra',
        'Únete a nuestro programa de referidos para descuentos y vales de compra'
      ],
      de: [
        'Um Produkte zu Ihrer Wunschliste hinzuzufügen',
        'Für einen schnelleren Checkout',
        'Erhalten Sie 5% Rabatt auf Ihren nächsten Einkauf',
        'Nehmen Sie an unserem Empfehlungsprogramm für Rabatte und Gutscheine teil'
      ],
      ar: [
        'إضافة منتجاتك إلى قائمة الرغبات',
        'إتمام عملية الدفع بسرعة أكبر',
        'احصل على خصم 5% على مشترياتك القادمة',
        'انضم إلى برنامج الإحالة للحصول على خصومات وكوبونات شراء'
      ],
      zh: [
        '将商品添加到您的愿望清单',
        '更快捷的结账体验',
        '下次购物享受5%折扣',
        '加入我们的推荐计划获取折扣和购物券'
      ],
      ja: [
        '商品をウィッシュリストに追加',
        'より速いチェックアウト',
        '次回のお買い物で5％オフ',
        '紹介プログラムに参加して割引やクーポンをゲット'
      ]
    },
    nome: {
      it: 'Nome', en: 'First Name', fr: 'Prénom', de: 'Vorname', es: 'Nombre',
      ar: 'الاسم', zh: '名字', ja: '名'
    },
    cognome: {
      it: 'Cognome', en: 'Last Name', fr: 'Nom', de: 'Nachname', es: 'Apellido',
      ar: 'الكنية', zh: '姓', ja: '姓'
    },
    telefono1: {
      it: 'Telefono 1', en: 'Phone 1', fr: 'Téléphone 1', de: 'Telefon 1', es: 'Teléfono 1',
      ar: 'الهاتف 1', zh: '电话 1', ja: '電話 1'
    },
    telefono2: {
      it: 'Telefono 2', en: 'Phone 2', fr: 'Téléphone 2', de: 'Telefon 2', es: 'Teléfono 2',
      ar: 'الهاتف 2', zh: '电话 2', ja: '電話 2'
    },
    indirizzo: {
      it: 'Indirizzo', en: 'Address', fr: 'Adresse', de: 'Adresse', es: 'Dirección',
      ar: 'العنوان', zh: '地址', ja: '住所'
    },
    cap: {
      it: 'CAP', en: 'Postal Code', fr: 'Code postal', de: 'Postleitzahl', es: 'Código Postal',
      ar: 'الرمز البريدي', zh: '邮政编码', ja: '郵便番号'
    },
    paese: {
      it: 'Paese', en: 'Country', fr: 'Pays', de: 'Land', es: 'País',
      ar: 'البلد', zh: '国家', ja: '国'
    },
    citta: {
      it: 'Città', en: 'City', fr: 'Ville', de: 'Stadt', es: 'Ciudad',
      ar: 'المدينة', zh: '城市', ja: '都市'
    },
    selectCountry: {
      it: 'Seleziona un paese',
      en: 'Select a country',
      fr: 'Sélectionner un pays',
      de: 'Land auswählen',
      es: 'Selecciona un país',
      ar: 'اختر بلداً',
      zh: '选择国家',
      ja: '国を選択'
    },
    selectCity: {
      it: 'Seleziona una città',
      en: 'Select a city',
      fr: 'Sélectionner une ville',
      de: 'Stadt auswählen',
      es: 'Selecciona una ciudad',
      ar: 'اختر مدينة',
      zh: '选择城市',
      ja: '都市を選択'
    },
    enterCity: {
      it: 'Inserisci la tua città',
      en: 'Enter your city',
      fr: 'Entrez votre ville',
      de: 'Geben Sie Ihre Stadt ein',
      es: 'Ingrese su ciudad',
      ar: 'أدخل مدينتك',
      zh: '输入你的城市',
      ja: 'あなたの都市を入力してください'
    },
    other: {
      it: 'Altro',
      en: 'Other',
      fr: 'Autre',
      de: 'Andere',
      es: 'Otro',
      ar: 'أخرى',
      zh: '其他',
      ja: 'その他'
    },
    welcome: {
      it: (nome) => nome?.trim().toLowerCase().endsWith('a') ? `Benvenuta ${nome}` : `Benvenuto ${nome}`,
      en: (nome) => `Welcome ${nome}`,
      fr: (nome) => `Bienvenue ${nome}`,
      es: (nome) => `Bienvenido ${nome}`,
      de: (nome) => `Willkommen ${nome}`,
      zh: (nome) => `欢迎 ${nome}`,
      ja: (nome) => `ようこそ ${nome}`,
      ar: (nome) => `مرحباً ${nome}`
    },
    invalidLogin: {
      it: 'Credenziali non valide',
      en: 'Invalid login credentials',
      fr: 'Identifiants invalides',
      de: 'Ungültige Anmeldedaten',
      es: 'Credenciales inválidas',
      ar: 'بيانات تسجيل الدخول غير صالحة',
      zh: '无效的登录凭据',
      ja: '無効なログイン情報'
    },
    requiredField: {
      it: 'Campo obbligatorio',
      en: 'Required field',
      fr: 'Champ obligatoire',
      de: 'Pflichtfeld',
      es: 'Campo obligatorio',
      ar: 'حقل مطلوب',
      zh: '必填字段',
      ja: '必須項目'
    },
    registrationSuccess: {
      it: 'Registrazione completata con successo!',
      en: 'Registration completed successfully!',
      fr: 'Inscription réussie!',
      de: 'Registrierung erfolgreich abgeschlossen!',
      es: '¡Registro completado con éxito!',
      ar: 'تم التسجيل بنجاح!',
      zh: '注册成功完成！',
      ja: '登録が完了しました！'
    }
  };

  const tracciaAccesso = async (email) => {
    const accessoTracciato = sessionStorage.getItem('accessoTracciato');
    if (accessoTracciato === email) return;

    try {
      const ipAddress = await getClientIp();
      
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: ipAddress,
        user_agent: navigator.userAgent,
        screen_resolution: `${window.screen.width}x${window.screen.height}`,
        referrer: document.referrer || 'direct'
      });

      sessionStorage.setItem('accessoTracciato', email);
    } catch (error) {
      console.error('Tracking error:', error);
      await supabase.from('user_tracking').insert({
        email,
        language: lang,
        access_time: new Date().toISOString(),
        browser: navigator.userAgent,
        ip_address: null,
        error: 'IP lookup failed'
      });
    }
  };

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        const user = session?.user;

        if (!user || error) return;

        const nomeCliente = await fetchNomeUtente(user.email);
        
        setUtente(user);
        setNomeUtente(
          nomeCliente || 
          user.user_metadata?.name || 
          user.email.split('@')[0] || 
          'Utente'
        );
        tracciaAccesso(user.email);
      } catch (err) {
        console.error('Errore checkLogin:', err);
      }
    };

    checkLogin();
  }, []);

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
  };

  const loginEmail = async () => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error || !data?.user) {
        setErrore(translations.invalidLogin[langPulito]);
        setUtente(null);
        return;
      }

      const nomeCliente = await fetchNomeUtente(data.user.email);
      setUtente(data.user);
      setNomeUtente(nomeCliente || data.user.email.split('@')[0] || 'Utente');
      tracciaAccesso(data.user.email);
      setErrore('');
      sessionStorage.setItem('checkout_redirect', 'true');
    } catch (err) {
      console.error('Errore login email:', err);
      setErrore('Si è verificato un errore durante il login');
    }
  };

  const passwordDimenticata = async () => {
    if (!email) {
      setErrore('Inserisci la tua email');
      return;
    }
  
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`
      });
  
      if (error) {
        setErrore(error.message);
      } else {
        alert('📩 Ti abbiamo inviato una email per reimpostare la password.');
      }
    } catch (err) {
      console.error('Errore recupero password:', err);
      setErrore('Si è verificato un errore durante il recupero password');
    }
  };

  const validateFields = () => {
    if (!nome) {
      setErrore(`${translations.nome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cognome) {
      setErrore(`${translations.cognome[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!paese) {
      setErrore(`${translations.paese[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!citta) {
      setErrore(`${translations.citta[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!indirizzo) {
      setErrore(`${translations.indirizzo[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!cap) {
      setErrore(`${translations.cap[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    if (!telefono1) {
      setErrore(`${translations.telefono1[langPulito]}: ${translations.requiredField[langPulito]}`);
      return false;
    }
    return true;
  };

  const registraUtente = async () => {
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      return;
    }

    if (!validateFields()) return;

    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);
      sessionStorage.setItem('checkout_redirect', 'true');
    } catch (error) {
      console.error('Errore registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    }
  };

  return (
    <>
      <button onClick={() => setIsOpen(true)} className="text-white"><User size={22} /></button>
      {isOpen && (
        <div
          ref={menuRef}
          className="fixed top-0 right-0 w-full max-w-xs bg-white text-black z-50 p-4 shadow-xl"
          style={{ 
            maxHeight: 'calc(100vh - 20px)',
            minHeight: 'auto'
          }}
        >
          <div className="flex flex-col h-full">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-bold uppercase">{translations.login[langPulito]}</h2>
              <button onClick={() => {
                setIsOpen(false);
                setModalitaRegistrazione(false);
              }}><X size={22} /></button>
            </div>
            
            <div className="flex-1 overflow-y-auto pb-6">
              {!utente ? (
                <div className="space-y-3">
                  <input 
                    type="email" 
                    placeholder={translations.email[langPulito]} 
                    value={email} 
                    onChange={(e) => setEmail(e.target.value)} 
                    className="w-full border border-black px-4 py-2 rounded" 
                  />
                  <input 
                    type="password" 
                    placeholder={translations.password[langPulito]} 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                    className="w-full border border-black px-4 py-2 rounded" 
                  />
                  
                  <button 
                    onClick={modalitaRegistrazione ? registraUtente : loginEmail} 
                    className="w-full bg-black text-white py-2 rounded uppercase"
                  >
                    {modalitaRegistrazione ? translations.register[langPulito] : translations.login[langPulito]}
                  </button>
                  
                  {!modalitaRegistrazione && (
                    <button 
                      onClick={passwordDimenticata} 
                      className="text-blue-600 text-xs w-full text-left"
                    >
                      {translations.forgotPassword[langPulito]}
                    </button>
                  )}
                  
                  {errore && (
                    <p className="text-sm text-red-600 mb-4 py-2 px-3 bg-red-50 rounded">
                      {errore}
                    </p>
                  )}
                  
                  {modalitaRegistrazione && (
                    <>
                      <input 
                        placeholder={translations.nome[langPulito]} 
                        value={nome} 
                        onChange={(e) => setNome(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.cognome[langPulito]} 
                        value={cognome} 
                        onChange={(e) => setCognome(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      
                      <select
                        value={paese}
                        onChange={(e) => setPaese(e.target.value)}
                        className="w-full border border-black px-2 py-1 rounded bg-white"
                        required
                      >
                        <option value="">{translations.selectCountry[langPulito]}</option>
                        {(paesi[langPulito] || paesi['en']).map((nomePaese) => (
                          <option key={nomePaese} value={nomePaese}>
                            {nomePaese}
                          </option>
                        ))}
                      </select>
  
                      {paese && (cittaData[langPulito]?.[paese] || cittaData['en']?.[paese]) ? (
                        <>
                          <select
                            value={cittaSelezionata}
                            onChange={(e) => {
                              const value = e.target.value;
                              setCittaSelezionata(value);
                              if (value !== translations.other[langPulito]) setCitta(value);
                              else setCitta('');
                            }}
                            className="w-full border border-black px-2 py-1 rounded bg-white mt-2"
                            required
                          >
                            <option value="">{translations.selectCity[langPulito]}</option>
                            {(cittaData[langPulito]?.[paese] || cittaData['en']?.[paese] || []).map((city) => (
                              <option key={city} value={city}>{city}</option>
                            ))}
                            <option value={translations.other[langPulito]}>{translations.other[langPulito]}</option>
                          </select>
                          {cittaSelezionata === translations.other[langPulito] && (
                            <input
                              placeholder={translations.enterCity[langPulito]}
                              value={citta}
                              onChange={(e) => setCitta(e.target.value)}
                              className="w-full border border-black px-2 py-1 rounded mt-2"
                              required
                            />
                          )}
                        </>
                      ) : (
                        <input
                          placeholder={translations.enterCity[langPulito]}
                          value={citta}
                          onChange={(e) => setCitta(e.target.value)}
                          className="w-full border border-black px-2 py-1 rounded mt-2"
                          required
                        />
                      )}
  
                      <input 
                        placeholder={translations.indirizzo[langPulito]} 
                        value={indirizzo} 
                        onChange={(e) => setIndirizzo(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.cap[langPulito]} 
                        value={cap} 
                        onChange={(e) => setCap(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.telefono1[langPulito]} 
                        value={telefono1} 
                        onChange={(e) => setTelefono1(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                        required 
                      />
                      <input 
                        placeholder={translations.telefono2[langPulito]} 
                        value={telefono2} 
                        onChange={(e) => setTelefono2(e.target.value)} 
                        className="w-full border border-black px-2 py-1 rounded" 
                      />
                    </>
                  )}
                  
                  <div className="border-t pt-4 text-sm">
                    {!modalitaRegistrazione ? (
                      <>
                        <button 
                          onClick={() => setModalitaRegistrazione(true)} 
                          className="w-full border border-black py-2 rounded uppercase mb-2 font-semibold"
                        >
                          {translations.create[langPulito]}
                        </button>
                        <div className="text-xs text-gray-600 space-y-1 mt-2">
                          {translations.registerBenefits[langPulito].map((benefit, index) => (
                            <div key={index} className="flex items-start">
                              {['it', 'en', 'fr', 'es', 'de'].includes(langPulito) && (
                                <span className="mr-2">-</span>
                              )}
                              <span 
                                className={`
                                  ${langPulito === 'ar' ? 'text-right' : 'text-left'}
                                  ${['zh', 'ja'].includes(langPulito) ? 'ml-4' : ''}
                                  whitespace-pre-wrap
                                `}
                              >
                                {benefit}
                              </span>
                            </div>
                          ))}
                        </div>
                      </>
                    ) : null}
                  </div>
                </div>
              ) : (
                <div className="space-y-4 text-sm">
                  <p>{translations.welcome[langPulito](nomeUtente)}</p>
                  {registrazioneOk && (
                    <p className="text-sm text-green-600 font-semibold mb-4 py-2 px-3 bg-green-50 rounded">
                      🎉 {translations.registrationSuccess[langPulito]}
                    </p>
                  )}
                  <button 
                    onClick={logout} 
                    className="w-full bg-gray-700 text-white py-2 rounded uppercase"
                  >
                    Logout
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenuprotected.js -----
'use client';

import { useState, useEffect, useRef } from 'react';
import { User, X } from 'lucide-react';
import { supabase } from '../app/lib/supabaseClient';
import paesi from '../app/lib/paesi';
import { citta as cittaData } from '../app/lib/citta';
import { useRouter } from 'next/navigation';

const getClientIp = async () => {
  const services = [
    'https://api.ipify.org?format=json',
    'https://ipapi.co/json/',
    'https://ipwho.is/'
  ];

  const timeoutPromise = new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout')), 2000)
  );

  for (const service of services) {
    try {
      const response = await Promise.race([
        fetch(service),
        timeoutPromise
      ]);
      
      if (!response.ok) continue;
      
      const data = await response.json();
      return data.ip || data.ip_address;
    } catch (error) {
      console.debug(`Service ${service} failed:`, error);
      continue;
    }
  }
  
  console.warn('All IP services failed');
  return null;
};

const fetchNomeUtente = async (email) => {
  if (!email) return null;

  try {
    const { data, error } = await supabase
      .from('clienti')
      .select('nome')
      .eq('email', email)
      .maybeSingle();

    if (error?.code === 'PGRST116') return null;
    if (error) throw error;
    
    return data?.nome || null;
  } catch (err) {
    console.error('Errore non critico in fetchNomeUtente:', err);
    return null;
  }
};

export default function UserMenu({ lang }) {
  const router = useRouter();
  const langPulito = ['it','en','fr','de','es','ar','zh','ja'].includes(lang) ? lang : 'it';
  const [isOpen, setIsOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [utente, setUtente] = useState(null);
  const [nomeUtente, setNomeUtente] = useState('');
  const [errore, setErrore] = useState('');
  const [registrazioneOk, setRegistrazioneOk] = useState(false);
  const [modalitaRegistrazione, setModalitaRegistrazione] = useState(false);
  const [nome, setNome] = useState('');
  const [cognome, setCognome] = useState('');
  const [paese, setPaese] = useState('');
  const [citta, setCitta] = useState('');
  const [cittaSelezionata, setCittaSelezionata] = useState('');
  const [indirizzo, setIndirizzo] = useState('');
  const [cap, setCap] = useState('');
  const [telefono1, setTelefono1] = useState('');
  const [telefono2, setTelefono2] = useState('');
  const [authLoading, setAuthLoading] = useState(false);
  const menuRef = useRef();

  // ... (restano invariati tutti gli oggetti translations e funzioni helper tracciaAccesso, validateFields)

  useEffect(() => {
    if (window.location.hash === '#crea-account') {
      setIsOpen(true);
      setModalitaRegistrazione(true);
    }
  }, []);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setIsOpen(false);
        setModalitaRegistrazione(false);
        setErrore('');
        setRegistrazioneOk(false);
      }
    };
    
    if (isOpen) document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isOpen]);

  useEffect(() => {
    const checkLogin = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        const user = session?.user;

        if (!user || error) return;

        const nomeCliente = await fetchNomeUtente(user.email);
        
        setUtente(user);
        setNomeUtente(
          nomeCliente || 
          user.user_metadata?.name || 
          user.email.split('@')[0] || 
          'Utente'
        );
        tracciaAccesso(user.email);
      } catch (err) {
        console.error('Errore checkLogin:', err);
      }
    };

    checkLogin();
  }, []);

  const checkRedirect = async () => {
    const redirectPath = localStorage.getItem('checkout_redirect');
    if (redirectPath) {
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        localStorage.removeItem('checkout_redirect');
        router.push(redirectPath);
      }
    }
  };

  const logout = async () => {
    await supabase.auth.signOut();
    setUtente(null);
    setErrore('');
    setModalitaRegistrazione(false);
    setNomeUtente('');
    setRegistrazioneOk(false);
    localStorage.removeItem('lastActivity');
  };

  const loginEmail = async () => {
    setAuthLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });

      if (error || !data?.user) {
        setErrore(translations.invalidLogin[langPulito]);
        setUtente(null);
        return;
      }

      const nomeCliente = await fetchNomeUtente(data.user.email);
      setUtente(data.user);
      setNomeUtente(nomeCliente || data.user.email.split('@')[0] || 'Utente');
      tracciaAccesso(data.user.email);
      setErrore('');
      await checkRedirect();
    } catch (err) {
      console.error('Errore login email:', err);
      setErrore('Si è verificato un errore durante il login');
    } finally {
      setAuthLoading(false);
    }
  };

  const registraUtente = async () => {
    setAuthLoading(true);
    setErrore('');
    
    if (!email || !password) {
      setErrore('Inserisci email e password');
      setAuthLoading(false);
      return;
    }

    if (!validateFields()) {
      setAuthLoading(false);
      return;
    }

    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          data: {
            nome,
            cognome
          }
        }
      });

      if (authError) throw authError;

      const { error: dbError } = await supabase.from('clienti').upsert({
        email,
        nome,
        cognome,
        paese,
        citta,
        indirizzo,
        codice_postale: cap,
        telefono1,
        telefono2,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ordini: []
      });

      if (dbError) throw dbError;

      setUtente(authData.user);
      setNomeUtente(nome);
      setRegistrazioneOk(true);
      setErrore('');
      setModalitaRegistrazione(false);
      tracciaAccesso(email);
      await checkRedirect();
    } catch (error) {
      console.error('Errore registrazione:', error);
      setErrore(error.message || 'Errore durante la registrazione');
    } finally {
      setAuthLoading(false);
    }
  };

  // ... (restano invariati passwordDimenticata e render JSX)
}
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/file_tree.txt -----
.
├── .DS_Store
├── .git
│   ├── COMMIT_EDITMSG
│   ├── FETCH_HEAD
│   ├── HEAD
│   ├── ORIG_HEAD
│   ├── branches
│   ├── config
│   ├── description
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       └── remotes
│   ├── objects
│   │   ├── 00
│   │   │   ├── 4145cddf3f9db91b57b9cb596683c8eb420862
│   │   │   ├── a5121d63acc0c59b734e73838c993a28e066ba
│   │   │   └── ce9b7f7567c6834473880a8e587ecf5e4b7fa3
│   │   ├── 03
│   │   │   └── 105881fb049018ce99ce554fc565e34e3d89fa
│   │   ├── 06
│   │   │   ├── d4328b9b4f53f79706cdf517617f1a705dbd32
│   │   │   └── f5290238ef6ee922edbc6070667907a644aad0
│   │   ├── 07
│   │   │   ├── 797624f6d1b2b775e2dd6ed9b88c0814b3edef
│   │   │   └── a5eab0976896eaa7a9a4459f633c7613de6427
│   │   ├── 0a
│   │   │   ├── 4ef1af3eb301ed8df96818cd5d7279b0542574
│   │   │   └── 73b29ede8dff79c0ba6a350f8336fde7d8ce34
│   │   ├── 0d
│   │   │   └── a6ab5746b7c518721a40b165435c45ad71097e
│   │   ├── 10
│   │   │   └── a0b68e6b444d6e549dc6cc512f5903f4368762
│   │   ├── 12
│   │   │   ├── 216e88bb00242b6ffc9ad502023195815f10c6
│   │   │   ├── 2e25eb1f95b4d75791e16fe44b18b139df6310
│   │   │   └── e3d99c33b04bce7a11b480cb159274afd1d560
│   │   ├── 14
│   │   │   ├── 2265efd0a0245c846080892df5595fd4f0e405
│   │   │   └── 2c50165b5c94dcc734ba660cc140074eec4b73
│   │   ├── 15
│   │   │   └── 10036682f8eb1900c40ecc37bb50a47e8c3441
│   │   ├── 17
│   │   │   └── aa43e8c953e93912ce543fdf38288b143c54b5
│   │   ├── 1c
│   │   │   └── af366252488978ca98ae3e00dd24da0adca35b
│   │   ├── 20
│   │   │   └── 89747c9d576a4a3b24f9d9c8d8949f716b95cf
│   │   ├── 21
│   │   │   ├── 7adcba52ecb0827929f2e3a243d161dfaa8470
│   │   │   ├── d55b97226ae0d2d91d77500a5495b1e8cdaab0
│   │   │   └── ef4db01417d594dea2c7e9f98fb725792c6d62
│   │   ├── 22
│   │   │   └── d4bacfb68148b609c12a92c29aefe109b77959
│   │   ├── 26
│   │   │   └── 8ec48e5ac855775c1bbd53b5003fe765019544
│   │   ├── 27
│   │   │   └── e6e1d1e39769b86986cf774b441de4e7525dda
│   │   ├── 28
│   │   │   └── 727fa82a870250523c5bf5c588df99d1cfebfa
│   │   ├── 29
│   │   │   └── c19a41016785de5034311d731744ec72b864cc
│   │   ├── 2a
│   │   │   └── 2e4b3bf8ba1c86d96fc2f5786597ad77a0e5e9
│   │   ├── 2e
│   │   │   └── d38995b4d7eafba5eefcc2bc9546aca2e02b7c
│   │   ├── 2f
│   │   │   └── ae2c5a6ed73fd7e5d8e89df59858f3cc65b465
│   │   ├── 31
│   │   │   ├── 2af0f6de1f01ba48762176a3cb9f62d1800426
│   │   │   ├── b7d875488160e108fbc3a0a550b0853864b9a4
│   │   │   └── ed2bb1e285f03b19dd9ddf1a0f2b86aded7ec8
│   │   ├── 33
│   │   │   └── 82cef199e85a55b2d6a88093833b526c649154
│   │   ├── 34
│   │   │   └── 8c45a2fd8216681988475081fd9db87a50031e
│   │   ├── 3c
│   │   │   └── 51cb483bade337128fc9106b73bd6c58d775f2
│   │   ├── 3d
│   │   │   └── 9fce937dfba62b3baf11b55d9abb495dffc79c
│   │   ├── 3e
│   │   │   └── 4a4e0d4e7b4d998746919717f5509329b1a591
│   │   ├── 40
│   │   │   └── b4e3975ceb923b2c4f3f8b7efe3c23f8492926
│   │   ├── 45
│   │   │   └── 603385b671015911147584e4d6bcea951c0a19
│   │   ├── 46
│   │   │   ├── 78774e6d606704bce1897a5dab960cd798bf66
│   │   │   ├── e831dacb8fdf699a94727aef1242f7c4bafa39
│   │   │   └── fb74e11ced6bc904a3a62f19cdb80230d6aafb
│   │   ├── 48
│   │   │   └── bf3f00bbb99db550db0fa369ceaa4483881100
│   │   ├── 49
│   │   │   └── 5231257f1edbd08a03cfb8147da664e4c00915
│   │   ├── 4b
│   │   │   └── 22622f28ae148ab6cb9c8f71dab3b81428d90a
│   │   ├── 4f
│   │   │   └── 11a03dc6cc37f2b5105c08f2e7b24c603ab2f4
│   │   ├── 51
│   │   │   ├── 74b28c565c285e3e312ec5178be64fbeca8398
│   │   │   ├── bad0e72cf5b957cff8c0bc1a5e6a32559217f9
│   │   │   └── fc64189411d75a2a34ff2988ed0f9e8085da30
│   │   ├── 53
│   │   │   ├── ae5f8950ab1e06f30448ef27fde3b987f6bb35
│   │   │   └── cb9bb7e8daed155df6265c58e1c02accd890d5
│   │   ├── 54
│   │   │   ├── 76b13d73bc64094f232157fdd3af852fe9f60a
│   │   │   └── b10d29dae0f69dff0920f6b6df955df4efcd1d
│   │   ├── 56
│   │   │   ├── 7f17b0d7c7fb662c16d4357dd74830caf2dccb
│   │   │   └── dcb4882153035265a6b3683fc3f711219b776a
│   │   ├── 59
│   │   │   └── 7022e06fa916f5ab09e83cf537d75ab88a4aa8
│   │   ├── 5a
│   │   │   ├── 1b75bc48d48e1b8d710a3c86e887769862f1d6
│   │   │   └── 5255b271686504c3b94fd212fd70a7ede97a3d
│   │   ├── 5b
│   │   │   └── 7f69aa4f80f337b406ac79d93087a2d3b92499
│   │   ├── 5e
│   │   │   └── b68de50166e29634de73e1c51be3161b52ff85
│   │   ├── 5f
│   │   │   ├── 3863f920009feeb4727e3826a78fd8272b8ea0
│   │   │   └── b34ff596aca896fe495839b08ce73299ec3533
│   │   ├── 60
│   │   │   └── f8d22d9b570e0a34139dd9fa40e0dd8ac27d92
│   │   ├── 61
│   │   │   └── 5d924862240585e42a2cd809dfa685bb085dd2
│   │   ├── 62
│   │   │   └── 4ce8f161f47343346c1fec89b3c61c8a2f69c3
│   │   ├── 63
│   │   │   └── dd4b317db4fd3c5d7e57e035afbed119cb7ab4
│   │   ├── 65
│   │   │   └── 58e8029de7fddcf5cbf56176d2d3cb609dbe42
│   │   ├── 66
│   │   │   ├── bb426ffe6ec9f5d829fccff91afcf9f2d16810
│   │   │   └── eba019ba2f45d1a9f4fec263b4e6054c3419c0
│   │   ├── 68
│   │   │   └── c287a4237f73f1a960eb81c425a4158b567f81
│   │   ├── 6d
│   │   │   ├── 20ee681ba28291afc7578786276a9d979ed995
│   │   │   └── 8b4af665ff6b7f12c2ef29cb1a550230a10357
│   │   ├── 6f
│   │   │   └── 4620ffa63851d275034aabee15a13495aeb98c
│   │   ├── 71
│   │   │   └── 8d6fea4835ec2d246af9800eddb7ffb276240c
│   │   ├── 75
│   │   │   └── 10db384025fd1b9f7370c9fac5ae08b07ce0a9
│   │   ├── 76
│   │   │   ├── 00cd5124ee127e215c060fbb75049bbc1be0bf
│   │   │   └── 1c670cc1960eb2544ede54963faee66d649dc4
│   │   ├── 77
│   │   │   └── 053960334e2e34dc584dea8019925c3b4ccca9
│   │   ├── 78
│   │   │   └── 46507a2240ed3afb12e1e3009b22eb2f152109
│   │   ├── 79
│   │   │   ├── 952e3269b54a4ec90b14012bb1cc89d2352b02
│   │   │   └── c869123d3aa6e027aebfaf4e34201c329b45e0
│   │   ├── 7d
│   │   │   ├── 2c9dfa591ecf650c3c674e51ef41af9fb455cf
│   │   │   └── 6c17ebac31594533455c4d017dc04d24ec448d
│   │   ├── 7e
│   │   │   └── 7aedb12ed0639629d497b56c8e223a2c994b31
│   │   ├── 7f
│   │   │   ├── b887625459ee13b0cda12cb6c641cbf30b0417
│   │   │   └── ca285e66ea6d7a1223cc0c30821507ddedc978
│   │   ├── 80
│   │   │   ├── 30161c01f868fd4b6dc6465291b727f24d6f65
│   │   │   └── 37adc0b646d16be42075e69dc9dbf3709b5ee5
│   │   ├── 82
│   │   │   ├── 6e6171777035a8f0d4608881af63976a11f671
│   │   │   └── def5313469804cc70448852452da7c58042d18
│   │   ├── 83
│   │   │   └── 99d6e0d033e113090bb139dfbf240f6415b710
│   │   ├── 85
│   │   │   ├── 68e287c0936a7c5a67e26af9785833adcd93be
│   │   │   └── 85f5a38652a1d87f758d0af02b67b1bededf57
│   │   ├── 8a
│   │   │   └── 2e527e1efc12e8d5dcabcf3315f667fb29e89b
│   │   ├── 8d
│   │   │   └── 14ad02aed0a9926963a85601dc02c3819d107f
│   │   ├── 8e
│   │   │   └── 2379338569c3a7275d20652462a44c1854fc67
│   │   ├── 8f
│   │   │   └── c9a633100482da3bd827000aeed218a54427a8
│   │   ├── 92
│   │   │   └── dd1846d679732a75331fe894fbd643b4790020
│   │   ├── 94
│   │   │   └── 7586ced2608af564474fbad36419893b717c31
│   │   ├── 97
│   │   │   └── 64ade512a1dc454ce7231a3cec86c25a9bf063
│   │   ├── 98
│   │   │   └── e35a3faf6fef5af6f95eb5d777b089c93f03fd
│   │   ├── 9b
│   │   │   └── c2f2dd504e6098ed4037598847a172218df30a
│   │   ├── 9c
│   │   │   └── 33eb2213992ffb7e6f644cdaa9af9bcbf6eea8
│   │   ├── 9d
│   │   │   ├── 001711a14c0294d8f442efbad2cdf6c4b7e613
│   │   │   └── 36b766def497076c730eadabf91104a39e1cbc
│   │   ├── 9e
│   │   │   └── 69238f05e7d4a333f34bab1a4610de15c29484
│   │   ├── a2
│   │   │   ├── 7dc20cac0ce601a9b2568ae0e29bf19b718d85
│   │   │   └── e6f242611dd52bf9974ae52ccb0f342e71a7b5
│   │   ├── a3
│   │   │   ├── 75e19044eb8a1f153b2d8db35979b0e494cedb
│   │   │   ├── 7743aad60c494d6228a884f7d8ebc11f4fcc53
│   │   │   └── 8d37e70dc236e9c1696fefeb5e948f0d6ae0d1
│   │   ├── a4
│   │   │   └── 2305bfb362874d5af008eb5eab40ff9782a44e
│   │   ├── a6
│   │   │   └── e1ac3a3545737d044efa2f0ebaab345f7013a9
│   │   ├── a7
│   │   │   ├── bc5b58ddc2040ce5c811730a39fd2c8aef057a
│   │   │   └── e42a81eb141304b22d9c95c31e165229089a63
│   │   ├── a9
│   │   │   └── 4e7ea99810899a60e5113543f3ee246620abc5
│   │   ├── ab
│   │   │   └── 10168ec0072b24b13233135a6c92fe2c782c1d
│   │   ├── ac
│   │   │   ├── 55d59915f50709f60d0e1b3d2e91d2412930df
│   │   │   └── 7d109c807858ed7f8a981c934fccb39a794359
│   │   ├── ae
│   │   │   └── 630443f4d76ed2ea1da5cbb112e6df64730e42
│   │   ├── b0
│   │   │   └── c522806c1ed4e95395cecdb7633c5b14d16561
│   │   ├── b2
│   │   │   └── b2a44f6ebc70c450043c05a002e7a93ba5d651
│   │   ├── b4
│   │   │   └── 5fa833b7510268c83a26a9d6c48a227262f705
│   │   ├── b5
│   │   │   └── decd92fde27d85a2e18e94410fec82374572fa
│   │   ├── b7
│   │   │   └── 87f6ee08c549c324850a2bf133617ea88907d8
│   │   ├── b9
│   │   │   ├── 31f06435c2aa57eff00fe0020eb48a457db073
│   │   │   ├── c6a88ba86b255f7c47c1c04868ae24a1c61024
│   │   │   └── f7837567b33d6857888e7f3b3e52efaecca182
│   │   ├── ba
│   │   │   ├── 0f6347f14912e1af2cc350f5058ea7390b1489
│   │   │   └── 51eae75f95e49201d079923c1ceda090df4c0a
│   │   ├── bb
│   │   │   └── 571951d37d3fcc32569214a9dab2e29a8df10b
│   │   ├── bd
│   │   │   └── 04c26c5d34857d16a77ec11a5a09c0b21ae5da
│   │   ├── c0
│   │   │   ├── 5243b9c77131c1fd8b268db282c2ce490dd5c0
│   │   │   └── ed071070530e3d6557f8d3ef5d242b167de8ff
│   │   ├── c1
│   │   │   └── 88527b61564cffce5163600c1349611da9ad29
│   │   ├── c3
│   │   │   ├── 11327078cb22db39fbce5267cb7859eb4f6fb1
│   │   │   └── 736b71ea96948e8c4bc62fb8e06b481a1115c8
│   │   ├── c4
│   │   │   ├── a6d2313f818e1dd219b51d1821e7c65f56016b
│   │   │   └── b2e33d50b3987e4e4d8539eba8b4f2556f3c55
│   │   ├── c5
│   │   │   └── 129b7acb89df29e9bbf4e01c74d99885e27be8
│   │   ├── c9
│   │   │   └── 917feb1447bec9cf52fa83ddb9835939f525e3
│   │   ├── cb
│   │   │   └── 6dbd02f42f2e0e84858cdebae6462a228b650e
│   │   ├── cc
│   │   │   └── 35277e88dbd703208d429de63b602539ecda35
│   │   ├── cd
│   │   │   └── 1f7d54d98d9d1c977d4be719445d991c04dbdb
│   │   ├── cf
│   │   │   └── ff87966648eb3bad51158431933e5a476b59f9
│   │   ├── d0
│   │   │   └── ea75039e903a47c592422e4109777f19e1fbe1
│   │   ├── d1
│   │   │   ├── 94ea1b27cec563ae5c36f37711fbcd60d1e1da
│   │   │   └── a59a7a89f8ac31503fa31042d2473b0940d5fe
│   │   ├── d2
│   │   │   ├── 650936bd7c46e2f3f9a8a99615159be2510d4a
│   │   │   ├── 69ea9efdbebf281352cc791b44e33c89a57a63
│   │   │   └── c996e81682ac778a81793a29dc6690e477d3d6
│   │   ├── d4
│   │   │   └── de66b9871dbab1190f39f519d308ffd57f64ab
│   │   ├── d5
│   │   │   └── a585d8ba176f720a58bd30b790c945caf2fd28
│   │   ├── d7
│   │   │   └── e983ef47d03ba86f97589da52b2a871fc7f5fb
│   │   ├── d9
│   │   │   ├── 8ad89a118b4812bfb852710c6d8d9f18665c45
│   │   │   ├── 973c40e287b59ca79e68e69e7f6a47b650a5a4
│   │   │   └── f4a974c3e6a01f424cbeae09e11ecb030264d1
│   │   ├── da
│   │   │   └── be92b68e8cc76a371a919df9aa70a4ca8e935e
│   │   ├── db
│   │   │   └── 460d42bce2393bf0c5b4516f6c13e219b3ac02
│   │   ├── dc
│   │   │   └── 8ba2879a67fd0631667ba6b1d8318cf3778a7c
│   │   ├── dd
│   │   │   ├── 442cbe7beea66bf9e488d1cd8c90efde013165
│   │   │   └── 4c2a5529014d329c6f8486e84933f12295949d
│   │   ├── e0
│   │   │   └── 48183fc6c7fa3e88f125389938df1ba03792d5
│   │   ├── e1
│   │   │   ├── 9b488782f0ec5419ce069732583a05cd7c1088
│   │   │   └── e9523123d548beb26344d02eb52fd03ece5fe1
│   │   ├── e2
│   │   │   └── f7a15fe25faf92f62b4a91c8be341a8dc0e10d
│   │   ├── e5
│   │   │   ├── 4d8cc6703a829e4d869cd2f4dc9f778be60efb
│   │   │   └── 5607006376722474e6926ca4812c207e83b319
│   │   ├── e6
│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── e7
│   │   │   └── 15a74ac201b8791bd91725c89e166841b0537c
│   │   ├── e9
│   │   │   └── 5020f8fe17864ef711567945c17f8cd31b5088
│   │   ├── ef
│   │   │   └── 1ad3df6a442354a330a60afa4e71e145e13fea
│   │   ├── f0
│   │   │   └── 18c6df76b39dc66037496fe990860fe4531aaa
│   │   ├── f3
│   │   │   └── 590d33cc2aba4d2924ca04f225aa0b135ac6ca
│   │   ├── f5
│   │   │   ├── 432d517e59d23ebfe5e472343f882dbb7adb8b
│   │   │   └── c9a5cb151c3dad8339b9cb6ca6806db0585af3
│   │   ├── f6
│   │   │   └── 19795e7255f58364626b18d537d91d8911db62
│   │   ├── f8
│   │   │   ├── 155339d71cc6c198b752c03227ad83c5927c5d
│   │   │   └── 2b8cfc85046a95f7e5202b8b23a4757f4325db
│   │   ├── f9
│   │   │   ├── 726669ac0b9dad16e20a6aa7e71d693238afc7
│   │   │   └── fa115b32350282c1b1e0cf48d2044a6d10e666
│   │   ├── fb
│   │   │   └── 8273af38db6c4f9699d63e14c567f5b6ac8234
│   │   ├── fc
│   │   │   └── 75d21dc26259522004c32952275cee186d3fb7
│   │   ├── fd
│   │   │   ├── 0b287e2eda7377ff0eed0e4c2fb811b9a7b8aa
│   │   │   └── ccd30b634e7c7b45539361a50fcef80529e737
│   │   ├── fe
│   │   │   ├── 51488c7066f6687ef680d6bfaa4f7768ef205c
│   │   │   ├── 6b84a4d6aca4c4e872b3479f0c45b36bf4ac29
│   │   │   └── 85c1d9285ece840eb3e6f939f16e0d935193f1
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       └── tags
├── .gitignore
├── .vercel
│   ├── README.txt
│   └── project.json
├── README.md
├── app
│   ├── .DS_Store
│   ├── 404
│   │   └── page.js
│   ├── :api:save-product: 
│   ├── ClientProviders.jsx
│   ├── abbigliamento
│   │   ├── .DS_Store
│   │   └── page.js
│   ├── accessori
│   │   ├── .DS_Store
│   │   ├── page copy.js
│   │   └── page.js
│   ├── admin
│   │   ├── .DS_Store
│   │   ├── Analisi_AdminPage_COMPLETA.docx
│   │   ├── clienti
│   │   │   └── page.js
│   │   ├── edit
│   │   │   ├── .DS_Store
│   │   │   ├── [id]
│   │   │   ├── data
│   │   │   └── id
│   │   ├── inventario
│   │   │   └── page.js
│   │   ├── login
│   │   │   └── page.js
│   │   ├── ordini
│   │   │   └── page.js
│   │   ├── page copy.js
│   │   ├── page.js
│   │   ├── spedizioni
│   │   │   └── page.js
│   │   └── vendite
│   │       ├── VenditePageContent.js
│   │       └── page.js
│   ├── api
│   │   ├── .DS_Store
│   │   ├── admin-log
│   │   │   └── route.js
│   │   ├── auth
│   │   │   ├── login.js
│   │   │   └── register.js
│   │   ├── products
│   │   │   ├── .DS_Store
│   │   │   ├── [id]
│   │   │   ├── rou.ts
│   │   │   └── route.js
│   │   ├── save-ordini
│   │   │   └── route.js
│   │   ├── save-product
│   │   │   ├── .DS_Store
│   │   │   ├── route copy.js
│   │   │   └── route.js
│   │   └── upload-image
│   │       ├── .DS_Store
│   │       ├── route copy.js
│   │       └── route.js
│   ├── ar
│   │   └── page.js
│   ├── brand
│   │   └── page.js
│   ├── checkout
│   │   ├── .DS_Store
│   │   ├── page copy.js
│   │   └── page.js
│   ├── de
│   │   └── page.js
│   ├── en
│   │   └── page.js
│   ├── es
│   │   └── page.js
│   ├── eventi
│   │   └── page.js
│   ├── favicon.ico
│   ├── fr
│   │   └── page.js
│   ├── gioielli
│   │   ├── .DS_Store
│   │   ├── page copy.js
│   │   └── page.js
│   ├── globals.css
│   ├── globals_v0.1.css
│   ├── it
│   │   └── page.js
│   ├── ja
│   │   └── page.js
│   ├── layout.js
│   ├── layout_v0.1.js
│   ├── layout_v0.2.js
│   ├── layout_v0.3.js
│   ├── lib
│   │   └── supabaseClient.js
│   ├── offerte
│   │   └── page.js
│   ├── page.js
│   ├── page_v0.1.js
│   ├── page_v0.2.js
│   ├── page_v0.3.js
│   ├── search
│   │   └── page.js
│   ├── servizi
│   │   └── page.js
│   └── zh
│       └── page.js
├── components
│   ├── .DS_Store
│   ├── CategoryButtons.js
│   ├── CategoryButtons_v0.1.js
│   ├── CategoryButtonsxsitogr.js
│   ├── FlagLanguageSwitcher.js
│   ├── FlagLanguageSwitcher_v0.1.js
│   ├── LoginSidebar.jsx
│   ├── MobileMenu.js
│   ├── SearchIcon.js
│   ├── TopRightMenu.js
│   └── UserMenu.js
├── eslint.config.mjs
├── file_tree.txt
├── g-rgabriellaromeo_backup_definitivo.zip
├── inizializzazione di localhost:3000.txt
├── jsconfig.json
├── modules diagrams_scripts&explanation
│   ├── .DS_Store
│   ├── layoutjs_detailed_explanation_final.pdf
│   ├── manuale_completo_con_flussi_operativi-1.pdf
│   ├── manuale_struttura_moduli_gabriella_romeo.pdf
│   ├── package_json_detailed_explanation_with_diagram.pdf
│   ├── page_js_detailed_explanation_final.pdf
│   └── progetto_struttura_ascii_tree_finale.pdf
├── next-env.d.ts
├── next.config.mjs
├── package-lock.json
├── package.json
├── postcss.config.js
├── postcss.config.mjs
├── public
│   ├── .DS_Store
│   ├── DSC00229.JPG
│   ├── conqr hero.png
│   ├── data
│   │   ├── .DS_Store
│   │   ├── clienti.json
│   │   ├── images
│   │   └── products.json
│   ├── distortohero.png
│   ├── file.svg
│   ├── fonts
│   │   ├── GRGabriellaFinal.ttf
│   │   ├── GRGabriellaModern.ttf
│   │   └── GRGabriellaUltraCustom.ttf
│   ├── globe.svg
│   ├── hero copy.png
│   ├── hero.png
│   ├── hero1.png
│   ├── hero4.png
│   ├── heroold.png
│   ├── next.svg
│   ├── qr-instagram.png
│   ├── uploads
│   │   ├── .DS_Store
│   │   ├── BERLIN.png
│   │   ├── MARRAKECH Y:G.png
│   │   ├── Marrakech w:g.png
│   │   ├── NEW DELHI W:G.png
│   │   ├── NEW YORK W.PNG
│   │   ├── NEW YORK Y.png
│   │   ├── SIDNEY W:G.png
│   │   ├── Screenshot 2025-05-25 at 12.01.52 PM.png
│   │   ├── Screenshot 2025-05-26 at 3.33.04 PM.png
│   │   ├── gg.jpg
│   │   └── gianluigi.jpg
│   ├── vecchio hero.png
│   ├── vercel.svg
│   └── window.svg
├── struttura_progetto.txt
├── tailwind.config.js
└── tsconfig.json

199 directories, 349 files

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/inizializzazione di localhost:3000.txt -----


cd ~/Desktop/gr-gabriella-clean


npm run dev

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/istruzioni_chat.md -----
# Regole operative per ChatGPT (Aletheia) – Progetto g-rgabriellaromeo

## ✅ Formato di riferimento file
- Tutti i file devono essere sempre indicati nel formato:
  `cartella/nome_file.estensione`
  - Esempio: `app/layout.js`, `components/UserMenu.js`, `app/admin/page.js`
- Se non si e' sicuri del percorso di un file verificare, prima di generare script, con Gianluigi che i percorsi siano corretti e lo script a cui applicare le modifiche sia quello aggiornato senza inventare script nuovi da zero.

## ✅ Procedura di modifica file
- Nessun file viene modificato da Aletheia se prima non viene:
  1. Esplicitamente **indicato dall’utente**
  2. **Inviato dallo stesso utente** (anche copiato nella chat)
  3. **Confermato come corretto e autorizzato alla modifica**
  4. **Non viene alterato layout, testi, né logica su script funzionanti a parte le ultime modifiche a funzioni e layout richieste.
  5. **Non vengono generati file normali o zip a meno che non vengono richiesti da Gianluigi.
  6. Quando e' richiesta una modifica aletheia deve reinviare lo script con le nuove funzionalità' COMPLETO da incollare, se troppo grande in blocchi separati ma senza chiedere e aspettare la conferma dell'invio del blocco successivo.

## ❌ Vietato l’uso di Canvas
- Aletheia **non deve mai usare Canmore/Canvas** per rispondere, né per fornire codice o modifiche. a meno che non venga richiesto  esplicitamente
- Tutti i codici devono essere forniti **direttamente nel messaggio** per copia/incolla. preferendo lo script completo se le modifiche interessano grandi blocchi 
- Esempio se si deve cambiare solo un nome va bene la modifica 

## 🧠 Memoria temporanea
- Aletheia deve mantenere queste regole **attive per tutta la sessione**.
- Se la sessione viene riavviata, l’utente può ripristinarle semplicemente incollando questo file o riferendosi ad esso.

## risposte a input
- se a seguito di una risposta o non capisci esattamente la richiesta o non trovi una soluzione certa non inventare nulla ma chiedi chiarimenti aggiuntivi prima di generare nuovi script

## 🛠 Esempio corretto
❌ SBAGLIATO: “Modifica il layout”  
✅ CORRETTO: “Modifica il file `app/layout.js` dopo che te lo invio”

---

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/jsconfig.json -----
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/next-env.d.ts -----
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/package-lock.json -----
{
    "name": "gr-gabriella-clean",
    "version": "1.0.0",
    "lockfileVersion": 3,
    "requires": true,
    "packages": {
        "": {
            "name": "gr-gabriella-clean",
            "version": "1.0.0",
            "dependencies": {
                "@supabase/supabase-js": "^2.49.8",
                "bufferutil": "^4.0.9",
                "i18n-iso-countries": "^7.14.0",
                "jspdf": "^3.0.1",
                "jspdf-autotable": "^5.0.2",
                "lucide-react": "^0.511.0",
                "next": "^13.5.11",
                "pdf-lib": "^1.17.1",
                "pdfmake": "^0.2.20",
                "react": "^18.3.1",
                "react-dom": "^18.3.1",
                "resend": "^4.5.1",
                "utf-8-validate": "^6.0.5"
            },
            "devDependencies": {
                "@tailwindcss/postcss": "^4.1.7",
                "@types/node": "^20.11.30",
                "@types/react": "^18.2.42",
                "autoprefixer": "^10.4.21",
                "eslint": "^9.27.0",
                "eslint-config-next": "^15.3.2",
                "postcss": "^8.5.3",
                "postcss-loader": "^8.1.1",
                "tailwindcss": "3.3",
                "typescript": "^5.3.3",
                "vercel": "^43.1.0"
            }
        },
        "node_modules/@alloc/quick-lru": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
            "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/@ampproject/remapping": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
            "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
            "dev": true,
            "license": "Apache-2.0",
            "dependencies": {
                "@jridgewell/gen-mapping": "^0.3.5",
                "@jridgewell/trace-mapping": "^0.3.24"
            },
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@babel/code-frame": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
            "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@babel/helper-validator-identifier": "^7.27.1",
                "js-tokens": "^4.0.0",
                "picocolors": "^1.1.1"
            },
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/helper-validator-identifier": {
            "version": "7.27.1",
            "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
            "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@babel/runtime": {
            "version": "7.27.4",
            "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.4.tgz",
            "integrity": "sha512-t3yaEOuGu9NlIZ+hIeGbBjFtZT7j2cb2tg0fuaJKeGotchRjjLfrBA9Kwf8quhpP1EUuxModQg04q/mBwyg8uA==",
            "license": "MIT",
            "engines": {
                "node": ">=6.9.0"
            }
        },
        "node_modules/@cspotcode/source-map-support": {
            "version": "0.8.1",
            "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
            "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/trace-mapping": "0.3.9"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
            "version": "0.3.9",
            "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
            "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/resolve-uri": "^3.0.3",
                "@jridgewell/sourcemap-codec": "^1.4.10"
            }
        },
        "node_modules/@edge-runtime/format": {
            "version": "2.2.1",
            "resolved": "https://registry.npmjs.org/@edge-runtime/format/-/format-2.2.1.tgz",
            "integrity": "sha512-JQTRVuiusQLNNLe2W9tnzBlV/GvSVcozLl4XZHk5swnRZ/v6jp8TqR8P7sqmJsQqblDZ3EztcWmLDbhRje/+8g==",
            "dev": true,
            "license": "MPL-2.0",
            "engines": {
                "node": ">=16"
            }
        },
        "node_modules/@edge-runtime/node-utils": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/@edge-runtime/node-utils/-/node-utils-2.3.0.tgz",
            "integrity": "sha512-uUtx8BFoO1hNxtHjp3eqVPC/mWImGb2exOfGjMLUoipuWgjej+f4o/VP4bUI8U40gu7Teogd5VTeZUkGvJSPOQ==",
            "dev": true,
            "license": "MPL-2.0",
            "engines": {
                "node": ">=16"
            }
        },
        "node_modules/@edge-runtime/ponyfill": {
            "version": "2.4.2",
            "resolved": "https://registry.npmjs.org/@edge-runtime/ponyfill/-/ponyfill-2.4.2.tgz",
            "integrity": "sha512-oN17GjFr69chu6sDLvXxdhg0Qe8EZviGSuqzR9qOiKh4MhFYGdBBcqRNzdmYeAdeRzOW2mM9yil4RftUQ7sUOA==",
            "dev": true,
            "license": "MPL-2.0",
            "engines": {
                "node": ">=16"
            }
        },
        "node_modules/@edge-runtime/primitives": {
            "version": "4.1.0",
            "resolved": "https://registry.npmjs.org/@edge-runtime/primitives/-/primitives-4.1.0.tgz",
            "integrity": "sha512-Vw0lbJ2lvRUqc7/soqygUX216Xb8T3WBZ987oywz6aJqRxcwSVWwr9e+Nqo2m9bxobA9mdbWNNoRY6S9eko1EQ==",
            "dev": true,
            "license": "MPL-2.0",
            "engines": {
                "node": ">=16"
            }
        },
        "node_modules/@edge-runtime/vm": {
            "version": "3.2.0",
            "resolved": "https://registry.npmjs.org/@edge-runtime/vm/-/vm-3.2.0.tgz",
            "integrity": "sha512-0dEVyRLM/lG4gp1R/Ik5bfPl/1wX00xFwd5KcNH602tzBa09oF7pbTKETEhR1GjZ75K6OJnYFu8II2dyMhONMw==",
            "dev": true,
            "license": "MPL-2.0",
            "dependencies": {
                "@edge-runtime/primitives": "4.1.0"
            },
            "engines": {
                "node": ">=16"
            }
        },
        "node_modules/@emnapi/core": {
            "version": "1.4.3",
            "resolved": "https://registry.npmjs.org/@emnapi/core/-/core-1.4.3.tgz",
            "integrity": "sha512-4m62DuCE07lw01soJwPiBGC0nAww0Q+RY70VZ+n49yDIO13yyinhbWCeNnaob0lakDtWQzSdtNWzJeOJt2ma+g==",
            "dev": true,
            "license": "MIT",
            "optional": true,
            "dependencies": {
                "@emnapi/wasi-threads": "1.0.2",
                "tslib": "^2.4.0"
            }
        },
        "node_modules/@emnapi/runtime": {
            "version": "1.4.3",
            "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
            "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
            "dev": true,
            "license": "MIT",
            "optional": true,
            "dependencies": {
                "tslib": "^2.4.0"
            }
        },
        "node_modules/@emnapi/wasi-threads": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/@emnapi/wasi-threads/-/wasi-threads-1.0.2.tgz",
            "integrity": "sha512-5n3nTJblwRi8LlXkJ9eBzu+kZR8Yxcc7ubakyQTFzPMtIhFpUBRbsnc2Dv88IZDIbCDlBiWrknhB4Lsz7mg6BA==",
            "dev": true,
            "license": "MIT",
            "optional": true,
            "dependencies": {
                "tslib": "^2.4.0"
            }
        },
        "node_modules/@eslint-community/eslint-utils": {
            "version": "4.7.0",
            "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
            "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "eslint-visitor-keys": "^3.4.3"
            },
            "engines": {
                "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
            },
            "funding": {
                "url": "https://opencollective.com/eslint"
            },
            "peerDependencies": {
                "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
            }
        },
        "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
            "version": "3.4.3",
            "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
            "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
            },
            "funding": {
                "url": "https://opencollective.com/eslint"
            }
        },
        "node_modules/@eslint-community/regexpp": {
            "version": "4.12.1",
            "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
            "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
            }
        },
        "node_modules/@eslint/config-array": {
            "version": "0.20.0",
            "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.20.0.tgz",
            "integrity": "sha512-fxlS1kkIjx8+vy2SjuCB94q3htSNrufYTXubwiBFeaQHbH6Ipi43gFJq2zCMt6PHhImH3Xmr0NksKDvchWlpQQ==",
            "dev": true,
            "license": "Apache-2.0",
            "dependencies": {
                "@eslint/object-schema": "^2.1.6",
                "debug": "^4.3.1",
                "minimatch": "^3.1.2"
            },
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            }
        },
        "node_modules/@eslint/config-array/node_modules/brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "node_modules/@eslint/config-array/node_modules/minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "brace-expansion": "^1.1.7"
            },
            "engines": {
                "node": "*"
            }
        },
        "node_modules/@eslint/config-helpers": {
            "version": "0.2.2",
            "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.2.2.tgz",
            "integrity": "sha512-+GPzk8PlG0sPpzdU5ZvIRMPidzAnZDl/s9L+y13iodqvb8leL53bTannOrQ/Im7UkpsmFU5Ily5U60LWixnmLg==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            }
        },
        "node_modules/@eslint/core": {
            "version": "0.14.0",
            "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.14.0.tgz",
            "integrity": "sha512-qIbV0/JZr7iSDjqAc60IqbLdsj9GDt16xQtWD+B78d/HAlvysGdZZ6rpJHGAc2T0FQx1X6thsSPdnoiGKdNtdg==",
            "dev": true,
            "license": "Apache-2.0",
            "dependencies": {
                "@types/json-schema": "^7.0.15"
            },
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            }
        },
        "node_modules/@eslint/eslintrc": {
            "version": "3.3.1",
            "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
            "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ajv": "^6.12.4",
                "debug": "^4.3.2",
                "espree": "^10.0.1",
                "globals": "^14.0.0",
                "ignore": "^5.2.0",
                "import-fresh": "^3.2.1",
                "js-yaml": "^4.1.0",
                "minimatch": "^3.1.2",
                "strip-json-comments": "^3.1.1"
            },
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            },
            "funding": {
                "url": "https://opencollective.com/eslint"
            }
        },
        "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "node_modules/@eslint/eslintrc/node_modules/minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "brace-expansion": "^1.1.7"
            },
            "engines": {
                "node": "*"
            }
        },
        "node_modules/@eslint/js": {
            "version": "9.27.0",
            "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.27.0.tgz",
            "integrity": "sha512-G5JD9Tu5HJEu4z2Uo4aHY2sLV64B7CDMXxFzqzjl3NKd6RVzSXNoE80jk7Y0lJkTTkjiIhBAqmlYwjuBY3tvpA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            },
            "funding": {
                "url": "https://eslint.org/donate"
            }
        },
        "node_modules/@eslint/object-schema": {
            "version": "2.1.6",
            "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
            "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            }
        },
        "node_modules/@eslint/plugin-kit": {
            "version": "0.3.1",
            "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.1.tgz",
            "integrity": "sha512-0J+zgWxHN+xXONWIyPWKFMgVuJoZuGiIFu8yxk7RJjxkzpGmyja5wRFqZIVtjDVOQpV+Rw0iOAjYPE2eQyjr0w==",
            "dev": true,
            "license": "Apache-2.0",
            "dependencies": {
                "@eslint/core": "^0.14.0",
                "levn": "^0.4.1"
            },
            "engines": {
                "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
            }
        },
        "node_modules/@fastify/busboy": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-2.1.1.tgz",
            "integrity": "sha512-vBZP4NlzfOlerQTnba4aqZoMhE/a9HY7HRqoOPaETQcSQuWEIyZMHGfVu6w9wGtGK5fED5qRs2DteVCjOH60sA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=14"
            }
        },
        "node_modules/@foliojs-fork/fontkit": {
            "version": "1.9.2",
            "resolved": "https://registry.npmjs.org/@foliojs-fork/fontkit/-/fontkit-1.9.2.tgz",
            "integrity": "sha512-IfB5EiIb+GZk+77TRB86AHroVaqfq8JRFlUbz0WEwsInyCG0epX2tCPOy+UfaWPju30DeVoUAXfzWXmhn753KA==",
            "license": "MIT",
            "dependencies": {
                "@foliojs-fork/restructure": "^2.0.2",
                "brotli": "^1.2.0",
                "clone": "^1.0.4",
                "deep-equal": "^1.0.0",
                "dfa": "^1.2.0",
                "tiny-inflate": "^1.0.2",
                "unicode-properties": "^1.2.2",
                "unicode-trie": "^2.0.0"
            }
        },
        "node_modules/@foliojs-fork/linebreak": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/@foliojs-fork/linebreak/-/linebreak-1.1.2.tgz",
            "integrity": "sha512-ZPohpxxbuKNE0l/5iBJnOAfUaMACwvUIKCvqtWGKIMv1lPYoNjYXRfhi9FeeV9McBkBLxsMFWTVVhHJA8cyzvg==",
            "license": "MIT",
            "dependencies": {
                "base64-js": "1.3.1",
                "unicode-trie": "^2.0.0"
            }
        },
        "node_modules/@foliojs-fork/pdfkit": {
            "version": "0.15.3",
            "resolved": "https://registry.npmjs.org/@foliojs-fork/pdfkit/-/pdfkit-0.15.3.tgz",
            "integrity": "sha512-Obc0Wmy3bm7BINFVvPhcl2rnSSK61DQrlHU8aXnAqDk9LCjWdUOPwhgD8Ywz5VtuFjRxmVOM/kQ/XLIBjDvltw==",
            "license": "MIT",
            "dependencies": {
                "@foliojs-fork/fontkit": "^1.9.2",
                "@foliojs-fork/linebreak": "^1.1.1",
                "crypto-js": "^4.2.0",
                "jpeg-exif": "^1.1.4",
                "png-js": "^1.0.0"
            }
        },
        "node_modules/@foliojs-fork/restructure": {
            "version": "2.0.2",
            "resolved": "https://registry.npmjs.org/@foliojs-fork/restructure/-/restructure-2.0.2.tgz",
            "integrity": "sha512-59SgoZ3EXbkfSX7b63tsou/SDGzwUEK6MuB5sKqgVK1/XE0fxmpsOb9DQI8LXW3KfGnAjImCGhhEb7uPPAUVNA==",
            "license": "MIT"
        },
        "node_modules/@humanfs/core": {
            "version": "0.19.1",
            "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
            "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": ">=18.18.0"
            }
        },
        "node_modules/@humanfs/node": {
            "version": "0.16.6",
            "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
            "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
            "dev": true,
            "license": "Apache-2.0",
            "dependencies": {
                "@humanfs/core": "^0.19.1",
                "@humanwhocodes/retry": "^0.3.0"
            },
            "engines": {
                "node": ">=18.18.0"
            }
        },
        "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
            "version": "0.3.1",
            "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
            "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": ">=18.18"
            },
            "funding": {
                "type": "github",
                "url": "https://github.com/sponsors/nzakas"
            }
        },
        "node_modules/@humanwhocodes/module-importer": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
            "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": ">=12.22"
            },
            "funding": {
                "type": "github",
                "url": "https://github.com/sponsors/nzakas"
            }
        },
        "node_modules/@humanwhocodes/retry": {
            "version": "0.4.3",
            "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
            "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
            "dev": true,
            "license": "Apache-2.0",
            "engines": {
                "node": ">=18.18"
            },
            "funding": {
                "type": "github",
                "url": "https://github.com/sponsors/nzakas"
            }
        },
        "node_modules/@isaacs/cliui": {
            "version": "8.0.2",
            "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
            "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "string-width": "^5.1.2",
                "string-width-cjs": "npm:string-width@^4.2.0",
                "strip-ansi": "^7.0.1",
                "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
                "wrap-ansi": "^8.1.0",
                "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@isaacs/fs-minipass": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
            "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "minipass": "^7.0.4"
            },
            "engines": {
                "node": ">=18.0.0"
            }
        },
        "node_modules/@jridgewell/gen-mapping": {
            "version": "0.3.8",
            "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
            "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/set-array": "^1.2.1",
                "@jridgewell/sourcemap-codec": "^1.4.10",
                "@jridgewell/trace-mapping": "^0.3.24"
            },
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/resolve-uri": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
            "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/set-array": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
            "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/sourcemap-codec": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
            "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/@jridgewell/trace-mapping": {
            "version": "0.3.25",
            "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
            "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@jridgewell/resolve-uri": "^3.1.0",
                "@jridgewell/sourcemap-codec": "^1.4.14"
            }
        },
        "node_modules/@mapbox/node-pre-gyp": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-2.0.0.tgz",
            "integrity": "sha512-llMXd39jtP0HpQLVI37Bf1m2ADlEb35GYSh1SDSLsBhR+5iCxiNGlT31yqbNtVHygHAtMy6dWFERpU2JgufhPg==",
            "dev": true,
            "license": "BSD-3-Clause",
            "dependencies": {
                "consola": "^3.2.3",
                "detect-libc": "^2.0.0",
                "https-proxy-agent": "^7.0.5",
                "node-fetch": "^2.6.7",
                "nopt": "^8.0.0",
                "semver": "^7.5.3",
                "tar": "^7.4.0"
            },
            "bin": {
                "node-pre-gyp": "bin/node-pre-gyp"
            },
            "engines": {
                "node": ">=18"
            }
        },
        "node_modules/@napi-rs/wasm-runtime": {
            "version": "0.2.10",
            "resolved": "https://registry.npmjs.org/@napi-rs/wasm-runtime/-/wasm-runtime-0.2.10.tgz",
            "integrity": "sha512-bCsCyeZEwVErsGmyPNSzwfwFn4OdxBj0mmv6hOFucB/k81Ojdu68RbZdxYsRQUPc9l6SU5F/cG+bXgWs3oUgsQ==",
            "dev": true,
            "license": "MIT",
            "optional": true,
            "dependencies": {
                "@emnapi/core": "^1.4.3",
                "@emnapi/runtime": "^1.4.3",
                "@tybys/wasm-util": "^0.9.0"
            }
        },
        "node_modules/@next/env": {
            "version": "13.5.11",
            "resolved": "https://registry.npmjs.org/@next/env/-/env-13.5.11.tgz",
            "integrity": "sha512-fbb2C7HChgM7CemdCY+y3N1n8pcTKdqtQLbC7/EQtPdLvlMUT9JX/dBYl8MMZAtYG4uVMyPFHXckb68q/NRwqg==",
            "license": "MIT"
        },
        "node_modules/@next/eslint-plugin-next": {
            "version": "15.3.2",
            "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.3.2.tgz",
            "integrity": "sha512-ijVRTXBgnHT33aWnDtmlG+LJD+5vhc9AKTJPquGG5NKXjpKNjc62woIhFtrAcWdBobt8kqjCoaJ0q6sDQoX7aQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "fast-glob": "3.3.1"
            }
        },
        "node_modules/@next/eslint-plugin-next/node_modules/fast-glob": {
            "version": "3.3.1",
            "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
            "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@nodelib/fs.stat": "^2.0.2",
                "@nodelib/fs.walk": "^1.2.3",
                "glob-parent": "^5.1.2",
                "merge2": "^1.3.0",
                "micromatch": "^4.0.4"
            },
            "engines": {
                "node": ">=8.6.0"
            }
        },
        "node_modules/@next/eslint-plugin-next/node_modules/glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "is-glob": "^4.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/@next/swc-darwin-arm64": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-13.5.9.tgz",
            "integrity": "sha512-pVyd8/1y1l5atQRvOaLOvfbmRwefxLhqQOzYo/M7FQ5eaRwA1+wuCn7t39VwEgDd7Aw1+AIWwd+MURXUeXhwDw==",
            "cpu": [
                "arm64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-darwin-x64": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-13.5.9.tgz",
            "integrity": "sha512-DwdeJqP7v8wmoyTWPbPVodTwCybBZa02xjSJ6YQFIFZFZ7dFgrieKW4Eo0GoIcOJq5+JxkQyejmI+8zwDp3pwA==",
            "cpu": [
                "x64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-linux-arm64-gnu": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-13.5.9.tgz",
            "integrity": "sha512-wdQsKsIsGSNdFojvjW3Ozrh8Q00+GqL3wTaMjDkQxVtRbAqfFBtrLPO0IuWChVUP2UeuQcHpVeUvu0YgOP00+g==",
            "cpu": [
                "arm64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-linux-arm64-musl": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-13.5.9.tgz",
            "integrity": "sha512-6VpS+bodQqzOeCwGxoimlRoosiWlSc0C224I7SQWJZoyJuT1ChNCo+45QQH+/GtbR/s7nhaUqmiHdzZC9TXnXA==",
            "cpu": [
                "arm64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-linux-x64-gnu": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-13.5.9.tgz",
            "integrity": "sha512-XxG3yj61WDd28NA8gFASIR+2viQaYZEFQagEodhI/R49gXWnYhiflTeeEmCn7Vgnxa/OfK81h1gvhUZ66lozpw==",
            "cpu": [
                "x64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-linux-x64-musl": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-13.5.9.tgz",
            "integrity": "sha512-/dnscWqfO3+U8asd+Fc6dwL2l9AZDl7eKtPNKW8mKLh4Y4wOpjJiamhe8Dx+D+Oq0GYVjuW0WwjIxYWVozt2bA==",
            "cpu": [
                "x64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "linux"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-win32-arm64-msvc": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-13.5.9.tgz",
            "integrity": "sha512-T/iPnyurOK5a4HRUcxAlss8uzoEf5h9tkd+W2dSWAfzxv8WLKlUgbfk+DH43JY3Gc2xK5URLuXrxDZ2mGfk/jw==",
            "cpu": [
                "arm64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-win32-ia32-msvc": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-win32-ia32-msvc/-/swc-win32-ia32-msvc-13.5.9.tgz",
            "integrity": "sha512-BLiPKJomaPrTAb7ykjA0LPcuuNMLDVK177Z1xe0nAem33+9FIayU4k/OWrtSn9SAJW/U60+1hoey5z+KCHdRLQ==",
            "cpu": [
                "ia32"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@next/swc-win32-x64-msvc": {
            "version": "13.5.9",
            "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-13.5.9.tgz",
            "integrity": "sha512-/72/dZfjXXNY/u+n8gqZDjI6rxKMpYsgBBYNZKWOQw0BpBF7WCnPflRy3ZtvQ2+IYI3ZH2bPyj7K+6a6wNk90Q==",
            "cpu": [
                "x64"
            ],
            "license": "MIT",
            "optional": true,
            "os": [
                "win32"
            ],
            "engines": {
                "node": ">= 10"
            }
        },
        "node_modules/@nodelib/fs.scandir": {
            "version": "2.1.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
            "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@nodelib/fs.stat": "2.0.5",
                "run-parallel": "^1.1.9"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nodelib/fs.stat": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
            "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nodelib/fs.walk": {
            "version": "1.2.8",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
            "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@nodelib/fs.scandir": "2.1.5",
                "fastq": "^1.6.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nolyfill/is-core-module": {
            "version": "1.0.39",
            "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
            "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=12.4.0"
            }
        },
        "node_modules/@pdf-lib/standard-fonts": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/@pdf-lib/standard-fonts/-/standard-fonts-1.0.0.tgz",
            "integrity": "sha512-hU30BK9IUN/su0Mn9VdlVKsWBS6GyhVfqjwl1FjZN4TxP6cCw0jP2w7V3Hf5uX7M0AZJ16vey9yE0ny7Sa59ZA==",
            "license": "MIT",
            "dependencies": {
                "pako": "^1.0.6"
            }
        },
        "node_modules/@pdf-lib/standard-fonts/node_modules/pako": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
            "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
            "license": "(MIT AND Zlib)"
        },
        "node_modules/@pdf-lib/upng": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/@pdf-lib/upng/-/upng-1.0.1.tgz",
            "integrity": "sha512-dQK2FUMQtowVP00mtIksrlZhdFXQZPC+taih1q4CvPZ5vqdxR/LKBaFg0oAfzd1GlHZXXSPdQfzQnt+ViGvEIQ==",
            "license": "MIT",
            "dependencies": {
                "pako": "^1.0.10"
            }
        },
        "node_modules/@pdf-lib/upng/node_modules/pako": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
            "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
            "license": "(MIT AND Zlib)"
        },
        "node_modules/@pkgjs/parseargs": {
            "version": "0.11.0",
            "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
            "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
            "dev": true,
            "license": "MIT",
            "optional": true,
            "engines": {
                "node": ">=14"
            }
        },
        "node_modules/@react-email/render": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/@react-email/render/-/render-1.0.6.tgz",
            "integrity": "sha512-zNueW5Wn/4jNC1c5LFgXzbUdv5Lhms+FWjOvWAhal7gx5YVf0q6dPJ0dnR70+ifo59gcMLwCZEaTS9EEuUhKvQ==",
            "license": "MIT",
            "dependencies": {
                "html-to-text": "9.0.5",
                "prettier": "3.5.3",
                "react-promise-suspense": "0.3.4"
            },
            "engines": {
                "node": ">=18.0.0"
            },
            "peerDependencies": {
                "react": "^18.0 || ^19.0 || ^19.0.0-rc",
                "react-dom": "^18.0 || ^19.0 || ^19.0.0-rc"
            }
        },
        "node_modules/@rollup/pluginutils": {
            "version": "5.1.4",
            "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.1.4.tgz",
            "integrity": "sha512-USm05zrsFxYLPdWWq+K3STlWiT/3ELn3RcV5hJMghpeAIhxfsUIg6mt12CBJBInWMV4VneoV7SfGv8xIwo2qNQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "@types/estree": "^1.0.0",
                "estree-walker": "^2.0.2",
                "picomatch": "^4.0.2"
            },
            "engines": {
                "node": ">=14.0.0"
            },
            "peerDependencies": {
                "rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
            },
            "peerDependenciesMeta": {
                "rollup": {
                    "optional": true
                }
            }
        },
        "node_modules/@rollup/pluginutils/node_modules/picomatch": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
            "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/jonschlinkert"
            }
        },
        "node_modules/@rtsao/scc": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
            "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/@rushstack/eslint-patch": {
            "version": "1.11.0",
            "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.11.0.tgz",
            "integrity": "sha512-zxnHvoMQVqewTJr/W4pKjF0bMGiKJv1WX7bSrkl46Hg0QjESbzBROWK0Wg4RphzSOS5Jiy7eFimmM3UgMrMZbQ==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/@selderee/plugin-htmlparser2": {
            "version": "0.11.0",
            "resolved": "https://registry.npmjs.org/@selderee/plugin-htmlparser2/-/plugin-htmlparser2-0.11.0.tgz",
            "integrity": "sha512-P33hHGdldxGabLFjPPpaTxVolMrzrcegejx+0GxjrIb9Zv48D8yAIA/QTDR2dFl7Uz7urX8aX6+5bCZslr+gWQ==",
            "license": "MIT",
            "dependencies": {
                "domhandler": "^5.0.3",
                "selderee": "^0.11.0"
            },
            "funding": {
                "url": "https://ko-fi.com/killymxi"
            }
        },
        "node_modules/@sinclair/typebox": {

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/package.json -----
{
    "name": "gr-gabriella-clean",
    "version": "1.0.0",
    "private": true,
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "@supabase/supabase-js": "^2.49.8",
        "bufferutil": "^4.0.9",
        "i18n-iso-countries": "^7.14.0",
        "jspdf": "^3.0.1",
        "jspdf-autotable": "^5.0.2",
        "lucide-react": "^0.511.0",
        "next": "^13.5.11",
        "pdf-lib": "^1.17.1",
        "pdfmake": "^0.2.20",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "resend": "^4.5.1",
        "utf-8-validate": "^6.0.5"
    },
    "devDependencies": {
        "@tailwindcss/postcss": "^4.1.7",
        "@types/node": "^20.11.30",
        "@types/react": "^18.2.42",
        "autoprefixer": "^10.4.21",
        "eslint": "^9.27.0",
        "eslint-config-next": "^15.3.2",
        "postcss": "^8.5.3",
        "postcss-loader": "^8.1.1",
        "tailwindcss": "3.3",
        "typescript": "^5.3.3",
        "vercel": "^43.1.0"
    }
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/postcss.config.js -----
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/public/data/clienti.json -----
[]

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/resend api key .txt -----
re_PTVortid_3hwTPYBPbt7i8BfgCp4UDjVK


Paypal 

OLD
Client id: ARJLhEOKBovrYIWxStFGSsPaJUNUdnN-vHfTUInduWUR_HWpzqqaTPeIc3QIEFufnfoYOqLM-MYM-zYf

Secret key 1: EJSxQsBbkzpxptJyuBb8bCeUCy4jBYkAKWKDbyLAY5fHvMF_QOR4hIaqYLKr5PHOa93PCDKoW5V3cugy

NEW 
CLIENT: AVHqSZU8bVMmQdhJ3Cfij1q9wQGv6XkfZOeGccftRqd08RYgppGute1NYrEZzzHJuomw4l5Cjb4bIv-H
Secret key 1: EISpRWtU5jbQECpWNcrV3etEE6rW-UniBqUko-vizF4cFSPb9WVUcXUUjIyhcFdgtnvv7tw_9ejxxrOw
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/snapshot_g-rgabriellaromeo.txt -----
================= STRUTTURA FILE =================
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/README.md
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/404/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ClientProviders.jsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/accessori/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/clienti/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/[id]/page.tsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/[id]/tsconfig.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/data/products.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/edit/id/page.tsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy 2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/inventario/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/login/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/login/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/offerte/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page copy5.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/ordini/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy10.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy5.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy6.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy7.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy8.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page copy9.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/spedizioni/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/vendite/VenditePageContent.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/admin/vendite/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/admin-log/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/auth/login.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/auth/register.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/route copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/email/send-offerte.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/fattura/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/get-ordine/route copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/get-ordine/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/[id]/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/rou.ts
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/products/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-ordini/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-product/route copy.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/save-product/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/upload-image/route copy.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/api/upload-image/route.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ar/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page copy5.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/brand/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy12.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy13.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy14.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy15.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy16.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy17.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy18.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy19.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy20.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy21.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy22.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy23.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy24.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy25.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy26.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy27.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page copy28.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/checkout/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/de/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/en/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/es/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/eventi/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/fr/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy 2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy18.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy19.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy20.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy21.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page copy22.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/gioielli/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/globals.css
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/it/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ja/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/layout.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/authConfig.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/citta.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/formatEuro.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/paesi.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/lib/supabaseClient.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/offerte/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ordine-confermato/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ordine-confermato/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy10.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy11.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy12.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy13.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy14.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy15.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page copy16.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pagamento/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/page copy1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/pageprotected.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/search/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/servizi/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/zh/page.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/AuthWrapper.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtons.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtons_v0.1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/CategoryButtonsxsitogr.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/FlagLanguageSwitcher.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/FlagLanguageSwitcher_v0.1.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/LoginSidebar.jsx
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/MobileMenu copy2.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/MobileMenu.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/SearchIcon.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu copy3.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu copy4.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/TopRightMenu.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy23.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy24.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy25.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy26.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy27.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy28.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy29.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy30.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy31.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy32.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy33.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy34.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu copy35.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenu.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/components/UserMenuprotected.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/file_tree.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/inizializzazione di localhost:3000.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/istruzioni_chat.md
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/jsconfig.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/next-env.d.ts
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/package-lock.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/package.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/postcss.config.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/public/data/clienti.json
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/resend api key .txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/snapshot_g-rgabriellaromeo.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/struttura_progetto.txt
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/tailwind.config.js
/Users/gianluigigrassi/Desktop/g-rgabriellaromeo/tsconfig.json

================= CONTENUTO DEI FILE =================

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/README.md -----
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/404/page.js -----
export default function NotFoundPage() {
    return (
      <main style={{ padding: '2rem', backgroundColor: 'black', color: 'white', textAlign: 'center' }}>
        <h1 style={{ fontSize: '2rem' }}>😕 Pagina non trovata</h1>
        <p>La pagina che cerchi non esiste.</p>
      </main>
    );
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/ClientProviders.jsx -----
'use client';

import { useState } from 'react';
import MobileMenu from '../components/MobileMenu';
import TopRightMenu from '../components/TopRightMenu';
import LoginSidebar from '../components/LoginSidebar';

export default function ClientProviders({ children }) {
  const [loginOpen, setLoginOpen] = useState(false);

  return (
    <>
      <MobileMenu />
      <TopRightMenu />
      <LoginSidebar isOpen={loginOpen} onClose={() => setLoginOpen(false)} />

      <button
        onClick={() => setLoginOpen(true)}
        className="fixed top-4 right-20 z-50 bg-white text-black px-3 py-1 rounded text-sm"
      >
        👤 Login
      </button>

      {children}
    </>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy1.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AbbigliamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupImg, setPopupImg] = useState(null);
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: { titolo: 'GALLERIA ABBIGLIAMENTO', sottotutte: 'Tutte le sottocategorie', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', venduto: 'venduto', erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.', visualizzaPolicy: 'Visualizza Policy', accetta: 'Sono d\'accordo con la policy per la produzione', continua: 'Continua con l’ordine', rimuovi: 'Rimuovi', policyTitolo: 'Policy per la produzione', carrello: 'Carrello' },
    en: { titolo: 'FASHION WEAR', sottotutte: 'All subcategories', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', venduto: 'sold', erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.', visualizzaPolicy: 'View Policy', accetta: 'I agree with the production policy', continua: 'Continue with order', rimuovi: 'Remove', policyTitolo: 'Production Policy', carrello: 'Cart' },
    fr: { titolo: 'VÊTEMENTS', sottotutte: 'Toutes les sous-catégories', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', venduto: 'vendu', erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.', visualizzaPolicy: 'Voir la politique', accetta: 'J’accepte la politique de production', continua: 'Continuer la commande', rimuovi: 'Supprimer', policyTitolo: 'Politique de production', carrello: 'Panier' },
    de: { titolo: 'BEKLEIDUNG', sottotutte: 'Alle Unterkategorien', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', venduto: 'ausverkauft', erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.', visualizzaPolicy: 'Richtlinie anzeigen', accetta: 'Ich stimme der Produktionsrichtlinie zu', continua: 'Bestellung fortsetzen', rimuovi: 'Entfernen', policyTitolo: 'Produktionsrichtlinie', carrello: 'Warenkorb' },
    es: { titolo: 'ROPA', sottotutte: 'Todas las subcategorías', aggiungi: 'Agregar al carrito', checkout: 'Pagar', indietro: 'Atrás', venduto: 'vendido', erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.', visualizzaPolicy: 'Ver política', accetta: 'Acepto la política de producción', continua: 'Continuar pedido', rimuovi: 'Eliminar', policyTitolo: 'Política de producción', carrello: 'Carrito' },
    ar: { titolo: 'ملابس', sottotutte: 'جميع الفئات الفرعية', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'عودة', venduto: 'تم البيع', erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.', visualizzaPolicy: 'عرض السياسة', accetta: 'أوافق على سياسة الإنتاج', continua: 'متابعة الطلب', rimuovi: 'إزالة', policyTitolo: 'سياسة الإنتاج', carrello: 'سلة التسوق' },
    zh: { titolo: '服饰', sottotutte: '所有子类别', aggiungi: '加入购物车', checkout: '结账', indietro: '返回', venduto: '售罄', erroreQuantita: '请求数量超出库存！请查看我们的生产政策。', visualizzaPolicy: '查看政策', accetta: '我同意生产政策', continua: '继续下单', rimuovi: '移除', policyTitolo: '生产政策', carrello: '购物车' },
    ja: { titolo: 'ファッションウェア', sottotutte: 'すべてのサブカテゴリ', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', venduto: '売切れ', erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。', visualizzaPolicy: 'ポリシーを見る', accetta: '生産ポリシーに同意します', continua: '注文を続ける', rimuovi: '削除', policyTitolo: '生産ポリシー', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    abiti: { it: 'Abiti', en: 'Dresses', fr: 'Robes', de: 'Kleider', es: 'Vestidos', ar: 'فساتين', zh: '连衣裙', ja: 'ドレス' },
    'camicie top': { it: 'Camicie Top', en: 'Shirts & Tops', fr: 'Chemises & Tops', de: 'Hemden & Tops', es: 'Camisas y Tops', ar: 'قمصان وبلوزات', zh: '衬衫和上衣', ja: 'シャツとトップス' },
    pantaloni: { it: 'Pantaloni', en: 'Trousers', fr: 'Pantalons', de: 'Hosen', es: 'Pantalones', ar: 'سراويل', zh: '裤子', ja: 'ズボン' },
    gonne: { it: 'Gonne', en: 'Skirts', fr: 'Jupes', de: 'Röcke', es: 'Faldas', ar: 'تنانير', zh: '裙子', ja: 'スカート' },
    'giacche e cappotti': { it: 'Giacche e Cappotti', en: 'Jackets & Coats', fr: 'Vestes & Manteaux', de: 'Jacken & Mäntel', es: 'Chaquetas y Abrigos', ar: 'سترات ومعاطف', zh: '夹克和大衣', ja: 'ジャケットとコート' },
    abaye: { it: 'Abaye', en: 'Abayas', fr: 'Abayas', de: 'Abayas', es: 'Abayas', ar: 'عبايات', zh: '阿拜亚', ja: 'アバヤ' },
    caftani: { it: 'Caftani', en: 'Kaftans', fr: 'Caftans', de: 'Kaftane', es: 'Caftanes', ar: 'قفاطين', zh: '开襟长袍', ja: 'カフタン' },
    'abbigliamento da mare': { it: 'Abbigliamento da mare', en: 'Beachwear', fr: 'Tenues de plage', de: 'Badebekleidung', es: 'Ropa de playa', ar: 'ملابس بحر', zh: '泳装', ja: 'ビーチウェア' }
  };
  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'abbigliamento')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };

    fetchProdotti();
  }, []);

  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };
  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', textAlign: 'center', marginBottom: '2rem' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{ display: 'flex', gap: '1rem', overflowX: 'auto', padding: '1rem' }}>
        {filtrati.map(prodotto => {
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.65rem',
              textAlign: 'center',
              flex: '0 0 auto',
              width: '160px',
              scrollSnapAlign: 'start',
              position: 'relative'
            }}>
              {prodotto.offerta && (
                <div style={{
                  position: 'absolute',
                  top: '6px',
                  left: '6px',
                  backgroundColor: 'rgba(255, 0, 0, 0.6)',
                  color: 'white',
                  padding: '2px 4px',
                  borderRadius: '3px',
                  fontSize: '0.5rem',
                  transform: 'rotate(-12deg)',
                  fontWeight: 'bold',
                }}>✨ OFFERTA</div>
              )}
              {prodotto.quantita === 0 && (
                <div style={{
                  position: 'absolute',
                  top: '6px',
                  right: '6px',
                  backgroundColor: 'rgba(255, 0, 0, 0.2)',
                  color: 'red',
                  padding: '2px 4px',
                  fontSize: '0.5rem',
                  borderRadius: '3px',
                  transform: 'rotate(-12deg)',
                  fontWeight: 'bold'
                }}>
                  {t('venduto')}
                </div>
              )}
              <img
                src={`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`}
                alt={prodotto.nome}
                style={{ width: '100%', height: 'auto', maxHeight: '80px', objectFit: 'contain', borderRadius: '4px', marginBottom: '0.3rem', cursor: 'pointer' }}
                onClick={() => setPopupImg(`https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/${prodotto.immagine}`)}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              {prodotto.offerta ? (
                <p style={{ fontFamily: 'Arial' }}>
                  <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                    {'\u20AC'} {prezzoNum.toFixed(1)}
                  </span>
                  <span style={{ color: 'red', fontWeight: 'bold' }}>
                    {'\u20AC'} {prezzoScontato.toFixed(1)} (-{scontoNum}%)
                  </span>
                </p>
              ) : (
                <p style={{ fontFamily: 'Arial' }}>
                  {'\u20AC'} {prezzoNum.toFixed(1)}
                </p>
              )}
              <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem' }}>
                <button onClick={() => cambiaQuantita(prodotto.id, -1)} style={{ border: 'none', background: 'none', fontSize: '1rem' }}>–</button>
                <input type="text" value={quantita[prodotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
                <button onClick={() => cambiaQuantita(prodotto.id, 1)} style={{ border: 'none', background: 'none', fontSize: '1rem' }}>+</button>
              </div>
              <button onClick={() => aggiungiAlCarrello(prodotto)} style={{ marginTop: '0.3rem', padding: '0.3rem', fontSize: '0.65rem', backgroundColor: '#333', color: 'white', borderRadius: '4px', border: 'none' }}>
                {t('aggiungi')}
              </button>
            </div>
          );
        })}
      </div>
      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>

          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>
            );
          })}
          <button
            onClick={() => router.push(`/checkout?lang=${lang}`)}
            style={{
              marginTop: '1rem',
              width: '100%',
              backgroundColor: 'green',
              color: 'white',
              border: 'none',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            {t('checkout')}
          </button>
        </div>
      )}

      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={() => router.push(`/?lang=${lang}`)}
          style={{
            marginTop: '1rem',
            backgroundColor: '#444',
            color: 'white',
            padding: '0.6rem 1.2rem',
            border: 'none',
            borderRadius: '8px',
            fontSize: '0.95rem',
            cursor: 'pointer'
          }}
        >
          {t('indietro')}
        </button>
      </div>

      {erroreQuantita && (
        <div style={{
          marginTop: '1rem',
          backgroundColor: '#ffcccc',
          color: 'red',
          padding: '1rem',
          borderRadius: '6px',
          fontSize: '0.85rem',
          maxWidth: '420px',
          textAlign: 'center',
          marginLeft: 'auto',
          marginRight: 'auto',
          position: 'relative'
        }}>
          <button
            onClick={() => setErroreQuantita(false)}
            style={{
              position: 'absolute',
              top: '5px',
              right: '10px',
              background: 'none',
              border: 'none',
              color: 'red',
              fontSize: '1rem',
              cursor: 'pointer'
            }}
          >
            ✕
          </button>
          {t('erroreQuantita')}
          <div style={{ marginTop: '0.5rem' }}>
            <button
              onClick={() => setShowPolicy(true)}
              style={{
                backgroundColor: '#900',
                color: 'white',
                padding: '0.3rem 0.8rem',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '0.75rem'
              }}
            >
              {t('visualizzaPolicy')}
            </button>
          </div>
        </div>
      )}

      {showPolicy && (
        <div style={{
          position: 'fixed',
          top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            color: 'black',
            padding: '2rem',
            borderRadius: '10px',
            width: '90%',
            maxWidth: '400px',
            textAlign: 'center',
            position: 'relative'
          }}>
            <button onClick={() => setShowPolicy(false)} style={{
              position: 'absolute',
              top: '10px',
              right: '10px',
              background: 'none',
              border: 'none',
              fontSize: '1.2rem',
              cursor: 'pointer'
            }}>✕</button>
            <h2 style={{ marginBottom: '1rem' }}>{t('policyTitolo')}</h2>
            <label style={{ fontSize: '0.9rem' }}>
              <input
                type="checkbox"
                checked={accettaPolicy}
                onChange={() => setAccettaPolicy(!accettaPolicy)}
                style={{ marginRight: '0.5rem' }}
              />
              {t('accetta')}
            </label>
            <div style={{ marginTop: '1rem' }}>
              <button
                disabled={!accettaPolicy}
                onClick={() => {
                  setShowPolicy(false);
                  setErroreQuantita(false);
                  setAccettaPolicy(false);
                  const prodottoDaAggiungere = prodotti.find(p => quantita[p.id] > p.quantita);
                  if (prodottoDaAggiungere) {
                    const qta = quantita[prodottoDaAggiungere.id];
                    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodottoDaAggiungere)];
                    setCarrello(nuovoCarrello);
                    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
                  }
                }}
                style={{
                  backgroundColor: accettaPolicy ? 'green' : 'gray',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: accettaPolicy ? 'pointer' : 'not-allowed',
                  marginTop: '1rem',
                  fontSize: '0.9rem'
                }}
              >
                {t('continua')}
              </button>
            </div>
          </div>
        </div>
      )}

      {popupImg && (
        <div
          onClick={() => setPopupImg(null)}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.8)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
        >
          <img
            src={popupImg}
            alt="popup"
            style={{
              maxHeight: '90%',
              maxWidth: '90%',
              borderRadius: '10px'
            }}
          />
        </div>
      )}
    </main>
  );
}

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/app/abbigliamento/page copy2.js -----
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { supabase } from '../lib/supabaseClient';

export default function AbbigliamentoPage() {
  const params = useSearchParams();
  const lang = params.get('lang') || 'it';
  const router = useRouter();

  const [prodotti, setProdotti] = useState([]);
  const [quantita, setQuantita] = useState({});
  const [sottocategoriaSelezionata, setSottocategoriaSelezionata] = useState('');
  const [carrello, setCarrello] = useState([]);
  const [popupProdotto, setPopupProdotto] = useState(null);
  const [immagineAttiva, setImmagineAttiva] = useState('');
  const [showPolicy, setShowPolicy] = useState(false);
  const [erroreQuantita, setErroreQuantita] = useState(false);
  const [accettaPolicy, setAccettaPolicy] = useState(false);

  const traduzioni = {
    it: { titolo: 'GALLERIA ABBIGLIAMENTO', sottotutte: 'Tutte le sottocategorie', aggiungi: 'Aggiungi al carrello', checkout: 'Check-out', indietro: 'Indietro', venduto: 'venduto', erroreQuantita: 'La quantità richiesta è superiore alla disponibilità! Per confermare comunque, controlla la nostra policy per la produzione.', visualizzaPolicy: 'Visualizza Policy', accetta: 'Sono d\'accordo con la policy per la produzione', continua: 'Continua con l’ordine', rimuovi: 'Rimuovi', policyTitolo: 'Policy per la produzione', carrello: 'Carrello' },
    en: { titolo: 'FASHION WEAR', sottotutte: 'All subcategories', aggiungi: 'Add to cart', checkout: 'Checkout', indietro: 'Back', venduto: 'sold', erroreQuantita: 'Requested quantity exceeds available stock! To confirm anyway, check our production policy.', visualizzaPolicy: 'View Policy', accetta: 'I agree with the production policy', continua: 'Continue with order', rimuovi: 'Remove', policyTitolo: 'Production Policy', carrello: 'Cart' },
    fr: { titolo: 'VÊTEMENTS', sottotutte: 'Toutes les sous-catégories', aggiungi: 'Ajouter au panier', checkout: 'Paiement', indietro: 'Retour', venduto: 'vendu', erroreQuantita: 'La quantité demandée dépasse le stock! Consultez notre politique de production.', visualizzaPolicy: 'Voir la politique', accetta: 'J’accepte la politique de production', continua: 'Continuer la commande', rimuovi: 'Supprimer', policyTitolo: 'Politique de production', carrello: 'Panier' },
    de: { titolo: 'BEKLEIDUNG', sottotutte: 'Alle Unterkategorien', aggiungi: 'In den Warenkorb', checkout: 'Zur Kasse', indietro: 'Zurück', venduto: 'ausverkauft', erroreQuantita: 'Angeforderte Menge übersteigt den Bestand! Prüfen Sie unsere Produktionsrichtlinie.', visualizzaPolicy: 'Richtlinie anzeigen', accetta: 'Ich stimme der Produktionsrichtlinie zu', continua: 'Bestellung fortsetzen', rimuovi: 'Entfernen', policyTitolo: 'Produktionsrichtlinie', carrello: 'Warenkorb' },
    es: { titolo: 'ROPA', sottotutte: 'Todas las subcategorías', aggiungi: 'Agregar al carrito', checkout: 'Pagar', indietro: 'Atrás', venduto: 'vendido', erroreQuantita: '¡Cantidad solicitada supera el stock! Revisa nuestra política de producción.', visualizzaPolicy: 'Ver política', accetta: 'Acepto la política de producción', continua: 'Continuar pedido', rimuovi: 'Eliminar', policyTitolo: 'Política de producción', carrello: 'Carrito' },
    ar: { titolo: 'ملابس', sottotutte: 'جميع الفئات الفرعية', aggiungi: 'أضف إلى السلة', checkout: 'الدفع', indietro: 'عودة', venduto: 'تم البيع', erroreQuantita: 'الكمية المطلوبة تتجاوز المتوفر! تحقق من سياسة الإنتاج.', visualizzaPolicy: 'عرض السياسة', accetta: 'أوافق على سياسة الإنتاج', continua: 'متابعة الطلب', rimuovi: 'إزالة', policyTitolo: 'سياسة الإنتاج', carrello: 'سلة التسوق' },
    zh: { titolo: '服饰', sottotutte: '所有子类别', aggiungi: '加入购物车', checkout: '结账', indietro: '返回', venduto: '售罄', erroreQuantita: '请求数量超出库存！请查看我们的生产政策。', visualizzaPolicy: '查看政策', accetta: '我同意生产政策', continua: '继续下单', rimuovi: '移除', policyTitolo: '生产政策', carrello: '购物车' },
    ja: { titolo: 'ファッションウェア', sottotutte: 'すべてのサブカテゴリ', aggiungi: 'カートに追加', checkout: 'チェックアウト', indietro: '戻る', venduto: '売切れ', erroreQuantita: 'リクエスト数が在庫を超えています。生産ポリシーをご確認ください。', visualizzaPolicy: 'ポリシーを見る', accetta: '生産ポリシーに同意します', continua: '注文を続ける', rimuovi: '削除', policyTitolo: '生産ポリシー', carrello: 'カート' }
  };

  const t = (key) => traduzioni[lang]?.[key] || traduzioni['it'][key] || key;

  const sottocategorie = {
    abiti: { it: 'Abiti', en: 'Dresses', fr: 'Robes', de: 'Kleider', es: 'Vestidos', ar: 'فساتين', zh: '连衣裙', ja: 'ドレス' },
    'camicie top': { it: 'Camicie Top', en: 'Shirts & Tops', fr: 'Chemises & Tops', de: 'Hemden & Tops', es: 'Camisas y Tops', ar: 'قمصان وبلوزات', zh: '衬衫和上衣', ja: 'シャツとトップス' },
    pantaloni: { it: 'Pantaloni', en: 'Trousers', fr: 'Pantalons', de: 'Hosen', es: 'Pantalones', ar: 'سراويل', zh: '裤子', ja: 'ズボン' },
    gonne: { it: 'Gonne', en: 'Skirts', fr: 'Jupes', de: 'Röcke', es: 'Faldas', ar: 'تنانير', zh: '裙子', ja: 'スカート' },
    'giacche e cappotti': { it: 'Giacche e Cappotti', en: 'Jackets & Coats', fr: 'Vestes & Manteaux', de: 'Jacken & Mäntel', es: 'Chaquetas y Abrigos', ar: 'سترات ومعاطف', zh: '夹克和大衣', ja: 'ジャケットとコート' },
    abaye: { it: 'Abaye', en: 'Abayas', fr: 'Abayas', de: 'Abayas', es: 'Abayas', ar: 'عبايات', zh: '阿拜亚', ja: 'アバヤ' },
    caftani: { it: 'Caftani', en: 'Kaftans', fr: 'Caftans', de: 'Kaftane', es: 'Caftanes', ar: 'قفاطين', zh: '开襟长袍', ja: 'カフタン' },
    'abbigliamento da mare': { it: 'Abbigliamento da mare', en: 'Beachwear', fr: 'Tenues de plage', de: 'Badebekleidung', es: 'Ropa de playa', ar: 'ملابس بحر', zh: '泳装', ja: 'ビーチウェア' }
  };

  useEffect(() => {
    const fetchProdotti = async () => {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('categoria', 'abbigliamento')
        .order('created_at', { ascending: false });

      if (!error) {
        setProdotti(data);
        const iniziali = {};
        data.forEach(p => { iniziali[p.id] = 1 });
        setQuantita(iniziali);
      }
    };
    fetchProdotti();
  }, []);
  const filtrati = prodotti.filter(p =>
    !sottocategoriaSelezionata || p.sottocategoria === sottocategoriaSelezionata
  );

  const cambiaQuantita = (id, delta) => {
    setQuantita(prev => ({
      ...prev,
      [id]: Math.max(1, (prev[id] || 1) + delta)
    }));
  };

  const aggiungiAlCarrello = (prodotto) => {
    const qta = quantita[prodotto.id] || 1;
    if (prodotto.quantita !== null && prodotto.quantita !== undefined && qta > prodotto.quantita) {
      setErroreQuantita(true);
      return;
    }
    const nuovoCarrello = [...carrello, ...Array(qta).fill(prodotto)];
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const rimuoviDalCarrello = (prodottoId) => {
    const nuovoCarrello = carrello.filter(p => p.id !== prodottoId);
    setCarrello(nuovoCarrello);
    localStorage.setItem('carrello', JSON.stringify(nuovoCarrello));
  };

  const baseUrl = 'https://xmiaatzxskmuxyzsvyjn.supabase.co/storage/v1/object/public/immagini/';

  return (
    <main style={{ backgroundColor: 'black', color: 'white', padding: '2rem' }}>
      <h1 style={{ fontSize: '2rem', textAlign: 'center', marginBottom: '2rem' }}>{t('titolo')}</h1>

      <div style={{ textAlign: 'center', marginBottom: '2rem' }}>
        <select
          value={sottocategoriaSelezionata}
          onChange={e => setSottocategoriaSelezionata(e.target.value)}
          style={{
            minWidth: '250px',
            padding: '0.5rem',
            fontSize: '1rem',
            backgroundColor: '#000',
            color: '#fff',
            border: '1px solid #fff',
            borderRadius: '6px'
          }}
        >
          <option value="">{t('sottotutte')}</option>
          {Object.entries(sottocategorie).map(([key, trad]) => (
            <option key={key} value={key}>
              {trad[lang] || trad.it}
            </option>
          ))}
        </select>
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
        gap: '1rem'
      }}>
        {filtrati.map(prodotto => {
          const immagini = prodotto.immagine.split(',').map(img => img.trim());
          const prezzoNum = Number(prodotto.prezzo);
          const scontoNum = Number(prodotto.sconto || 0);
          const prezzoScontato = Math.round((prezzoNum - (prezzoNum * scontoNum / 100)) * 10) / 10;

          return (
            <div key={prodotto.id} style={{
              backgroundColor: 'white',
              color: 'black',
              padding: '0.5rem',
              borderRadius: '6px',
              fontSize: '0.75rem',
              textAlign: 'center'
            }}>
              <img
                src={baseUrl + immagini[0]}
                alt={prodotto.nome}
                style={{
                  width: '100%',
                  height: 'auto',
                  objectFit: 'cover',
                  cursor: 'pointer',
                  borderRadius: '4px'
                }}
                onClick={() => {
                  setPopupProdotto(prodotto);
                  setImmagineAttiva(immagini[0]);
                }}
              />
              <strong>{prodotto.nome}</strong>
              <p>{prodotto.taglia}</p>
              <p style={{ fontFamily: 'Arial' }}>
                {prodotto.offerta ? (
                  <>
                    <span style={{ textDecoration: 'line-through', color: 'gray', marginRight: '4px' }}>
                      {'\u20AC'} {prezzoNum.toFixed(1)}
                    </span>
                    <span style={{ color: 'red', fontWeight: 'bold' }}>
                      {'\u20AC'} {prezzoScontato.toFixed(1)} (-{scontoNum}%)
                    </span>
                  </>
                ) : (
                  <>{'\u20AC'} {prezzoNum.toFixed(1)}</>
                )}
              </p>
            </div>
          );
        })}
      </div>
      {popupProdotto && (
        <div
          onClick={() => {
            setPopupProdotto(null);
            setImmagineAttiva('');
          }}
          style={{
            position: 'fixed',
            top: 0, left: 0, right: 0, bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.9)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '1rem',
            overflowY: 'auto'
          }}
        >
          <div
            onClick={e => e.stopPropagation()}
            style={{
              maxWidth: '600px',
              width: '100%',
              backgroundColor: 'white',
              color: 'black',
              borderRadius: '10px',
              padding: '1rem',
              textAlign: 'center',
              position: 'relative'
            }}
          >
            <button
              onClick={() => {
                setPopupProdotto(null);
                setImmagineAttiva('');
              }}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer'
              }}
            >
              ✕
            </button>

            <img
              src={baseUrl + immagineAttiva}
              alt="zoom"
              style={{ width: '100%', height: 'auto', borderRadius: '6px', marginBottom: '1rem' }}
            />

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.3rem', marginBottom: '1rem', flexWrap: 'wrap' }}>
              {popupProdotto.immagine.split(',').map((img, idx) => (
                <img
                  key={idx}
                  src={baseUrl + img.trim()}
                  alt={`miniatura-${idx}`}
                  onClick={() => setImmagineAttiva(img.trim())}
                  style={{
                    width: '60px',
                    height: '60px',
                    objectFit: 'cover',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    border: img.trim() === immagineAttiva ? '2px solid black' : '1px solid #ccc'
                  }}
                />
              ))}
            </div>

            <h2 style={{ marginBottom: '0.5rem' }}>{popupProdotto.nome}</h2>
            <p style={{ fontSize: '0.9rem' }}>{popupProdotto.descrizione}</p>
            <p style={{ fontSize: '0.9rem', margin: '0.5rem 0' }}>{popupProdotto.taglia}</p>
            <p style={{ fontWeight: 'bold', fontSize: '1rem' }}>
              {'\u20AC'} {popupProdotto.offerta
                ? (
                  <span style={{ color: 'red' }}>
                    {(Number(popupProdotto.prezzo) * (1 - (Number(popupProdotto.sconto || 0) / 100))).toFixed(1)}
                  </span>
                )
                : Number(popupProdotto.prezzo).toFixed(1)}
            </p>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '0.5rem', marginTop: '0.5rem' }}>
              <button onClick={() => cambiaQuantita(popupProdotto.id, -1)} style={{ fontSize: '1.2rem' }}>–</button>
              <input type="text" value={quantita[popupProdotto.id] || 1} readOnly style={{ width: '2rem', textAlign: 'center' }} />
              <button onClick={() => cambiaQuantita(popupProdotto.id, 1)} style={{ fontSize: '1.2rem' }}>+</button>
            </div>

            <button
              onClick={() => {
                aggiungiAlCarrello(popupProdotto);
                setPopupProdotto(null);
              }}
              style={{
                marginTop: '1rem',
                padding: '0.5rem 1rem',
                backgroundColor: '#333',
                color: 'white',
                borderRadius: '6px',
                border: 'none',
                fontSize: '1rem'
              }}
            >
              {t('aggiungi')}
            </button>
          </div>
        </div>
      )}
      {carrello.length > 0 && (
        <div style={{
          marginTop: '2rem',
          backgroundColor: '#222',
          padding: '1rem',
          borderRadius: '8px',
          width: '100%',
          maxWidth: '400px',
          textAlign: 'left',
          marginLeft: 'auto',
          marginRight: 'auto'
        }}>
          <h3 style={{ marginBottom: '0.5rem', textAlign: 'center' }}>🛒 {t('carrello')}</h3>

          {Array.from(new Set(carrello.map(p => p.id))).map(id => {
            const prodotto = carrello.find(p => p.id === id);
            const qta = carrello.filter(p => p.id === id).length;
            return (
              <div key={id} style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                padding: '0.3rem 0',
                borderBottom: '1px solid #444'
              }}>
                <span>{prodotto.nome} × {qta}</span>
                <button onClick={() => rimuoviDalCarrello(id)}
                  style={{
                    background: 'red',
                    color: 'white',
                    border: 'none',
                    padding: '0.2rem 0.5rem',
                    fontSize: '0.7rem',
                    borderRadius: '4px',
                    cursor: 'pointer'
                  }}>{t('rimuovi')}</button>
              </div>

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/struttura_progetto.txt -----
.
├── README.md
├── app
│   ├── 404
│   │   └── page.js
│   ├── :api:save-product: 
│   ├── ClientProviders.jsx
│   ├── abbigliamento
│   │   ├── page copy1.js
│   │   ├── page copy2.js
│   │   └── page.js
│   ├── accessori
│   │   ├── page copy1.js
│   │   ├── page copy2.js
│   │   └── page.js
│   ├── admin
│   │   ├── Analisi_AdminPage_COMPLETA.docx
│   │   ├── clienti
│   │   │   ├── page copy1.js
│   │   │   ├── page copy2.js
│   │   │   └── page.js
│   │   ├── edit
│   │   │   ├── [id]
│   │   │   │   ├── page.tsx
│   │   │   │   └── tsconfig.json
│   │   │   ├── data
│   │   │   │   └── products.json
│   │   │   └── id
│   │   │       └── page.tsx
│   │   ├── inventario
│   │   │   ├── page copy 2.js
│   │   │   ├── page copy1.js
│   │   │   ├── page copy3.js
│   │   │   └── page.js
│   │   ├── login
│   │   │   ├── page copy1.js
│   │   │   └── page.js
│   │   ├── ordini
│   │   │   └── page.js
│   │   ├── page copy1.js
│   │   ├── page copy2.js
│   │   ├── page copy3.js
│   │   ├── page.js
│   │   ├── spedizioni
│   │   │   └── page.js
│   │   └── vendite
│   │       ├── VenditePageContent.js
│   │       └── page.js
│   ├── api
│   │   ├── admin-log
│   │   │   └── route.js
│   │   ├── auth
│   │   │   ├── login.js
│   │   │   └── register.js
│   │   ├── email
│   │   │   └── route.js
│   │   ├── fattura
│   │   │   └── route.js
│   │   ├── get-ordine
│   │   │   └── route.js
│   │   ├── products
│   │   │   ├── [id]
│   │   │   │   ├── route copy.js
│   │   │   │   └── route.js
│   │   │   ├── rou.ts
│   │   │   └── route.js
│   │   ├── save-ordini
│   │   │   └── route.js
│   │   ├── save-product
│   │   │   ├── route copy.js
│   │   │   └── route.js
│   │   └── upload-image
│   │       ├── route copy.js
│   │       └── route.js
│   ├── ar
│   │   └── page.js
│   ├── brand
│   │   └── page.js
│   ├── checkout
│   │   ├── page copy 2.js
│   │   ├── page copy1.js
│   │   ├── page copy3.js
│   │   ├── page copy4.js
│   │   ├── page copy5.js
│   │   ├── page copy6.js
│   │   ├── page copy7.js
│   │   └── page.js
│   ├── de
│   │   └── page.js
│   ├── en
│   │   └── page.js
│   ├── es
│   │   └── page.js
│   ├── eventi
│   │   └── page.js
│   ├── favicon.ico
│   ├── fr
│   │   └── page.js
│   ├── gioielli
│   │   ├── page copy10.js
│   │   ├── page copy11.js
│   │   ├── page copy12.js
│   │   ├── page copy13.js
│   │   ├── page copy14.js
│   │   ├── page copy15.js
│   │   ├── page copy16.js
│   │   ├── page copy17.js
│   │   ├── page copy18.js
│   │   ├── page copy2.js
│   │   ├── page copy3.js
│   │   ├── page copy4.js
│   │   ├── page copy5.js
│   │   ├── page copy6.js
│   │   ├── page copy7.js
│   │   ├── page copy8.js
│   │   ├── page copy9.js
│   │   └── page.js
│   ├── globals.css
│   ├── globals_v0.1.css
│   ├── it
│   │   └── page.js
│   ├── ja
│   │   └── page.js
│   ├── layout.js
│   ├── layout_v0.3.js
│   ├── lib
│   │   ├── supabaseClient copy1.js
│   │   ├── supabaseClient copy2.js
│   │   └── supabaseClient.js
│   ├── offerte
│   │   └── page.js
│   ├── ordine-confermato
│   │   └── page.js
│   ├── pagamento
│   │   └── page.js
│   ├── page copy 2.js
│   ├── page copy.js
│   ├── page.js
│   ├── page_v0.3.js
│   ├── search
│   │   └── page.js
│   ├── servizi
│   │   └── page.js
│   └── zh
│       └── page.js
├── components
│   ├── CategoryButtons.js
│   ├── CategoryButtons_v0.1.js
│   ├── CategoryButtonsxsitogr.js
│   ├── FlagLanguageSwitcher.js
│   ├── FlagLanguageSwitcher_v0.1.js
│   ├── LoginSidebar.jsx
│   ├── MobileMenu.js
│   ├── SearchIcon.js
│   ├── TopRightMenu.js
│   ├── UserMenu copy1.js
│   ├── UserMenu copy10.js
│   ├── UserMenu copy11.js
│   ├── UserMenu copy12.js
│   ├── UserMenu copy13.js
│   ├── UserMenu copy14.js
│   ├── UserMenu copy15.js
│   ├── UserMenu copy16.js
│   ├── UserMenu copy17.js
│   ├── UserMenu copy2.js
│   ├── UserMenu copy3.js
│   ├── UserMenu copy4.js
│   ├── UserMenu copy5.js
│   ├── UserMenu copy6.js
│   ├── UserMenu copy7.js
│   ├── UserMenu copy8.js
│   ├── UserMenu copy9.js
│   └── UserMenu.js
├── eslint.config.mjs
├── file_tree.txt
├── inizializzazione di localhost:3000.txt
├── jsconfig.json
├── modules diagrams_scripts&explanation
│   ├── layoutjs_detailed_explanation_final.pdf
│   ├── manuale_completo_con_flussi_operativi-1.pdf
│   ├── manuale_struttura_moduli_gabriella_romeo.pdf
│   ├── package_json_detailed_explanation_with_diagram.pdf
│   ├── page_js_detailed_explanation_final.pdf
│   └── progetto_struttura_ascii_tree_finale.pdf
├── next copy1.config.mjs
├── next-env.d.ts
├── next.config.mjs
├── package-lock.json
├── package.json
├── postcss.config.js
├── postcss.config.mjs
├── public
│   ├── DSC00229.JPG
│   ├── conqr hero.png
│   ├── data
│   │   ├── clienti.json
│   │   ├── images
│   │   └── vecchio no supa products.json
│   ├── distortohero.png
│   ├── file.svg
│   ├── fonts
│   │   ├── GRGabriellaFinal.ttf
│   │   ├── GRGabriellaModern.ttf
│   │   └── GRGabriellaUltraCustom.ttf
│   ├── globe.svg
│   ├── hero copy.png
│   ├── hero.png
│   ├── hero1.png
│   ├── hero4.png
│   ├── heroold.png
│   ├── icons
│   │   ├── apple.svg
│   │   └── google.svg
│   ├── next.svg
│   ├── qr-instagram.png
│   ├── uploads
│   │   ├── BERLIN.png
│   │   ├── DSC00229.JPG
│   │   ├── MARRAKECH Y:G.png
│   │   ├── Marrakech w:g.png
│   │   ├── NEW DELHI W:G.png
│   │   ├── NEW YORK W.PNG
│   │   ├── NEW YORK Y.png
│   │   ├── SIDNEY W:G.png
│   │   ├── Screenshot 2025-05-25 at 12.01.52 PM.png
│   │   ├── Screenshot 2025-05-26 at 3.33.04 PM.png
│   │   ├── gg.jpg
│   │   └── gianluigi.jpg
│   ├── vecchio hero.png
│   ├── vercel.svg
│   └── window.svg
├── struttura_progetto.txt
├── tailwind.config.js
└── tsconfig.json

53 directories, 181 files

----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/tailwind.config.js -----
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      './app/**/*.{js,ts,jsx,tsx}',
      './components/**/*.{js,ts,jsx,tsx}',
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }
  
----- FILE: /Users/gianluigigrassi/Desktop/g-rgabriellaromeo/tsconfig.json -----
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "module": "esnext",
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}
